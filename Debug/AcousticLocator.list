
AcousticLocator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efcc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cac  0800f26c  0800f26c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011f18  08011f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08011f20  08011f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011f2c  08011f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08011f30  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000644  24000078  08011fa8  00013078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240006bc  08011fa8  000136bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00064ebc  00000000  00000000  000130a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f9e  00000000  00000000  00077f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024c8  00000000  00000000  0007bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001c3f  00000000  00000000  0007e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040a66  00000000  00000000  00080007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021714  00000000  00000000  000c0a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00251ed3  00000000  00000000  000e2181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00334054  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000af98  00000000  00000000  00334098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  0033f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f254 	.word	0x0800f254

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800f254 	.word	0x0800f254

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <_ZN14CircularBufferC1Ev>:
#include "CircularBuffer.h"
//#include <iostream>

	CircularBuffer::CircularBuffer(){}
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <_Z41__static_initialization_and_destruction_0v>:
        sum += propertionalGain*error;
        sum += integralGain*errors.getSum();
        sum += derivativeGain*(error - errors.getPrevious());

        return sum;
    }
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	CircularBuffer errors;
 80006d8:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80006da:	f7ff ffe7 	bl	80006ac <_ZN14CircularBufferC1Ev>
    }
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	24000094 	.word	0x24000094

080006e8 <_GLOBAL__sub_I_errors>:
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	f7ff fff2 	bl	80006d4 <_Z41__static_initialization_and_destruction_0v>
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_ZSt4acosf>:
  using ::acos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  acos(float __x)
  { return __builtin_acosf(__x); }
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	ed87 0a01 	vstr	s0, [r7, #4]
 80006fc:	ed97 0a01 	vldr	s0, [r7, #4]
 8000700:	f00d fbec 	bl	800dedc <acosf>
 8000704:	eef0 7a40 	vmov.f32	s15, s0
 8000708:	eeb0 0a67 	vmov.f32	s0, s15
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	ed87 0a01 	vstr	s0, [r7, #4]
 800071c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000720:	f00d fc26 	bl	800df70 <atanf>
 8000724:	eef0 7a40 	vmov.f32	s15, s0
 8000728:	eeb0 0a67 	vmov.f32	s0, s15
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	ed87 0a01 	vstr	s0, [r7, #4]
 800073c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000740:	f00d fbf8 	bl	800df34 <sqrtf>
 8000744:	eef0 7a40 	vmov.f32	s15, s0
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7f1b      	ldrb	r3, [r3, #28]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d109      	bne.n	800078c <HAL_TIM_IC_CaptureCallback+0x24>
	{
		mic1Triggered = 1;
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <HAL_TIM_IC_CaptureCallback+0x64>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
		mic1TimerCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800077e:	2100      	movs	r1, #0
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f00b ff29 	bl	800c5d8 <HAL_TIM_ReadCapturedValue>
 8000786:	4603      	mov	r3, r0
 8000788:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <HAL_TIM_IC_CaptureCallback+0x68>)
 800078a:	6013      	str	r3, [r2, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7f1b      	ldrb	r3, [r3, #28]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d109      	bne.n	80007a8 <HAL_TIM_IC_CaptureCallback+0x40>
	{
		mic2Triggered = 1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
		mic2TimerCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800079a:	2104      	movs	r1, #4
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f00b ff1b 	bl	800c5d8 <HAL_TIM_ReadCapturedValue>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a0c      	ldr	r2, [pc, #48]	@ (80007d8 <HAL_TIM_IC_CaptureCallback+0x70>)
 80007a6:	6013      	str	r3, [r2, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7f1b      	ldrb	r3, [r3, #28]
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d109      	bne.n	80007c4 <HAL_TIM_IC_CaptureCallback+0x5c>
	{
		mic3Triggered = 1;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0x74>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
		mic3TimerCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80007b6:	2108      	movs	r1, #8
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f00b ff0d 	bl	800c5d8 <HAL_TIM_ReadCapturedValue>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0x78>)
 80007c2:	6013      	str	r3, [r2, #0]
	}
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	24000560 	.word	0x24000560
 80007d0:	24000554 	.word	0x24000554
 80007d4:	24000561 	.word	0x24000561
 80007d8:	24000558 	.word	0x24000558
 80007dc:	24000562 	.word	0x24000562
 80007e0:	2400055c 	.word	0x2400055c
 80007e4:	00000000 	.word	0x00000000

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 80007ee:	af00      	add	r7, sp, #0
	//arm_mfcc_init_32_q15(&mfcc_instance, 2048, 20, 13);
//	PID controlAzimuthMotor(0.5, 0.1, 0.0);
//	PID controlElevationMotor(0.5, 0.1, 0.0);

	// Init Buffer
	CircularBuffer frame;
 80007f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff59 	bl	80006ac <_ZN14CircularBufferC1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f006 f953 	bl	8006aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f895 	bl	800092c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f000 fabf 	bl	8000d84 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8000806:	f000 fa0d 	bl	8000c24 <_ZL12MX_TIM1_Initv>
//  MX_TIM2_Init();
  MX_ADC1_Init();
 800080a:	f000 f97f 	bl	8000b0c <_ZL12MX_ADC1_Initv>
  MX_USART3_UART_Init();
 800080e:	f000 f91d 	bl	8000a4c <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000812:	2100      	movs	r1, #0
 8000814:	483e      	ldr	r0, [pc, #248]	@ (8000910 <main+0x128>)
 8000816:	f00b faf3 	bl	800be00 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 800081a:	2104      	movs	r1, #4
 800081c:	483c      	ldr	r0, [pc, #240]	@ (8000910 <main+0x128>)
 800081e:	f00b faef 	bl	800be00 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000822:	2108      	movs	r1, #8
 8000824:	483a      	ldr	r0, [pc, #232]	@ (8000910 <main+0x128>)
 8000826:	f00b faeb 	bl	800be00 <HAL_TIM_IC_Start_IT>
//  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
//
//  HAL_TIM_Base_Start_IT(&htim1);

  uint16_t val = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	f8a7 334e 	strh.w	r3, [r7, #846]	@ 0x34e

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000830:	2000      	movs	r0, #0
 8000832:	f006 f8c1 	bl	80069b8 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000836:	2001      	movs	r0, #1
 8000838:	f006 f8be 	bl	80069b8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800083c:	2002      	movs	r0, #2
 800083e:	f006 f8bb 	bl	80069b8 <BSP_LED_Init>

	  /*
	   * Calculate position
	   */

	  if ( mic1Triggered && mic2Triggered && mic3Triggered)
 8000842:	4b34      	ldr	r3, [pc, #208]	@ (8000914 <main+0x12c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00b      	beq.n	8000864 <main+0x7c>
 800084c:	4b32      	ldr	r3, [pc, #200]	@ (8000918 <main+0x130>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <main+0x7c>
 8000856:	4b31      	ldr	r3, [pc, #196]	@ (800091c <main+0x134>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <main+0x7c>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <main+0x7e>
 8000864:	2300      	movs	r3, #0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0eb      	beq.n	8000842 <main+0x5a>
	  {

//		  if (timer2BreakFlag)
//		  {
			  times[0] = CLK_PRD*mic1TimerCapture;
 800086a:	4b2d      	ldr	r3, [pc, #180]	@ (8000920 <main+0x138>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	ee07 3a90 	vmov	s15, r3
 8000872:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000876:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8000908 <main+0x120>
 800087a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800087e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000882:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8000886:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 800088a:	edc3 7a00 	vstr	s15, [r3]
			  times[1] = CLK_PRD*mic2TimerCapture;
 800088e:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <main+0x13c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	ee07 3a90 	vmov	s15, r3
 8000896:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800089a:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 8000908 <main+0x120>
 800089e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008a6:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80008aa:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 80008ae:	edc3 7a01 	vstr	s15, [r3, #4]
			  times[2] = CLK_PRD*mic3TimerCapture;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <main+0x140>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	ee07 3a90 	vmov	s15, r3
 80008ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008be:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8000908 <main+0x120>
 80008c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ca:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80008ce:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 80008d2:	edc3 7a02 	vstr	s15, [r3, #8]

			  mic1Triggered = 0;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <main+0x12c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
			  mic2Triggered = 0;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <main+0x130>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
			  mic3Triggered = 0;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <main+0x134>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
//
//			  TIM1->CNT = 0;
//			  timer2BreakFlag = 0;

//		  }
			  calculateTrilateration(rectangular, times);
 80008e8:	f107 0214 	add.w	r2, r7, #20
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fd94 	bl	8001420 <_Z22calculateTrilaterationPfS_>
			  rectangular2Spherical(rectangular, spherical);
 80008f8:	463a      	mov	r2, r7
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fb2d 	bl	8000f60 <_Z21rectangular2SphericalPfS_>
	  if ( mic1Triggered && mic2Triggered && mic3Triggered)
 8000906:	e79c      	b.n	8000842 <main+0x5a>
 8000908:	9abcaf48 	.word	0x9abcaf48
 800090c:	3e4ad7f2 	.word	0x3e4ad7f2
 8000910:	24000428 	.word	0x24000428
 8000914:	24000560 	.word	0x24000560
 8000918:	24000561 	.word	0x24000561
 800091c:	24000562 	.word	0x24000562
 8000920:	24000554 	.word	0x24000554
 8000924:	24000558 	.word	0x24000558
 8000928:	2400055c 	.word	0x2400055c

0800092c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09c      	sub	sp, #112	@ 0x70
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000936:	224c      	movs	r2, #76	@ 0x4c
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f00d fe29 	bl	800e592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2220      	movs	r2, #32
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f00d fe23 	bl	800e592 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800094c:	2002      	movs	r0, #2
 800094e:	f007 fc81 	bl	8008254 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b3b      	ldr	r3, [pc, #236]	@ (8000a44 <_Z18SystemClock_Configv+0x118>)
 8000958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a44 <_Z18SystemClock_Configv+0x118>)
 800095c:	f023 0301 	bic.w	r3, r3, #1
 8000960:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000962:	4b38      	ldr	r3, [pc, #224]	@ (8000a44 <_Z18SystemClock_Configv+0x118>)
 8000964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	4b36      	ldr	r3, [pc, #216]	@ (8000a48 <_Z18SystemClock_Configv+0x11c>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000974:	4a34      	ldr	r2, [pc, #208]	@ (8000a48 <_Z18SystemClock_Configv+0x11c>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b32      	ldr	r3, [pc, #200]	@ (8000a48 <_Z18SystemClock_Configv+0x11c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000988:	bf00      	nop
 800098a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a48 <_Z18SystemClock_Configv+0x11c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000996:	bf14      	ite	ne
 8000998:	2301      	movne	r3, #1
 800099a:	2300      	moveq	r3, #0
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1f3      	bne.n	800098a <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 80009a2:	2312      	movs	r3, #18
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009aa:	2340      	movs	r3, #64	@ 0x40
 80009ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80009ae:	2380      	movs	r3, #128	@ 0x80
 80009b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80009b2:	2320      	movs	r3, #32
 80009b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ba:	2300      	movs	r3, #0
 80009bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009be:	2304      	movs	r3, #4
 80009c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009c2:	230a      	movs	r3, #10
 80009c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ca:	2304      	movs	r3, #4
 80009cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009d2:	230c      	movs	r3, #12
 80009d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009d6:	2302      	movs	r3, #2
 80009d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 fc70 	bl	80082c8 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	bf14      	ite	ne
 80009ee:	2301      	movne	r3, #1
 80009f0:	2300      	moveq	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 80009f8:	f000 fdd0 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	233f      	movs	r3, #63	@ 0x3f
 80009fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2303      	movs	r3, #3
 8000a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4618      	mov	r0, r3
 8000a22:	f008 f8ab 	bl	8008b7c <HAL_RCC_ClockConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 8000a36:	f000 fdb1 	bl	800159c <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3770      	adds	r7, #112	@ 0x70
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	58000400 	.word	0x58000400
 8000a48:	58024800 	.word	0x58024800

08000a4c <_ZL19MX_USART3_UART_Initv>:

static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b2c      	ldr	r3, [pc, #176]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a52:	4a2d      	ldr	r2, [pc, #180]	@ (8000b08 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b2b      	ldr	r3, [pc, #172]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b29      	ldr	r3, [pc, #164]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b23      	ldr	r3, [pc, #140]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b20      	ldr	r3, [pc, #128]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a88:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a94:	481b      	ldr	r0, [pc, #108]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a96:	f00c f945 	bl	800cd24 <HAL_UART_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bf14      	ite	ne
 8000aa0:	2301      	movne	r3, #1
 8000aa2:	2300      	moveq	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000aaa:	f000 fd77 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4814      	ldr	r0, [pc, #80]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ab2:	f00d f948 	bl	800dd46 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf14      	ite	ne
 8000abc:	2301      	movne	r3, #1
 8000abe:	2300      	moveq	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000ac6:	f000 fd69 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aca:	2100      	movs	r1, #0
 8000acc:	480d      	ldr	r0, [pc, #52]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ace:	f00d f978 	bl	800ddc2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf14      	ite	ne
 8000ad8:	2301      	movne	r3, #1
 8000ada:	2300      	moveq	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000ae2:	f000 fd5b 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ae8:	f00d f8f4 	bl	800dcd4 <HAL_UARTEx_DisableFifoMode>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000afc:	f000 fd4e 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	240004c0 	.word	0x240004c0
 8000b08:	40004800 	.word	0x40004800

08000b0c <_ZL12MX_ADC1_Initv>:

static void MX_ADC1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	615a      	str	r2, [r3, #20]
 8000b2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b30:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b32:	4a3a      	ldr	r2, [pc, #232]	@ (8000c1c <_ZL12MX_ADC1_Initv+0x110>)
 8000b34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b36:	4b38      	ldr	r3, [pc, #224]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b38:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b3e:	4b36      	ldr	r3, [pc, #216]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b44:	4b34      	ldr	r3, [pc, #208]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b4a:	4b33      	ldr	r3, [pc, #204]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b50:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b56:	4b30      	ldr	r3, [pc, #192]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b62:	4b2d      	ldr	r3, [pc, #180]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b68:	4b2b      	ldr	r3, [pc, #172]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b7a:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b80:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b86:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000b8e:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b94:	4820      	ldr	r0, [pc, #128]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000b96:	f006 f9e1 	bl	8006f5c <HAL_ADC_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	bf14      	ite	ne
 8000ba0:	2301      	movne	r3, #1
 8000ba2:	2300      	moveq	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8000baa:	f000 fcf7 	bl	800159c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000bba:	f006 ff93 	bl	8007ae4 <HAL_ADCEx_MultiModeConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf14      	ite	ne
 8000bc4:	2301      	movne	r3, #1
 8000bc6:	2300      	moveq	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8000bce:	f000 fce5 	bl	800159c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <_ZL12MX_ADC1_Initv+0x114>)
 8000bd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bde:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000be2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be4:	2304      	movs	r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <_ZL12MX_ADC1_Initv+0x10c>)
 8000bf6:	f006 fb53 	bl	80072a0 <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <_ZL12MX_ADC1_Initv+0x102>
  {
    Error_Handler();
 8000c0a:	f000 fcc7 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	@ 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	240003c4 	.word	0x240003c4
 8000c1c:	40022000 	.word	0x40022000
 8000c20:	08600004 	.word	0x08600004

08000c24 <_ZL12MX_TIM1_Initv>:

static void MX_TIM1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0320 	add.w	r3, r7, #32
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c50:	4b4a      	ldr	r3, [pc, #296]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000c52:	4a4b      	ldr	r2, [pc, #300]	@ (8000d80 <_ZL12MX_TIM1_Initv+0x15c>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 8000c56:	4b49      	ldr	r3, [pc, #292]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000c58:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000c5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b47      	ldr	r3, [pc, #284]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c64:	4b45      	ldr	r3, [pc, #276]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b43      	ldr	r3, [pc, #268]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c72:	4b42      	ldr	r3, [pc, #264]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b40      	ldr	r3, [pc, #256]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c7e:	483f      	ldr	r0, [pc, #252]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000c80:	f00b f806 	bl	800bc90 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 8000c94:	f000 fc82 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4835      	ldr	r0, [pc, #212]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000ca6:	f00b fb9f 	bl	800c3e8 <HAL_TIM_ConfigClockSource>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	bf14      	ite	ne
 8000cb0:	2301      	movne	r3, #1
 8000cb2:	2300      	moveq	r3, #0
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <_ZL12MX_TIM1_Initv+0x9a>
  {
    Error_Handler();
 8000cba:	f000 fc6f 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000cbe:	482f      	ldr	r0, [pc, #188]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000cc0:	f00b f83d 	bl	800bd3e <HAL_TIM_IC_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8000cd4:	f000 fc62 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4824      	ldr	r0, [pc, #144]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000cec:	f00b ff6e 	bl	800cbcc <HAL_TIMEx_MasterConfigSynchronization>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf14      	ite	ne
 8000cf6:	2301      	movne	r3, #1
 8000cf8:	2300      	moveq	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <_ZL12MX_TIM1_Initv+0xe0>
  {
    Error_Handler();
 8000d00:	f000 fc4c 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4818      	ldr	r0, [pc, #96]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000d1c:	f00b fac7 	bl	800c2ae <HAL_TIM_IC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf14      	ite	ne
 8000d26:	2301      	movne	r3, #1
 8000d28:	2300      	moveq	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <_ZL12MX_TIM1_Initv+0x110>
  {
    Error_Handler();
 8000d30:	f000 fc34 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2204      	movs	r2, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4810      	ldr	r0, [pc, #64]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000d3c:	f00b fab7 	bl	800c2ae <HAL_TIM_IC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 8000d50:	f000 fc24 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2208      	movs	r2, #8
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4808      	ldr	r0, [pc, #32]	@ (8000d7c <_ZL12MX_TIM1_Initv+0x158>)
 8000d5c:	f00b faa7 	bl	800c2ae <HAL_TIM_IC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <_ZL12MX_TIM1_Initv+0x150>
  {
    Error_Handler();
 8000d70:	f000 fc14 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	3730      	adds	r7, #48	@ 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	24000428 	.word	0x24000428
 8000d80:	40010000 	.word	0x40010000

08000d84 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	@ 0x30
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da0:	4a68      	ldr	r2, [pc, #416]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000daa:	4b66      	ldr	r3, [pc, #408]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db8:	4b62      	ldr	r3, [pc, #392]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbe:	4a61      	ldr	r2, [pc, #388]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ddc:	4a59      	ldr	r2, [pc, #356]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000dde:	f043 0320 	orr.w	r3, r3, #32
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de6:	4b57      	ldr	r3, [pc, #348]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dec:	f003 0320 	and.w	r3, r3, #32
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df4:	4b53      	ldr	r3, [pc, #332]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfa:	4a52      	ldr	r2, [pc, #328]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e04:	4b4f      	ldr	r3, [pc, #316]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b4c      	ldr	r3, [pc, #304]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e18:	4a4a      	ldr	r2, [pc, #296]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e22:	4b48      	ldr	r3, [pc, #288]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b44      	ldr	r3, [pc, #272]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e36:	4a43      	ldr	r2, [pc, #268]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e40:	4b40      	ldr	r3, [pc, #256]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e54:	4a3b      	ldr	r2, [pc, #236]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5e:	4b39      	ldr	r3, [pc, #228]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|LD2_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2106      	movs	r1, #6
 8000e70:	4835      	ldr	r0, [pc, #212]	@ (8000f48 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000e72:	f007 f9d5 	bl	8008220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2170      	movs	r1, #112	@ 0x70
 8000e7a:	4834      	ldr	r0, [pc, #208]	@ (8000f4c <_ZL12MX_GPIO_Initv+0x1c8>)
 8000e7c:	f007 f9d0 	bl	8008220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000e86:	4832      	ldr	r0, [pc, #200]	@ (8000f50 <_ZL12MX_GPIO_Initv+0x1cc>)
 8000e88:	f007 f9ca 	bl	8008220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2140      	movs	r1, #64	@ 0x40
 8000e90:	4830      	ldr	r0, [pc, #192]	@ (8000f54 <_ZL12MX_GPIO_Initv+0x1d0>)
 8000e92:	f007 f9c5 	bl	8008220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LD2_Pin;
 8000e96:	2306      	movs	r3, #6
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4826      	ldr	r0, [pc, #152]	@ (8000f48 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000eae:	f007 f807 	bl	8007ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4824      	ldr	r0, [pc, #144]	@ (8000f58 <_ZL12MX_GPIO_Initv+0x1d4>)
 8000ec8:	f006 fffa 	bl	8007ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481a      	ldr	r0, [pc, #104]	@ (8000f4c <_ZL12MX_GPIO_Initv+0x1c8>)
 8000ee2:	f006 ffed 	bl	8007ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ee6:	2370      	movs	r3, #112	@ 0x70
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4813      	ldr	r0, [pc, #76]	@ (8000f4c <_ZL12MX_GPIO_Initv+0x1c8>)
 8000efe:	f006 ffdf 	bl	8007ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000f02:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480d      	ldr	r0, [pc, #52]	@ (8000f50 <_ZL12MX_GPIO_Initv+0x1cc>)
 8000f1c:	f006 ffd0 	bl	8007ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f20:	2340      	movs	r3, #64	@ 0x40
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	@ (8000f54 <_ZL12MX_GPIO_Initv+0x1d0>)
 8000f38:	f006 ffc2 	bl	8007ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3730      	adds	r7, #48	@ 0x30
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58021000 	.word	0x58021000
 8000f4c:	58021400 	.word	0x58021400
 8000f50:	58020c00 	.word	0x58020c00
 8000f54:	58021800 	.word	0x58021800
 8000f58:	58020800 	.word	0x58020800
 8000f5c:	00000000 	.word	0x00000000

08000f60 <_Z21rectangular2SphericalPfS_>:

/* USER CODE BEGIN 4 */
void rectangular2Spherical(float rect[], float sph[])
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	float r = sqrt(rect[0]*rect[0] + rect[1]*rect[1]);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	ed93 7a00 	vldr	s14, [r3]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	edd3 6a00 	vldr	s13, [r3]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3304      	adds	r3, #4
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f92:	eeb0 0a67 	vmov.f32	s0, s15
 8000f96:	f7ff fbcc 	bl	8000732 <_ZSt4sqrtf>
 8000f9a:	ed87 0a03 	vstr	s0, [r7, #12]
	float dist = sqrt(rect[0]*rect[0] + rect[1]*rect[1] + rect[2]*rect[2]);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	ed93 7a00 	vldr	s14, [r3]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	edd3 6a00 	vldr	s13, [r3]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3308      	adds	r3, #8
 8000fca:	edd3 6a00 	vldr	s13, [r3]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	edd3 7a00 	vldr	s15, [r3]
 8000fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	f7ff fba6 	bl	8000732 <_ZSt4sqrtf>
 8000fe6:	ed87 0a02 	vstr	s0, [r7, #8]
	sph[0] = std::atan(rect[1]/rect[0])*180/3.14;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3304      	adds	r3, #4
 8000fee:	ed93 7a00 	vldr	s14, [r3]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ffc:	eeb0 0a66 	vmov.f32	s0, s13
 8001000:	f7ff fb87 	bl	8000712 <_ZSt4atanf>
 8001004:	eef0 7a40 	vmov.f32	s15, s0
 8001008:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001070 <_Z21rectangular2SphericalPfS_+0x110>
 800100c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001010:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001014:	ed9f 5b14 	vldr	d5, [pc, #80]	@ 8001068 <_Z21rectangular2SphericalPfS_+0x108>
 8001018:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800101c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	edc3 7a00 	vstr	s15, [r3]
	sph[1] = std::acos(r/dist)*180/3.14;
 8001026:	ed97 7a03 	vldr	s14, [r7, #12]
 800102a:	edd7 7a02 	vldr	s15, [r7, #8]
 800102e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001032:	eeb0 0a66 	vmov.f32	s0, s13
 8001036:	f7ff fb5c 	bl	80006f2 <_ZSt4acosf>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001070 <_Z21rectangular2SphericalPfS_+0x110>
 8001042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001046:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800104a:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 8001068 <_Z21rectangular2SphericalPfS_+0x108>
 800104e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	3304      	adds	r3, #4
 8001056:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800105a:	edc3 7a00 	vstr	s15, [r3]
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	51eb851f 	.word	0x51eb851f
 800106c:	40091eb8 	.word	0x40091eb8
 8001070:	43340000 	.word	0x43340000

08001074 <_Z13jacobianGuessPfPA2_f>:

Eigen::Matrix3d jacobianGuess(float g[3], float mp[3][2])
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ae      	sub	sp, #184	@ 0xb8
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	// J is 3x3
	Eigen::Matrix3d J;
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fad5 	bl	8001634 <_ZN5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EEC1Ev>
	J << 2*g[0], 2*(g[1] - mp[0][1]), 2*g[2],
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001094:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001098:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
 800109c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010a0:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80010a4:	f107 0110 	add.w	r1, r7, #16
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fad2 	bl	8001652 <_ZN5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEElsERKd>
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3304      	adds	r3, #4
 80010b2:	ed93 7a00 	vldr	s14, [r3]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c8:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 80010cc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80010d0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fad6 	bl	8001688 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3308      	adds	r3, #8
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ee:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
 80010f2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80010f6:	4619      	mov	r1, r3
 80010f8:	4610      	mov	r0, r2
 80010fa:	f000 fac5 	bl	8001688 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd>
 80010fe:	4602      	mov	r2, r0
			2*(g[0] - mp[1][0]), 2*(g[1] - mp[1][1]), 2*g[2],
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3308      	adds	r3, #8
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001112:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001116:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800111a:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
 800111e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001122:	4619      	mov	r1, r3
 8001124:	4610      	mov	r0, r2
 8001126:	f000 faaf 	bl	8001688 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd>
 800112a:	4602      	mov	r2, r0
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	3304      	adds	r3, #4
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3308      	adds	r3, #8
 8001138:	edd3 7a01 	vldr	s15, [r3, #4]
 800113c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001140:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001144:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001148:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
 800114c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001150:	4619      	mov	r1, r3
 8001152:	4610      	mov	r0, r2
 8001154:	f000 fa98 	bl	8001688 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3308      	adds	r3, #8
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001166:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800116a:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
 800116e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f000 fa87 	bl	8001688 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd>
 800117a:	4602      	mov	r2, r0
			2*(g[0] - mp[2][0]), 2*(g[1] - mp[2][1]), 2*g[2];
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	ed93 7a00 	vldr	s14, [r3]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3310      	adds	r3, #16
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001192:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001196:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98
 800119a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f000 fa71 	bl	8001688 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd>
 80011a6:	4602      	mov	r2, r0
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	3304      	adds	r3, #4
 80011ac:	ed93 7a00 	vldr	s14, [r3]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3310      	adds	r3, #16
 80011b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c4:	ed87 7b28 	vstr	d7, [r7, #160]	@ 0xa0
 80011c8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f000 fa5a 	bl	8001688 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3308      	adds	r3, #8
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e6:	ed87 7b2a 	vstr	d7, [r7, #168]	@ 0xa8
 80011ea:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80011ee:	4619      	mov	r1, r3
 80011f0:	4610      	mov	r0, r2
 80011f2:	f000 fa49 	bl	8001688 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd>
	J << 2*g[0], 2*(g[1] - mp[0][1]), 2*g[2],
 80011f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fa38 	bl	8001670 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEED1Ev>
//			{2*g[0], 2*(g[1] - mp[0][1]), 2*g[2]},
//			{2*(g[0] - mp[1][0]), 2*(g[1] - mp[1][1]), 2*g[2]},
//			{2*(g[0] - mp[2][0]), 2*(g[1] - mp[2][1]), 2*g[2]}
//	};

	return J.inverse();
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f000 faaf 	bl	8001768 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7inverseEv>
 800120a:	4603      	mov	r3, r0
 800120c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001210:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001214:	4619      	mov	r1, r3
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 fad0 	bl	80017bc <_ZN5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EEC1INS_7InverseIS1_EEEERKNS_9EigenBaseIT_EE>
}
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	37b8      	adds	r7, #184	@ 0xb8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_Z13functionGuessPfPA2_fS_>:

Eigen::Vector3d functionGuess(float g[3], float mp[3][2], float d[3])
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	@ 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
	// M is just 1x3 numbers
	Eigen::Vector3d M;
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 fad5 	bl	80017e2 <_ZN5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EEC1Ev>
	M << (((g[0] - mp[0][0]) * (g[0] - mp[0][0])) + ((g[1] - mp[0][1]) * (g[1] - mp[0][1])) + (g[2] * g[2]) - (d[0] * d[0])),
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	ed93 7a00 	vldr	s14, [r3]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	edd3 6a00 	vldr	s13, [r3]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3304      	adds	r3, #4
 8001260:	edd3 6a00 	vldr	s13, [r3]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	edd3 7a01 	vldr	s15, [r3, #4]
 800126a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3304      	adds	r3, #4
 8001272:	ed93 6a00 	vldr	s12, [r3]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	edd3 7a01 	vldr	s15, [r3, #4]
 800127c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	3308      	adds	r3, #8
 800128c:	edd3 6a00 	vldr	s13, [r3]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3308      	adds	r3, #8
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	edd3 6a00 	vldr	s13, [r3]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012b8:	ed87 7b08 	vstr	d7, [r7, #32]
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	f107 0220 	add.w	r2, r7, #32
 80012c4:	68f9      	ldr	r1, [r7, #12]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fa9a 	bl	8001800 <_ZN5Eigen9DenseBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEElsERKd>
			(((g[0] - mp[1][0]) * (g[0] - mp[1][0])) + ((g[1] - mp[1][1]) * (g[1] - mp[1][1])) + (g[2] * g[2]) - (d[1] * d[1])),
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	ed93 7a00 	vldr	s14, [r3]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3308      	adds	r3, #8
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	edd3 6a00 	vldr	s13, [r3]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3308      	adds	r3, #8
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3304      	adds	r3, #4
 80012f8:	edd3 6a00 	vldr	s13, [r3]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3308      	adds	r3, #8
 8001300:	edd3 7a01 	vldr	s15, [r3, #4]
 8001304:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	3304      	adds	r3, #4
 800130c:	ed93 6a00 	vldr	s12, [r3]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3308      	adds	r3, #8
 8001314:	edd3 7a01 	vldr	s15, [r3, #4]
 8001318:	ee76 7a67 	vsub.f32	s15, s12, s15
 800131c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3308      	adds	r3, #8
 8001328:	edd3 6a00 	vldr	s13, [r3]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	3308      	adds	r3, #8
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001338:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3304      	adds	r3, #4
 8001340:	edd3 6a00 	vldr	s13, [r3]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	3304      	adds	r3, #4
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001358:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
 800135c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fa66 	bl	8001838 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd>
 800136c:	4602      	mov	r2, r0
			(((g[0] - mp[2][0]) * (g[0] - mp[2][0])) + ((g[1] - mp[2][1]) * (g[1] - mp[2][1])) + (g[2] * g[2]) - (d[2] * d[2]));
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	ed93 7a00 	vldr	s14, [r3]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3310      	adds	r3, #16
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	edd3 6a00 	vldr	s13, [r3]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3310      	adds	r3, #16
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3304      	adds	r3, #4
 800139a:	edd3 6a00 	vldr	s13, [r3]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3310      	adds	r3, #16
 80013a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3304      	adds	r3, #4
 80013ae:	ed93 6a00 	vldr	s12, [r3]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3310      	adds	r3, #16
 80013b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80013ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3308      	adds	r3, #8
 80013ca:	edd3 6a00 	vldr	s13, [r3]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3308      	adds	r3, #8
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	3308      	adds	r3, #8
 80013e2:	edd3 6a00 	vldr	s13, [r3]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3308      	adds	r3, #8
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013fa:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
 80013fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001402:	4619      	mov	r1, r3
 8001404:	4610      	mov	r0, r2
 8001406:	f000 fa17 	bl	8001838 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd>
	M << (((g[0] - mp[0][0]) * (g[0] - mp[0][0])) + ((g[1] - mp[0][1]) * (g[1] - mp[0][1])) + (g[2] * g[2]) - (d[0] * d[0])),
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fa05 	bl	800181e <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
//			((g[0] - mp[0][0]) * (g[0] - mp[0][0])) + ((g[1] - mp[0][1]) * (g[1] - mp[0][1])) + (g[2] * g[2]) - (d[0] * d[0]),
//			((g[0] - mp[1][0]) * (g[0] - mp[1][0])) + ((g[1] - mp[1][1]) * (g[1] - mp[1][1])) + (g[2] * g[2]) - (d[1] * d[1]),
//			((g[0] - mp[2][0]) * (g[0] - mp[2][0])) + ((g[1] - mp[2][1]) * (g[1] - mp[2][1])) + (g[2] * g[2]) - (d[2] * d[2])
//	};

	return M;
 8001414:	bf00      	nop

	// might have to make a separate container since it has to return this list
}
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	3738      	adds	r7, #56	@ 0x38
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <_Z22calculateTrilaterationPfS_>:

void calculateTrilateration(float answer[], float time[])
{
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	ed2d 8b02 	vpush	{d8}
 8001426:	b0b0      	sub	sp, #192	@ 0xc0
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	float micPos[3][2] = {{0, .043}, {.05, -.0449}, {-.05, -.0449}};
 800142e:	4b58      	ldr	r3, [pc, #352]	@ (8001590 <_Z22calculateTrilaterationPfS_+0x170>)
 8001430:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8001434:	461d      	mov	r5, r3
 8001436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800143e:	e884 0003 	stmia.w	r4, {r0, r1}
	float guesses[] = {0.1, 0.1, 0.1};
 8001442:	4a54      	ldr	r2, [pc, #336]	@ (8001594 <_Z22calculateTrilaterationPfS_+0x174>)
 8001444:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001448:	ca07      	ldmia	r2, {r0, r1, r2}
 800144a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float distances[] = {time[0]*SPEEDOFSOUND, time[1]*SPEEDOFSOUND, time[2]*SPEEDOFSOUND};
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001598 <_Z22calculateTrilaterationPfS_+0x178>
 8001458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145c:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3304      	adds	r3, #4
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001598 <_Z22calculateTrilaterationPfS_+0x178>
 800146c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001470:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3308      	adds	r3, #8
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001598 <_Z22calculateTrilaterationPfS_+0x178>
 8001480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001484:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c


	Eigen::Vector3d change;
 8001488:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f9a8 	bl	80017e2 <_ZN5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EEC1Ev>

	for (int i=0; i < 10; i++)
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001498:	e061      	b.n	800155e <_Z22calculateTrilaterationPfS_+0x13e>
	{
		Eigen::Matrix3d Jinv = jacobianGuess(guesses, micPos);				// 3x3
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 80014a2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fde4 	bl	8001074 <_Z13jacobianGuessPfPA2_f>
		Eigen::Vector3d MF = functionGuess(guesses, micPos, distances);		// 3x1
 80014ac:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80014b0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80014b4:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 80014b8:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80014bc:	f7ff feb2 	bl	8001224 <_Z13functionGuessPfPA2_fS_>

		change = Jinv*MF;													// 3x1
 80014c0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80014c4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80014c8:	f107 0108 	add.w	r1, r7, #8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fa23 	bl	8001918 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IdLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80014d2:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80014d6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fa32 	bl	8001946 <_ZN5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IdLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		guesses[0] = guesses[0] - change[0];
 80014e2:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80014e6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80014ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fa37 	bl	8001964 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EEixEi>
 80014f6:	4603      	mov	r3, r0
 80014f8:	ed93 7b00 	vldr	d7, [r3]
 80014fc:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001500:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001504:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		guesses[1] = guesses[1] - change[1];
 8001508:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800150c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001510:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001514:	2101      	movs	r1, #1
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fa24 	bl	8001964 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EEixEi>
 800151c:	4603      	mov	r3, r0
 800151e:	ed93 7b00 	vldr	d7, [r3]
 8001522:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001526:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800152a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
		guesses[2] = guesses[2] - change[2];
 800152e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001532:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001536:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800153a:	2102      	movs	r1, #2
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fa11 	bl	8001964 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EEixEi>
 8001542:	4603      	mov	r3, r0
 8001544:	ed93 7b00 	vldr	d7, [r3]
 8001548:	ee38 7b47 	vsub.f64	d7, d8, d7
 800154c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001550:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	for (int i=0; i < 10; i++)
 8001554:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001558:	3301      	adds	r3, #1
 800155a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800155e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001562:	2b09      	cmp	r3, #9
 8001564:	dd99      	ble.n	800149a <_Z22calculateTrilaterationPfS_+0x7a>
	}

	answer[0] = guesses[0];
 8001566:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	601a      	str	r2, [r3, #0]
	answer[1] = guesses[1];
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001576:	601a      	str	r2, [r3, #0]
	answer[2] = guesses[2];
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3308      	adds	r3, #8
 800157c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001580:	601a      	str	r2, [r3, #0]

}
 8001582:	bf00      	nop
 8001584:	37c0      	adds	r7, #192	@ 0xc0
 8001586:	46bd      	mov	sp, r7
 8001588:	ecbd 8b02 	vpop	{d8}
 800158c:	bdb0      	pop	{r4, r5, r7, pc}
 800158e:	bf00      	nop
 8001590:	0800f26c 	.word	0x0800f26c
 8001594:	0800f284 	.word	0x0800f284
 8001598:	43ab8000 	.word	0x43ab8000

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <Error_Handler+0x8>

080015a8 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	bf00      	nop
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 80015ea:	b5b0      	push	{r4, r5, r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f9db 	bl	80019b0 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 80015fa:	4604      	mov	r4, r0
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f9e0 	bl	80019c6 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 8001606:	f107 020c 	add.w	r2, r7, #12
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	4621      	mov	r1, r4
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f9e3 	bl	80019dc <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 8001616:	bf00      	nop
 8001618:	4628      	mov	r0, r5
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bdb0      	pop	{r4, r5, r7, pc}

08001620 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_ZN5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f9e5 	bl	8001a0e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 8001644:	f000 f9f3 	bl	8001a2e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_ZN5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEElsERKd>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f9ea 	bl	8001a3c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKd>
}
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    finished();
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fa1f 	bl	8001abc <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd>:
  CommaInitializer& operator,(const Scalar& s)
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689c      	ldr	r4, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fa44 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80016a0:	4603      	mov	r3, r0
 80016a2:	429c      	cmp	r4, r3
 80016a4:	bf0c      	ite	eq
 80016a6:	2301      	moveq	r3, #1
 80016a8:	2300      	movne	r3, #0
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01c      	beq.n	80016ea <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0x62>
      m_row+=m_currentBlockRows;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	441a      	add	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685c      	ldr	r4, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fa33 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80016d8:	4603      	mov	r3, r0
 80016da:	429c      	cmp	r4, r3
 80016dc:	db05      	blt.n	80016ea <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0x62>
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0xcc>)
 80016e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001758 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0xd0>)
 80016e2:	2148      	movs	r1, #72	@ 0x48
 80016e4:	481d      	ldr	r0, [pc, #116]	@ (800175c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0xd4>)
 80016e6:	f00c fe1f 	bl	800e328 <__assert_func>
    eigen_assert(m_col<m_xpr.cols()
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689c      	ldr	r4, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fa18 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	429c      	cmp	r4, r3
 80016fc:	db05      	blt.n	800170a <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0x82>
 80016fe:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0xd8>)
 8001700:	4a15      	ldr	r2, [pc, #84]	@ (8001758 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0xd0>)
 8001702:	214b      	movs	r1, #75	@ 0x4b
 8001704:	4815      	ldr	r0, [pc, #84]	@ (800175c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0xd4>)
 8001706:	f00c fe0f 	bl	800e328 <__assert_func>
    eigen_assert(m_currentBlockRows==1);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d005      	beq.n	800171e <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0x96>
 8001712:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0xdc>)
 8001714:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0xd0>)
 8001716:	214d      	movs	r1, #77	@ 0x4d
 8001718:	4810      	ldr	r0, [pc, #64]	@ (800175c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEcmERKd+0xd4>)
 800171a:	f00c fe05 	bl	800e328 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	461c      	mov	r4, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6858      	ldr	r0, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	1c59      	adds	r1, r3, #1
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6091      	str	r1, [r2, #8]
 8001732:	461a      	mov	r2, r3
 8001734:	4601      	mov	r1, r0
 8001736:	4620      	mov	r0, r4
 8001738:	f000 fa0c 	bl	8001b54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 800173c:	4601      	mov	r1, r0
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	e9c1 2300 	strd	r2, r3, [r1]
    return *this;
 8001748:	687b      	ldr	r3, [r7, #4]
  }
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	0800f290 	.word	0x0800f290
 8001758:	0800f2e0 	.word	0x0800f2e0
 800175c:	0800f384 	.word	0x0800f384
 8001760:	0800f3e8 	.word	0x0800f3e8
 8001764:	0800f440 	.word	0x0800f440

08001768 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 fa08 	bl	8001b86 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8001776:	4604      	mov	r4, r0
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fa14 	bl	8001ba6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800177e:	4603      	mov	r3, r0
 8001780:	429c      	cmp	r4, r3
 8001782:	d006      	beq.n	8001792 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7inverseEv+0x2a>
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7inverseEv+0x48>)
 8001786:	4a0b      	ldr	r2, [pc, #44]	@ (80017b4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7inverseEv+0x4c>)
 8001788:	f240 115f 	movw	r1, #351	@ 0x15f
 800178c:	480a      	ldr	r0, [pc, #40]	@ (80017b8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7inverseEv+0x50>)
 800178e:	f00c fdcb 	bl	800e328 <__assert_func>
  return Inverse<Derived>(derived());
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fa17 	bl	8001bc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8001798:	4602      	mov	r2, r0
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fa33 	bl	8001c0c <_ZN5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERKS2_>
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	0800f458 	.word	0x0800f458
 80017b4:	0800f46c 	.word	0x0800f46c
 80017b8:	0800f4e4 	.word	0x0800f4e4

080017bc <_ZN5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EEC1INS_7InverseIS1_EEEERKNS_9EigenBaseIT_EE>:
    /** \brief Copy constructor for generic expressions.
      * \sa MatrixBase::operator=(const EigenBase<OtherDerived>&)
      */
    template<typename OtherDerived>
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const EigenBase<OtherDerived> &other)
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
      : Base(other.derived())
 80017c6:	687c      	ldr	r4, [r7, #4]
 80017c8:	6838      	ldr	r0, [r7, #0]
 80017ca:	f000 fa2f 	bl	8001c2c <_ZNK5Eigen9EigenBaseINS_7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4619      	mov	r1, r3
 80017d2:	4620      	mov	r0, r4
 80017d4:	f000 fa35 	bl	8001c42 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1INS_7InverseIS2_EEEERKNS_9DenseBaseIT_EE>
    { }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd90      	pop	{r4, r7, pc}

080017e2 <_ZN5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fa4f 	bl	8001c90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80017f2:	f000 fa5d 	bl	8001cb0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZN5Eigen9DenseBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEElsERKd>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 fa55 	bl	8001cc0 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKd>
}
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
    finished();
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fa8a 	bl	8001d40 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd>:
  CommaInitializer& operator,(const Scalar& s)
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689c      	ldr	r4, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 faae 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8001850:	4603      	mov	r3, r0
 8001852:	429c      	cmp	r4, r3
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01c      	beq.n	800189a <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0x62>
      m_row+=m_currentBlockRows;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	441a      	add	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	605a      	str	r2, [r3, #4]
      m_col = 0;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685c      	ldr	r4, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fa9d 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8001888:	4603      	mov	r3, r0
 800188a:	429c      	cmp	r4, r3
 800188c:	db05      	blt.n	800189a <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0x62>
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0xcc>)
 8001890:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0xd0>)
 8001892:	2148      	movs	r1, #72	@ 0x48
 8001894:	481d      	ldr	r0, [pc, #116]	@ (800190c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0xd4>)
 8001896:	f00c fd47 	bl	800e328 <__assert_func>
    eigen_assert(m_col<m_xpr.cols()
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689c      	ldr	r4, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fa82 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80018a8:	4603      	mov	r3, r0
 80018aa:	429c      	cmp	r4, r3
 80018ac:	db05      	blt.n	80018ba <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0x82>
 80018ae:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0xd8>)
 80018b0:	4a15      	ldr	r2, [pc, #84]	@ (8001908 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0xd0>)
 80018b2:	214b      	movs	r1, #75	@ 0x4b
 80018b4:	4815      	ldr	r0, [pc, #84]	@ (800190c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0xd4>)
 80018b6:	f00c fd37 	bl	800e328 <__assert_func>
    eigen_assert(m_currentBlockRows==1);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d005      	beq.n	80018ce <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0x96>
 80018c2:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0xdc>)
 80018c4:	4a10      	ldr	r2, [pc, #64]	@ (8001908 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0xd0>)
 80018c6:	214d      	movs	r1, #77	@ 0x4d
 80018c8:	4810      	ldr	r0, [pc, #64]	@ (800190c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEcmERKd+0xd4>)
 80018ca:	f00c fd2d 	bl	800e328 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	461c      	mov	r4, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6858      	ldr	r0, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	1c59      	adds	r1, r3, #1
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6091      	str	r1, [r2, #8]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4601      	mov	r1, r0
 80018e6:	4620      	mov	r0, r4
 80018e8:	f000 fa76 	bl	8001dd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 80018ec:	4601      	mov	r1, r0
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	e9c1 2300 	strd	r2, r3, [r1]
    return *this;
 80018f8:	687b      	ldr	r3, [r7, #4]
  }
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	bf00      	nop
 8001904:	0800f290 	.word	0x0800f290
 8001908:	0800f540 	.word	0x0800f540
 800190c:	0800f384 	.word	0x0800f384
 8001910:	0800f3e8 	.word	0x0800f3e8
 8001914:	0800f440 	.word	0x0800f440

08001918 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IdLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 8001924:	68b8      	ldr	r0, [r7, #8]
 8001926:	f000 f94e 	bl	8001bc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800192a:	4604      	mov	r4, r0
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 fa6c 	bl	8001e0a <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	4621      	mov	r1, r4
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fa95 	bl	8001e68 <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}

08001946 <_ZN5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IdLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fab3 	bl	8001ec0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IdLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 800195a:	4603      	mov	r3, r0
    }
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EEixEi>:
      * \sa operator[](Index) const, operator()(Index,Index), x(), y(), z(), w()
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator[](Index index)
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
    {
      EIGEN_STATIC_ASSERT(Derived::IsVectorAtCompileTime,
                          THE_BRACKET_OPERATOR_IS_ONLY_FOR_VECTORS__USE_THE_PARENTHESIS_OPERATOR_INSTEAD)
      eigen_assert(index >= 0 && index < size());
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db06      	blt.n	8001982 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EEixEi+0x1e>
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fabc 	bl	8001ef2 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 800197a:	4602      	mov	r2, r0
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	4293      	cmp	r3, r2
 8001980:	db06      	blt.n	8001990 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EEixEi+0x2c>
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EEixEi+0x40>)
 8001984:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EEixEi+0x44>)
 8001986:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800198a:	4808      	ldr	r0, [pc, #32]	@ (80019ac <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EEixEi+0x48>)
 800198c:	f00c fccc 	bl	800e328 <__assert_func>
      return coeffRef(index);
 8001990:	6839      	ldr	r1, [r7, #0]
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fad8 	bl	8001f48 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEi>
 8001998:	4603      	mov	r3, r0
    }
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	0800f5e4 	.word	0x0800f5e4
 80019a8:	0800f604 	.word	0x0800f604
 80019ac:	0800f6c0 	.word	0x0800f6c0

080019b0 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_ZN5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fac3 	bl	8001f8a <_ZN5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffed 	bl	80019f6 <_ZN5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fabe 	bl	8001fa0 <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKd>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 f86a 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dd07      	ble.n	8001a80 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKd+0x44>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f857 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	dc05      	bgt.n	8001a8c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKd+0x50>
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKd+0x74>)
 8001a82:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab4 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKd+0x78>)
 8001a84:	2124      	movs	r1, #36	@ 0x24
 8001a86:	480c      	ldr	r0, [pc, #48]	@ (8001ab8 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKd+0x7c>)
 8001a88:	f00c fc4e 	bl	800e328 <__assert_func>
    m_xpr.coeffRef(0,0) = s;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 f85d 	bl	8001b54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	0800f724 	.word	0x0800f724
 8001ab4:	0800f780 	.word	0x0800f780
 8001ab8:	0800f384 	.word	0x0800f384

08001abc <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	18d4      	adds	r4, r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f833 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	429c      	cmp	r4, r3
 8001adc:	d007      	beq.n	8001aee <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f820 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689c      	ldr	r4, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f816 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8001afc:	4603      	mov	r3, r0
 8001afe:	429c      	cmp	r4, r3
 8001b00:	d005      	beq.n	8001b0e <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 8001b04:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 8001b06:	217a      	movs	r1, #122	@ 0x7a
 8001b08:	4806      	ldr	r0, [pc, #24]	@ (8001b24 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 8001b0a:	f00c fc0d 	bl	800e328 <__assert_func>
      return m_xpr;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
  }
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	0800f810 	.word	0x0800f810
 8001b20:	0800f8b0 	.word	0x0800f8b0
 8001b24:	0800f384 	.word	0x0800f384

08001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	f000 fa43 	bl	8001fba <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4colsEv>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	f000 fa40 	bl	8001fca <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4rowsEv>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fa39 	bl	8001fda <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4dataEv>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	f000 fa2e 	bl	8001fca <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4rowsEv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	fb03 f202 	mul.w	r2, r3, r2
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4423      	add	r3, r4
    }
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}

08001b86 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f819 	bl	8001bc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ffd1 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f809 	bl	8001bc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ffb6 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_ZN5Eigen10MatrixBaseINS_7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fa03 	bl	8001ff0 <_ZN5Eigen9DenseBaseINS_7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_ZN5Eigen11InverseImplINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffed 	bl	8001bdc <_ZN5Eigen10MatrixBaseINS_7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZN5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERKS2_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffec 	bl	8001bf4 <_ZN5Eigen11InverseImplINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	601a      	str	r2, [r3, #0]
  {}
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_ZNK5Eigen9EigenBaseINS_7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1INS_7InverseIS2_EEEERKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE PlainObjectBase(const DenseBase<OtherDerived> &other)
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
      : m_storage()
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fed2 	bl	80019f6 <_ZN5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f9a3 	bl	8001fa0 <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EEC1Ev>
      _check_template_params();
 8001c5a:	f7ff fee8 	bl	8001a2e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      resizeLike(other);
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f9ec 	bl	800203e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE10resizeLikeINS_7InverseIS2_EEEEvRKNS_9EigenBaseIT_EE>
      _set_noalias(other);
 8001c66:	6839      	ldr	r1, [r7, #0]
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fa18 	bl	800209e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7InverseIS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZN5Eigen10MatrixBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fa2d 	bl	80020e0 <_ZN5Eigen9DenseBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ffed 	bl	8001c78 <_ZN5Eigen10MatrixBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fa28 	bl	80020f6 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EEC1Ev>
    }
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
    }
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKd>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f86a 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dd07      	ble.n	8001d04 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKd+0x44>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 f857 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	dc05      	bgt.n	8001d10 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKd+0x50>
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKd+0x74>)
 8001d06:	4a0c      	ldr	r2, [pc, #48]	@ (8001d38 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKd+0x78>)
 8001d08:	2124      	movs	r1, #36	@ 0x24
 8001d0a:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKd+0x7c>)
 8001d0c:	f00c fb0c 	bl	800e328 <__assert_func>
    m_xpr.coeffRef(0,0) = s;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f85d 	bl	8001dd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8001d1e:	4601      	mov	r1, r0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	0800f724 	.word	0x0800f724
 8001d38:	0800f918 	.word	0x0800f918
 8001d3c:	0800f384 	.word	0x0800f384

08001d40 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	18d4      	adds	r4, r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f833 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	429c      	cmp	r4, r3
 8001d60:	d007      	beq.n	8001d72 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f820 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689c      	ldr	r4, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 f816 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8001d80:	4603      	mov	r3, r0
 8001d82:	429c      	cmp	r4, r3
 8001d84:	d005      	beq.n	8001d92 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 8001d88:	4a06      	ldr	r2, [pc, #24]	@ (8001da4 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 8001d8a:	217a      	movs	r1, #122	@ 0x7a
 8001d8c:	4806      	ldr	r0, [pc, #24]	@ (8001da8 <_ZN5Eigen16CommaInitializerINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 8001d8e:	f00c facb 	bl	800e328 <__assert_func>
      return m_xpr;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
  }
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	0800f810 	.word	0x0800f810
 8001da4:	0800f9a8 	.word	0x0800f9a8
 8001da8:	0800f384 	.word	0x0800f384

08001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	f000 f9ac 	bl	8002110 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE4colsEv>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	f000 f9a9 	bl	8002120 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE4rowsEv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f9a2 	bl	8002130 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE4dataEv>
 8001dec:	4604      	mov	r4, r0
 8001dee:	f000 f997 	bl	8002120 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE4rowsEv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	fb03 f202 	mul.w	r2, r3, r2
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4423      	add	r3, r4
    }
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd90      	pop	{r4, r7, pc}

08001e0a <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f98c 	bl	8002146 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ffed 	bl	8001e20 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_ZN5Eigen11ProductImplINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ffed 	bl	8001e38 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff ffeb 	bl	8001e50 <_ZN5Eigen11ProductImplINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fe4d 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8001e8e:	4604      	mov	r4, r0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff95 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	429c      	cmp	r4, r3
 8001e9c:	d005      	beq.n	8001eaa <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8001e9e:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x4c>)
 8001ea0:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8001ea2:	2160      	movs	r1, #96	@ 0x60
 8001ea4:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8001ea6:	f00c fa3f 	bl	800e328 <__assert_func>
    }
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd90      	pop	{r4, r7, pc}
 8001eb4:	0800fa10 	.word	0x0800fa10
 8001eb8:	0800fa9c 	.word	0x0800fa9c
 8001ebc:	0800fb84 	.word	0x0800fb84

08001ec0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IdLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f946 	bl	800215c <_ZN5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f000 f94d 	bl	8002172 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4619      	mov	r1, r3
 8001edc:	4620      	mov	r0, r4
 8001ede:	f000 f953 	bl	8002188 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f93a 	bl	800215c <_ZN5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8001ee8:	4603      	mov	r3, r0
    }
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd90      	pop	{r4, r7, pc}

08001ef2 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8001ef2:	b590      	push	{r4, r7, lr}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f959 	bl	80021b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8001f00:	4604      	mov	r4, r0
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f965 	bl	80021d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	fb04 f303 	mul.w	r3, r4, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd90      	pop	{r4, r7, pc}

08001f16 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f977 	bl	8002212 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ffec 	bl	8001f16 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEi>:
    coeffRef(Index index)
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
      return internal::evaluator<Derived>(derived()).coeffRef(index);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f902 	bl	800215c <_ZN5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 f946 	bl	80021f2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	6839      	ldr	r1, [r7, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f95b 	bl	8002228 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8001f72:	4604      	mov	r4, r0
 8001f74:	bf00      	nop
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ffd7 	bl	8001f2e <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8001f80:	4623      	mov	r3, r4
    }
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd90      	pop	{r4, r7, pc}

08001f8a <_ZN5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f94c 	bl	8002248 <_ZN5Eigen8internal11plain_arrayIdLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	2303      	movs	r3, #3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_ZN5Eigen9DenseBaseINS_7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
    }
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fd88 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8002018:	4603      	mov	r3, r0
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fd85 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8002034:	4603      	mov	r3, r0
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE10resizeLikeINS_7InverseIS2_EEEEvRKNS_9EigenBaseIT_EE>:
    EIGEN_STRONG_INLINE void resizeLike(const EigenBase<OtherDerived>& _other)
 800203e:	b590      	push	{r4, r7, lr}
 8002040:	b087      	sub	sp, #28
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
      const OtherDerived& other = _other.derived();
 8002048:	6838      	ldr	r0, [r7, #0]
 800204a:	f7ff fdef 	bl	8001c2c <_ZNK5Eigen9EigenBaseINS_7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800204e:	6178      	str	r0, [r7, #20]
      internal::check_rows_cols_for_overflow<MaxSizeAtCompileTime>::run(other.rows(), other.cols());
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7ff ffd8 	bl	8002006 <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8002056:	4604      	mov	r4, r0
 8002058:	6978      	ldr	r0, [r7, #20]
 800205a:	f7ff ffe2 	bl	8002022 <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800205e:	4603      	mov	r3, r0
 8002060:	60fc      	str	r4, [r7, #12]
 8002062:	60bb      	str	r3, [r7, #8]
  }
 8002064:	bf00      	nop
      const Index othersize = other.rows()*other.cols();
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ffcd 	bl	8002006 <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800206c:	4604      	mov	r4, r0
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ffd7 	bl	8002022 <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8002074:	4603      	mov	r3, r0
 8002076:	fb04 f303 	mul.w	r3, r4, r3
 800207a:	613b      	str	r3, [r7, #16]
      else resize(other.rows(), other.cols());
 800207c:	6978      	ldr	r0, [r7, #20]
 800207e:	f7ff ffc2 	bl	8002006 <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8002082:	4604      	mov	r4, r0
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f7ff ffcc 	bl	8002022 <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	4621      	mov	r1, r4
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f8e5 	bl	8002260 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    }
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd90      	pop	{r4, r7, pc}

0800209e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7InverseIS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800209e:	b5b0      	push	{r4, r5, r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f90b 	bl	80022c4 <_ZN5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80020ae:	4604      	mov	r4, r0
 80020b0:	6838      	ldr	r0, [r7, #0]
 80020b2:	f7ff fdbb 	bl	8001c2c <_ZNK5Eigen9EigenBaseINS_7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 80020b6:	4605      	mov	r5, r0
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f90c 	bl	80022da <_ZN5Eigen8internal9assign_opIddEC1Ev>
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	461a      	mov	r2, r3
 80020c8:	4629      	mov	r1, r5
 80020ca:	4620      	mov	r0, r4
 80020cc:	f000 f910 	bl	80022f0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f8f7 	bl	80022c4 <_ZN5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80020d6:	4603      	mov	r3, r0
    }
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bdb0      	pop	{r4, r5, r7, pc}

080020e0 <_ZN5Eigen9DenseBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    }
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f906 	bl	8002312 <_ZN5Eigen8internal11plain_arrayIdLi3ELi0ELi0EEC1Ev>
    }
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
 8002114:	2301      	movs	r3, #1
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
 8002124:	2303      	movs	r3, #3
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
    }
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_ZN5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f89f 	bl	80022da <_ZN5Eigen8internal9assign_opIddEC1Ev>
 800219c:	f107 020c 	add.w	r2, r7, #12
 80021a0:	2300      	movs	r3, #0
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f8bf 	bl	8002328 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fe25 	bl	8001e0a <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fdfd 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fe15 	bl	8001e0a <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fde2 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f8a8 	bl	8002358 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
  }
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_ZN5Eigen8internal11plain_arrayIdLi9ELi0ELi0EEC1Ev>:
  plain_array()
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8002250:	f000 f899 	bl	8002386 <_ZN5Eigen8internal28check_static_allocation_sizeIdLi9EEEvv>
  }
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d108      	bne.n	8002284 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d105      	bne.n	8002284 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db02      	blt.n	8002284 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	da06      	bge.n	8002292 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 8002286:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 8002288:	f240 1111 	movw	r1, #273	@ 0x111
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 800228e:	f00c f84b 	bl	800e328 <__assert_func>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	613b      	str	r3, [r7, #16]
  }
 800229a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	fb02 f103 	mul.w	r1, r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	f000 f873 	bl	8002394 <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	0800fbe0 	.word	0x0800fbe0
 80022bc:	0800fd70 	.word	0x0800fd70
 80022c0:	0800fdfc 	.word	0x0800fdfc

080022c4 <_ZN5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_ZN5Eigen8internal9assign_opIddEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	6978      	ldr	r0, [r7, #20]
 8002306:	f000 f853 	bl	80023b0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_ZN5Eigen8internal11plain_arrayIdLi3ELi0ELi0EEC1Ev>:
  plain_array()
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800231a:	f000 f8af 	bl	800247c <_ZN5Eigen8internal28check_static_allocation_sizeIdLi3EEEvv>
  }
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f8a4 	bl	800248a <_ZN5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IdLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4619      	mov	r1, r3
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f8b2 	bl	80024b4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIddEEEEvRT_RKT0_RKT1_>
}
 8002350:	bf00      	nop
 8002352:	3728      	adds	r7, #40	@ 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8c4 	bl	80024f0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8002368:	687c      	ldr	r4, [r7, #4]
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f000 f8b3 	bl	80024d6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 8002370:	4603      	mov	r3, r0
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	4620      	mov	r0, r4
 8002378:	f000 f8c5 	bl	8002506 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIdLi0EEC1EPKdi>
  }
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}

08002386 <_ZN5Eigen8internal28check_static_allocation_sizeIdLi9EEEvv>:
void check_static_allocation_size()
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b08d      	sub	sp, #52	@ 0x34
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80023bc:	68b8      	ldr	r0, [r7, #8]
 80023be:	f7ff fe22 	bl	8002006 <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80023c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    Index dstCols = src.cols();
 80023c4:	68b8      	ldr	r0, [r7, #8]
 80023c6:	f7ff fe2c 	bl	8002022 <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80023ca:	62b8      	str	r0, [r7, #40]	@ 0x28
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fbb5 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d8:	4293      	cmp	r3, r2
 80023da:	d107      	bne.n	80023ec <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fba2 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d001      	beq.n	80023f0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 80023f0:	2300      	movs	r3, #0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff2f 	bl	8002260 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 8002402:	2303      	movs	r3, #3
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
    eigen_assert(( (Size<=1) || (Size>4) || (extract_data(src.nestedExpression())!=extract_data(dst)))
 8002406:	68b8      	ldr	r0, [r7, #8]
 8002408:	f000 f88f 	bl	800252a <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800240c:	4603      	mov	r3, r0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]

template<typename T, bool HasUsableDirectAccess=blas_traits<T>::HasUsableDirectAccess>
struct extract_data_selector {
  EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE static const typename T::Scalar* run(const T& m)
  {
    return blas_traits<T>::extract(m).data();
 8002414:	6938      	ldr	r0, [r7, #16]
 8002416:	f000 fb3e 	bl	8002a96 <_ZN5Eigen8internal11blas_traitsINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7extractERKS3_>
 800241a:	4603      	mov	r3, r0
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fb45 	bl	8002aac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8002422:	4604      	mov	r4, r0
 8002424:	bf00      	nop
};

template<typename T>
EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE const typename T::Scalar* extract_data(const T& m)
{
  return extract_data_selector<T>::run(m);
 8002426:	bf00      	nop
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	61bb      	str	r3, [r7, #24]
    return blas_traits<T>::extract(m).data();
 8002430:	69b8      	ldr	r0, [r7, #24]
 8002432:	f000 fb30 	bl	8002a96 <_ZN5Eigen8internal11blas_traitsINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7extractERKS3_>
 8002436:	4603      	mov	r3, r0
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fb37 	bl	8002aac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800243e:	4603      	mov	r3, r0
 8002440:	bf00      	nop
  return extract_data_selector<T>::run(m);
 8002442:	bf00      	nop
 8002444:	429c      	cmp	r4, r3
 8002446:	d106      	bne.n	8002456 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0xa6>
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0xc0>)
 800244a:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0xc4>)
 800244c:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8002450:	4809      	ldr	r0, [pc, #36]	@ (8002478 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS_7InverseIS3_EENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0xc8>)
 8002452:	f00b ff69 	bl	800e328 <__assert_func>
    ActualXprType actual_xpr(src.nestedExpression());
 8002456:	68b8      	ldr	r0, [r7, #8]
 8002458:	f000 f867 	bl	800252a <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800245c:	6238      	str	r0, [r7, #32]
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800245e:	68f9      	ldr	r1, [r7, #12]
 8002460:	6a38      	ldr	r0, [r7, #32]
 8002462:	f000 f86e 	bl	8002542 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEES3_Li3EE3runERKS3_RS3_>
  }
 8002466:	bf00      	nop
 8002468:	3734      	adds	r7, #52	@ 0x34
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	bf00      	nop
 8002470:	0800fe60 	.word	0x0800fe60
 8002474:	0800ff0c 	.word	0x0800ff0c
 8002478:	0800f4e4 	.word	0x0800f4e4

0800247c <_ZN5Eigen8internal28check_static_allocation_sizeIdLi3EEEvv>:
void check_static_allocation_size()
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <_ZN5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IdLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
    {
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fbfa 	bl	8001c90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800249c:	f7ff fc08 	bl	8001cb0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f8ab 	bl	8002600 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IdLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIddEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	6978      	ldr	r0, [r7, #20]
 80024ca:	f000 f8a6 	bl	800261a <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f8ad 	bl	8002640 <_ZNK5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE4dataEv>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIdLi0EEC1EPKdi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f880 	bl	8001620 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNK5Eigen7InverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEES3_Li3EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 8002542:	b590      	push	{r4, r7, lr}
 8002544:	b09b      	sub	sp, #108	@ 0x6c
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
    Matrix<typename MatrixType::Scalar,3,1> cofactors_col0;
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff f946 	bl	80017e2 <_ZN5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EEC1Ev>
    cofactors_col0.coeffRef(0) =  cofactor_3x3<MatrixType,0,0>(matrix);
 8002556:	f107 0310 	add.w	r3, r7, #16
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f886 	bl	800266e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEi>
 8002562:	4604      	mov	r4, r0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f893 	bl	8002690 <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi0ELi0EEENT_6ScalarERKS4_>
 800256a:	eeb0 7b40 	vmov.f64	d7, d0
 800256e:	ed84 7b00 	vstr	d7, [r4]
    cofactors_col0.coeffRef(1) =  cofactor_3x3<MatrixType,1,0>(matrix);
 8002572:	f107 0310 	add.w	r3, r7, #16
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f878 	bl	800266e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEi>
 800257e:	4604      	mov	r4, r0
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f8bc 	bl	80026fe <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi0EEENT_6ScalarERKS4_>
 8002586:	eeb0 7b40 	vmov.f64	d7, d0
 800258a:	ed84 7b00 	vstr	d7, [r4]
    cofactors_col0.coeffRef(2) =  cofactor_3x3<MatrixType,2,0>(matrix);
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	2102      	movs	r1, #2
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f86a 	bl	800266e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEi>
 800259a:	4604      	mov	r4, r0
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f8e5 	bl	800276c <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi2ELi0EEENT_6ScalarERKS4_>
 80025a2:	eeb0 7b40 	vmov.f64	d7, d0
 80025a6:	ed84 7b00 	vstr	d7, [r4]
    const Scalar det = (cofactors_col0.cwiseProduct(matrix.col(0))).sum();
 80025aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025ae:	2200      	movs	r2, #0
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f911 	bl	80027da <_ZNK5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 80025b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025bc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80025c0:	f107 0110 	add.w	r1, r7, #16
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f91b 	bl	8002800 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE12cwiseProductINS_5BlockIKNS1_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIdNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 80025ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f934 	bl	800283c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 80025d4:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
    const Scalar invdet = Scalar(1) / det;
 80025d8:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80025dc:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80025e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025e4:	ed87 7b02 	vstr	d7, [r7, #8]
    compute_inverse_size3_helper(matrix, invdet, cofactors_col0, result);
 80025e8:	f107 0210 	add.w	r2, r7, #16
 80025ec:	f107 0108 	add.w	r1, r7, #8
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f93d 	bl	8002872 <_ZN5Eigen8internal28compute_inverse_size3_helperINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKNT0_6ScalarERKNS2_IS8_Li3ELi1ELi0ELi3ELi1EEERS7_>
  }
 80025f8:	bf00      	nop
 80025fa:	376c      	adds	r7, #108	@ 0x6c
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd90      	pop	{r4, r7, pc}

08002600 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IdLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800260a:	6839      	ldr	r1, [r7, #0]
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f9d3 	bl	80029b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IdLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f9e6 	bl	80029fa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f9ec 	bl	8002a10 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIddEEEEvRT_RKT0_RKT1_>
  }
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <_ZNK5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <_ZNK5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa0d 	bl	8002a7e <_ZNK5Eigen9DenseBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 8002664:	4603      	mov	r3, r0
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEi>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index index)
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
      return m_storage.data()[index];
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fd58 	bl	8002130 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE4dataEv>
 8002680:	4602      	mov	r2, r0
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
    }
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi0ELi0EEENT_6ScalarERKS4_>:
inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)
 8002690:	b580      	push	{r7, lr}
 8002692:	ed2d 8b04 	vpush	{d8-d9}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return m.coeff(i1, j1) * m.coeff(i2, j2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	2101      	movs	r1, #1
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fa0f 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 80026a8:	4603      	mov	r3, r0
 80026aa:	ed93 8b00 	vldr	d8, [r3]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2202      	movs	r2, #2
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fa06 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 80026ba:	4603      	mov	r3, r0
 80026bc:	ed93 7b00 	vldr	d7, [r3]
 80026c0:	ee28 8b07 	vmul.f64	d8, d8, d7
       - m.coeff(i1, j2) * m.coeff(i2, j1);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f9fb 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 80026d0:	4603      	mov	r3, r0
 80026d2:	ed93 9b00 	vldr	d9, [r3]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	2102      	movs	r1, #2
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f9f2 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 80026e2:	4603      	mov	r3, r0
 80026e4:	ed93 7b00 	vldr	d7, [r3]
 80026e8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80026ec:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 80026f0:	eeb0 0b47 	vmov.f64	d0, d7
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	ecbd 8b04 	vpop	{d8-d9}
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi0EEENT_6ScalarERKS4_>:
inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)
 80026fe:	b580      	push	{r7, lr}
 8002700:	ed2d 8b04 	vpush	{d8-d9}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  return m.coeff(i1, j1) * m.coeff(i2, j2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	2102      	movs	r1, #2
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f9d8 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002716:	4603      	mov	r3, r0
 8002718:	ed93 8b00 	vldr	d8, [r3]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f9cf 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002728:	4603      	mov	r3, r0
 800272a:	ed93 7b00 	vldr	d7, [r3]
 800272e:	ee28 8b07 	vmul.f64	d8, d8, d7
       - m.coeff(i1, j2) * m.coeff(i2, j1);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f9c4 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 800273e:	4603      	mov	r3, r0
 8002740:	ed93 9b00 	vldr	d9, [r3]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f9bb 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002750:	4603      	mov	r3, r0
 8002752:	ed93 7b00 	vldr	d7, [r3]
 8002756:	ee29 7b07 	vmul.f64	d7, d9, d7
 800275a:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 800275e:	eeb0 0b47 	vmov.f64	d0, d7
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	ecbd 8b04 	vpop	{d8-d9}
 800276a:	bd80      	pop	{r7, pc}

0800276c <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi2ELi0EEENT_6ScalarERKS4_>:
inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)
 800276c:	b580      	push	{r7, lr}
 800276e:	ed2d 8b04 	vpush	{d8-d9}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return m.coeff(i1, j1) * m.coeff(i2, j2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f9a1 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002784:	4603      	mov	r3, r0
 8002786:	ed93 8b00 	vldr	d8, [r3]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2202      	movs	r2, #2
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f998 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002796:	4603      	mov	r3, r0
 8002798:	ed93 7b00 	vldr	d7, [r3]
 800279c:	ee28 8b07 	vmul.f64	d8, d8, d7
       - m.coeff(i1, j2) * m.coeff(i2, j1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f98d 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 80027ac:	4603      	mov	r3, r0
 80027ae:	ed93 9b00 	vldr	d9, [r3]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f984 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 80027be:	4603      	mov	r3, r0
 80027c0:	ed93 7b00 	vldr	d7, [r3]
 80027c4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80027c8:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 80027cc:	eeb0 0b47 	vmov.f64	d0, d7
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	ecbd 8b04 	vpop	{d8-d9}
 80027d8:	bd80      	pop	{r7, pc}

080027da <_ZNK5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
  return ColXpr(derived(), i);
}

/// This is the const version of col().
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstColXpr col(Index i) const
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
{
  return ConstColXpr(derived(), i);
 80027e6:	68b8      	ldr	r0, [r7, #8]
 80027e8:	f7ff f9ed 	bl	8001bc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4619      	mov	r1, r3
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f980 	bl	8002af8 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE12cwiseProductINS_5BlockIKNS1_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIdNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800280c:	68b8      	ldr	r0, [r7, #8]
 800280e:	f7ff fafc 	bl	8001e0a <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8002812:	4604      	mov	r4, r0
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f997 	bl	8002b48 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800281a:	4605      	mov	r5, r0
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f99c 	bl	8002b5e <_ZN5Eigen8internal17scalar_product_opIddEC1Ev>
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	462a      	mov	r2, r5
 800282c:	4621      	mov	r1, r4
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f9b8 	bl	8002ba4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS6_RSB_RKS3_>
}
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bdb0      	pop	{r4, r5, r7, pc}

0800283c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fa01 	bl	8002c4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 800284a:	4604      	mov	r4, r0
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fa06 	bl	8002c62 <_ZN5Eigen8internal13scalar_sum_opIddEC1Ev>
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	4619      	mov	r1, r3
 800285c:	4620      	mov	r0, r4
 800285e:	f000 fa89 	bl	8002d74 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_>
 8002862:	eeb0 7b40 	vmov.f64	d7, d0
 8002866:	bf00      	nop
}
 8002868:	eeb0 0b47 	vmov.f64	d0, d7
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}

08002872 <_ZN5Eigen8internal28compute_inverse_size3_helperINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKNT0_6ScalarERKNS2_IS8_Li3ELi1ELi0ELi3ELi1EEERS7_>:
inline void compute_inverse_size3_helper(
 8002872:	b580      	push	{r7, lr}
 8002874:	ed2d 8b04 	vpush	{d8-d9}
 8002878:	b098      	sub	sp, #96	@ 0x60
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
  const Scalar c01 = cofactor_3x3<MatrixType,0,1>(matrix) * invdet;
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fabb 	bl	8002e00 <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi0ELi1EEENT_6ScalarERKS4_>
 800288a:	eeb0 6b40 	vmov.f64	d6, d0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	ed93 7b00 	vldr	d7, [r3]
 8002894:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002898:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
  const Scalar c11 = cofactor_3x3<MatrixType,1,1>(matrix) * invdet;
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fae6 	bl	8002e6e <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi1EEENT_6ScalarERKS4_>
 80028a2:	eeb0 6b40 	vmov.f64	d6, d0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	ed93 7b00 	vldr	d7, [r3]
 80028ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80028b0:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
  const Scalar c02 = cofactor_3x3<MatrixType,0,2>(matrix) * invdet;
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fb11 	bl	8002edc <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi0ELi2EEENT_6ScalarERKS4_>
 80028ba:	eeb0 6b40 	vmov.f64	d6, d0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	ed93 7b00 	vldr	d7, [r3]
 80028c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80028c8:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
  result.coeffRef(1,2) =  cofactor_3x3<MatrixType,2,1>(matrix) * invdet;
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fb3c 	bl	8002f4a <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi2ELi1EEENT_6ScalarERKS4_>
 80028d2:	eeb0 9b40 	vmov.f64	d9, d0
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	ed93 8b00 	vldr	d8, [r3]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2202      	movs	r2, #2
 80028e0:	2101      	movs	r1, #1
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f936 	bl	8001b54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 80028e8:	4603      	mov	r3, r0
 80028ea:	ee29 7b08 	vmul.f64	d7, d9, d8
 80028ee:	ed83 7b00 	vstr	d7, [r3]
  result.coeffRef(2,1) =  cofactor_3x3<MatrixType,1,2>(matrix) * invdet;
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fb60 	bl	8002fb8 <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi2EEENT_6ScalarERKS4_>
 80028f8:	eeb0 9b40 	vmov.f64	d9, d0
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	ed93 8b00 	vldr	d8, [r3]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	2102      	movs	r1, #2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff f923 	bl	8001b54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 800290e:	4603      	mov	r3, r0
 8002910:	ee29 7b08 	vmul.f64	d7, d9, d8
 8002914:	ed83 7b00 	vstr	d7, [r3]
  result.coeffRef(2,2) =  cofactor_3x3<MatrixType,2,2>(matrix) * invdet;
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fb84 	bl	8003026 <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi2ELi2EEENT_6ScalarERKS4_>
 800291e:	eeb0 9b40 	vmov.f64	d9, d0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	ed93 8b00 	vldr	d8, [r3]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2202      	movs	r2, #2
 800292c:	2102      	movs	r1, #2
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff f910 	bl	8001b54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8002934:	4603      	mov	r3, r0
 8002936:	ee29 7b08 	vmul.f64	d7, d9, d8
 800293a:	ed83 7b00 	vstr	d7, [r3]
  result.coeffRef(1,0) =  c01;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2200      	movs	r2, #0
 8002942:	2101      	movs	r1, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff f905 	bl	8001b54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 800294a:	4601      	mov	r1, r0
 800294c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002950:	e9c1 2300 	strd	r2, r3, [r1]
  result.coeffRef(1,1) =  c11;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	2101      	movs	r1, #1
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f8fa 	bl	8001b54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8002960:	4601      	mov	r1, r0
 8002962:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002966:	e9c1 2300 	strd	r2, r3, [r1]
  result.coeffRef(2,0) =  c02;  
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	2102      	movs	r1, #2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff f8ef 	bl	8001b54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8002976:	4601      	mov	r1, r0
 8002978:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800297c:	e9c1 2300 	strd	r2, r3, [r1]
  result.row(0) = cofactors_col0 * invdet;
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	2200      	movs	r2, #0
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fb83 	bl	8003094 <_ZN5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800298e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fba2 	bl	80030e0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEmlIdEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIdNS6_18promote_scalar_argIdT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIdS9_NS7_IdS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 800299c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fbd3 	bl	8003152 <_ZN5Eigen10MatrixBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEaSINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS2_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS8_18scalar_constant_opIdEESC_EEEEEERS4_RKNS_9DenseBaseIT_EE>
}
 80029ac:	bf00      	nop
 80029ae:	3760      	adds	r7, #96	@ 0x60
 80029b0:	46bd      	mov	sp, r7
 80029b2:	ecbd 8b04 	vpop	{d8-d9}
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IdLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff fbca 	bl	800215c <_ZN5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80029c8:	4604      	mov	r4, r0
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f7ff fbd1 	bl	8002172 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 80029d0:	4605      	mov	r5, r0
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fc7f 	bl	80022da <_ZN5Eigen8internal9assign_opIddEC1Ev>
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	461a      	mov	r2, r3
 80029e2:	4629      	mov	r1, r5
 80029e4:	4620      	mov	r0, r4
 80029e6:	f000 fbcd 	bl	8003184 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fbb6 	bl	800215c <_ZN5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80029f0:	4603      	mov	r3, r0
    }
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bdb0      	pop	{r4, r5, r7, pc}

080029fa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIddEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	@ 0x30
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8002a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fbe5 	bl	80021f2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fbbb 	bl	80031a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8002a32:	f107 0320 	add.w	r3, r7, #32
 8002a36:	68f9      	ldr	r1, [r7, #12]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fbda 	bl	80021f2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fbfe 	bl	8003240 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002a4a:	f107 0120 	add.w	r1, r7, #32
 8002a4e:	f107 0010 	add.w	r0, r7, #16
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f000 fbfe 	bl	8003256 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIddEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8002a5a:	f107 0310 	add.w	r3, r7, #16
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fc13 	bl	800328a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIddEELi0EEELi1ELi2EE3runERS9_>
}
 8002a64:	f107 0320 	add.w	r3, r7, #32
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fa60 	bl	8001f2e <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8002a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fa5b 	bl	8001f2e <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8002a78:	3728      	adds	r7, #40	@ 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <_ZNK5Eigen9DenseBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff fa33 	bl	8001ef2 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 8002a8c:	4603      	mov	r3, r0
    }
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_ZN5Eigen8internal11blas_traitsINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7extractERKS3_>:
  static inline EIGEN_DEVICE_FUNC ExtractType extract(const XprType& x) { return x; }
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fbf2 	bl	80032a0 <_ZNK5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4dataEv>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>:
    EIGEN_STRONG_INLINE const Scalar& coeff(Index rowId, Index colId) const
 8002ac6:	b590      	push	{r4, r7, lr}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fbe3 	bl	80032a0 <_ZNK5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4dataEv>
 8002ada:	4604      	mov	r4, r0
 8002adc:	f7ff fa75 	bl	8001fca <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4rowsEv>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	fb03 f202 	mul.w	r2, r3, r2
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4423      	add	r3, r4
    }
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}

08002af8 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    typedef typename internal::remove_all<XprType>::type NestedExpression;

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fbd3 	bl	80032b6 <_ZN5Eigen9BlockImplIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
    {
      eigen_assert( (i>=0) && (
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	db07      	blt.n	8002b26 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff f805 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4293      	cmp	r3, r2
 8002b24:	db05      	blt.n	8002b32 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 8002b26:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 8002b28:	4a05      	ldr	r2, [pc, #20]	@ (8002b40 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 8002b2a:	2178      	movs	r1, #120	@ 0x78
 8002b2c:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 8002b2e:	f00b fbfb 	bl	800e328 <__assert_func>
          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    }
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	0801012c 	.word	0x0801012c
 8002b40:	080101d4 	.word	0x080101d4
 8002b44:	080102b0 	.word	0x080102b0

08002b48 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_ZN5Eigen8internal17scalar_product_opIddEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fbab 	bl	80032d8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ffed 	bl	8002b74 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8002ba4:	b5b0      	push	{r4, r5, r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff ffea 	bl	8002b8c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1d1a      	adds	r2, r3, #4
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4614      	mov	r4, r2
 8002bc6:	461d      	mov	r5, r3
 8002bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bd0:	e884 0003 	stmia.w	r4, {r0, r1}
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	331c      	adds	r3, #28
 8002bd8:	6839      	ldr	r1, [r7, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 f82a 	bl	8002c34 <_ZN5Eigen8internal17scalar_product_opIddEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff f8ed 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8002be8:	4604      	mov	r4, r0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fb7e 	bl	80032ee <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	429c      	cmp	r4, r3
 8002bf6:	d10b      	bne.n	8002c10 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS6_RSB_RKS3_+0x6c>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff f8d6 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8002c00:	4604      	mov	r4, r0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fb7d 	bl	8003304 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	429c      	cmp	r4, r3
 8002c0e:	d005      	beq.n	8002c1c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS6_RSB_RKS3_+0x78>
 8002c10:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS6_RSB_RKS3_+0x84>)
 8002c12:	4a06      	ldr	r2, [pc, #24]	@ (8002c2c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS6_RSB_RKS3_+0x88>)
 8002c14:	2174      	movs	r1, #116	@ 0x74
 8002c16:	4806      	ldr	r0, [pc, #24]	@ (8002c30 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS6_RSB_RKS3_+0x8c>)
 8002c18:	f00b fb86 	bl	800e328 <__assert_func>
    }
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bdb0      	pop	{r4, r5, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	08010308 	.word	0x08010308
 8002c2c:	08010344 	.word	0x08010344
 8002c30:	080104cc 	.word	0x080104cc

08002c34 <_ZN5Eigen8internal17scalar_product_opIddEC1ERKS2_>:
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_ZN5Eigen8internal13scalar_sum_opIddEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff f953 	bl	8001f2e <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IdLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fb77 	bl	800338e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ffec 	bl	8002c92 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ffeb 	bl	8002caa <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ffeb 	bl	8002cc4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddE4DataD1Ev>:
  struct Data
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3308      	adds	r3, #8
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ffea 	bl	8002cde <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ffb2 	bl	8002c78 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ffe5 	bl	8002cf8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddE4DataD1Ev>
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fb22 	bl	8003378 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ffe8 	bl	8002d1e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddED1Ev>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ffeb 	bl	8002d3e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8002d74:	b580      	push	{r7, lr}
 8002d76:	ed2d 8b02 	vpush	{d8}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fac9 	bl	800331a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	dd05      	ble.n	8002d9a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_+0x26>
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fad3 	bl	800333a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	dc06      	bgt.n	8002da8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_+0x34>
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_+0x80>)
 8002d9c:	4a16      	ldr	r2, [pc, #88]	@ (8002df8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_+0x84>)
 8002d9e:	f240 119b 	movw	r1, #411	@ 0x19b
 8002da2:	4816      	ldr	r0, [pc, #88]	@ (8002dfc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_+0x88>)
 8002da4:	f00b fac0 	bl	800e328 <__assert_func>
  ThisEvaluator thisEval(derived());
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff4f 	bl	8002c4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8002dae:	4602      	mov	r2, r0
 8002db0:	f107 0308 	add.w	r3, r7, #8
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 facf 	bl	800335a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff45 	bl	8002c4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f107 0308 	add.w	r3, r7, #8
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 faea 	bl	80033a4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISG_EEdRKSH_RKS3_RKT_>
 8002dd0:	eeb0 8b40 	vmov.f64	d8, d0
 8002dd4:	bf00      	nop
}
 8002dd6:	f107 0308 	add.w	r3, r7, #8
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ffbc 	bl	8002d58 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8002de0:	eeb0 7b48 	vmov.f64	d7, d8
}
 8002de4:	eeb0 0b47 	vmov.f64	d0, d7
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	ecbd 8b02 	vpop	{d8}
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	0801052c 	.word	0x0801052c
 8002df8:	08010570 	.word	0x08010570
 8002dfc:	08010704 	.word	0x08010704

08002e00 <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi0ELi1EEENT_6ScalarERKS4_>:
inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)
 8002e00:	b580      	push	{r7, lr}
 8002e02:	ed2d 8b04 	vpush	{d8-d9}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return m.coeff(i1, j1) * m.coeff(i2, j2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	2101      	movs	r1, #1
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fe57 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	ed93 8b00 	vldr	d8, [r3]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2102      	movs	r1, #2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fe4e 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	ed93 7b00 	vldr	d7, [r3]
 8002e30:	ee28 8b07 	vmul.f64	d8, d8, d7
       - m.coeff(i1, j2) * m.coeff(i2, j1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fe43 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002e40:	4603      	mov	r3, r0
 8002e42:	ed93 9b00 	vldr	d9, [r3]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fe3a 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002e52:	4603      	mov	r3, r0
 8002e54:	ed93 7b00 	vldr	d7, [r3]
 8002e58:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002e5c:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 8002e60:	eeb0 0b47 	vmov.f64	d0, d7
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	ecbd 8b04 	vpop	{d8-d9}
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi1EEENT_6ScalarERKS4_>:
inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	ed2d 8b04 	vpush	{d8-d9}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  return m.coeff(i1, j1) * m.coeff(i2, j2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	2102      	movs	r1, #2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fe20 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002e86:	4603      	mov	r3, r0
 8002e88:	ed93 8b00 	vldr	d8, [r3]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fe17 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	ed93 7b00 	vldr	d7, [r3]
 8002e9e:	ee28 8b07 	vmul.f64	d8, d8, d7
       - m.coeff(i1, j2) * m.coeff(i2, j1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fe0c 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	ed93 9b00 	vldr	d9, [r3]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fe03 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	ed93 7b00 	vldr	d7, [r3]
 8002ec6:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002eca:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 8002ece:	eeb0 0b47 	vmov.f64	d0, d7
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	ecbd 8b04 	vpop	{d8-d9}
 8002eda:	bd80      	pop	{r7, pc}

08002edc <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi0ELi2EEENT_6ScalarERKS4_>:
inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)
 8002edc:	b580      	push	{r7, lr}
 8002ede:	ed2d 8b04 	vpush	{d8-d9}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return m.coeff(i1, j1) * m.coeff(i2, j2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fde9 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	ed93 8b00 	vldr	d8, [r3]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	2102      	movs	r1, #2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fde0 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002f06:	4603      	mov	r3, r0
 8002f08:	ed93 7b00 	vldr	d7, [r3]
 8002f0c:	ee28 8b07 	vmul.f64	d8, d8, d7
       - m.coeff(i1, j2) * m.coeff(i2, j1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fdd5 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	ed93 9b00 	vldr	d9, [r3]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	2102      	movs	r1, #2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fdcc 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	ed93 7b00 	vldr	d7, [r3]
 8002f34:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002f38:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 8002f3c:	eeb0 0b47 	vmov.f64	d0, d7
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	ecbd 8b04 	vpop	{d8-d9}
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi2ELi1EEENT_6ScalarERKS4_>:
inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	ed2d 8b04 	vpush	{d8-d9}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  return m.coeff(i1, j1) * m.coeff(i2, j2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fdb2 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002f62:	4603      	mov	r3, r0
 8002f64:	ed93 8b00 	vldr	d8, [r3]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fda9 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002f74:	4603      	mov	r3, r0
 8002f76:	ed93 7b00 	vldr	d7, [r3]
 8002f7a:	ee28 8b07 	vmul.f64	d8, d8, d7
       - m.coeff(i1, j2) * m.coeff(i2, j1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fd9e 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	ed93 9b00 	vldr	d9, [r3]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fd95 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	ed93 7b00 	vldr	d7, [r3]
 8002fa2:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002fa6:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 8002faa:	eeb0 0b47 	vmov.f64	d0, d7
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	ecbd 8b04 	vpop	{d8-d9}
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi2EEENT_6ScalarERKS4_>:
inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	ed2d 8b04 	vpush	{d8-d9}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  return m.coeff(i1, j1) * m.coeff(i2, j2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2102      	movs	r1, #2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fd7b 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	ed93 8b00 	vldr	d8, [r3]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fd72 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	ed93 7b00 	vldr	d7, [r3]
 8002fe8:	ee28 8b07 	vmul.f64	d8, d8, d7
       - m.coeff(i1, j2) * m.coeff(i2, j1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fd67 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	ed93 9b00 	vldr	d9, [r3]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fd5e 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 800300a:	4603      	mov	r3, r0
 800300c:	ed93 7b00 	vldr	d7, [r3]
 8003010:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003014:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 8003018:	eeb0 0b47 	vmov.f64	d0, d7
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	ecbd 8b04 	vpop	{d8-d9}
 8003024:	bd80      	pop	{r7, pc}

08003026 <_ZN5Eigen8internal12cofactor_3x3INS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi2ELi2EEENT_6ScalarERKS4_>:
inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)
 8003026:	b580      	push	{r7, lr}
 8003028:	ed2d 8b04 	vpush	{d8-d9}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  return m.coeff(i1, j1) * m.coeff(i2, j2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fd44 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 800303e:	4603      	mov	r3, r0
 8003040:	ed93 8b00 	vldr	d8, [r3]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	2101      	movs	r1, #1
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fd3b 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8003050:	4603      	mov	r3, r0
 8003052:	ed93 7b00 	vldr	d7, [r3]
 8003056:	ee28 8b07 	vmul.f64	d8, d8, d7
       - m.coeff(i1, j2) * m.coeff(i2, j1);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fd30 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8003066:	4603      	mov	r3, r0
 8003068:	ed93 9b00 	vldr	d9, [r3]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	2101      	movs	r1, #1
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fd27 	bl	8002ac6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE5coeffEii>
 8003078:	4603      	mov	r3, r0
 800307a:	ed93 7b00 	vldr	d7, [r3]
 800307e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003082:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 8003086:	eeb0 0b47 	vmov.f64	d0, d7
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	ecbd 8b04 	vpop	{d8-d9}
 8003092:	bd80      	pop	{r7, pc}

08003094 <_ZN5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
///
EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)
/**
  * \sa col(), class Block */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
RowXpr row(Index i)
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
{
  return RowXpr(derived(), i);
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f7ff f90f 	bl	80022c4 <_ZN5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80030a6:	4603      	mov	r3, r0
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4619      	mov	r1, r3
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f98b 	bl	80033c8 <_ZN5Eigen5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS2_i>
}
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f103 0208 	add.w	r2, r3, #8
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	3308      	adds	r3, #8
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f000 fa4f 	bl	8003574 <_ZN5Eigen8internal18scalar_constant_opIdEC1ERKS2_>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEmlIdEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIdNS6_18promote_scalar_argIdT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIdS9_NS7_IdS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 80030e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e2:	b08d      	sub	sp, #52	@ 0x34
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	68b8      	ldr	r0, [r7, #8]
 80030ee:	f7fe fe8c 	bl	8001e0a <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80030f2:	4604      	mov	r4, r0
 80030f4:	68b8      	ldr	r0, [r7, #8]
 80030f6:	f7fe fe88 	bl	8001e0a <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fe60 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003102:	4605      	mov	r5, r0
 8003104:	68b8      	ldr	r0, [r7, #8]
 8003106:	f7fe fe80 	bl	8001e0a <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800310a:	4603      	mov	r3, r0
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fe4d 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003112:	4606      	mov	r6, r0
 8003114:	f107 0320 	add.w	r3, r7, #32
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f97c 	bl	8003418 <_ZN5Eigen8internal18scalar_constant_opIdEC1ERKd>
 8003120:	f107 0320 	add.w	r3, r7, #32
 8003124:	f107 0010 	add.w	r0, r7, #16
 8003128:	4632      	mov	r2, r6
 800312a:	4629      	mov	r1, r5
 800312c:	f000 f992 	bl	8003454 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 8003130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fd12 	bl	8002b5e <_ZN5Eigen8internal17scalar_product_opIddEC1Ev>
 800313a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800313e:	f107 0210 	add.w	r2, r7, #16
 8003142:	4621      	mov	r1, r4
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f9d5 	bl	80034f4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEEC1ERS6_RSB_RKS3_>
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	3734      	adds	r7, #52	@ 0x34
 800314e:	46bd      	mov	sp, r7
 8003150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003152 <_ZN5Eigen10MatrixBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEaSINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS2_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS8_18scalar_constant_opIdEESC_EEEEEERS4_RKNS_9DenseBaseIT_EE>:
}

template<typename Derived>
template <typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::operator=(const DenseBase<OtherDerived>& other)
 8003152:	b590      	push	{r4, r7, lr}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
{
  internal::call_assignment(derived(), other.derived());
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fa1b 	bl	8003598 <_ZN5Eigen9EigenBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 8003162:	4604      	mov	r4, r0
 8003164:	6838      	ldr	r0, [r7, #0]
 8003166:	f000 fa22 	bl	80035ae <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIdEES7_EEEEE7derivedEv>
 800316a:	4603      	mov	r3, r0
 800316c:	4619      	mov	r1, r3
 800316e:	4620      	mov	r0, r4
 8003170:	f000 fa28 	bl	80035c4 <_ZN5Eigen8internal15call_assignmentINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS3_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESA_EEEEEEvRT_RKT0_>
  return derived();
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fa0f 	bl	8003598 <_ZN5Eigen9EigenBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800317a:	4603      	mov	r3, r0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}

08003184 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	6978      	ldr	r0, [r7, #20]
 800319a:	f000 fa28 	bl	80035ee <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fe03 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80031bc:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe fdf3 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80031c6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fdf9 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80031d0:	4602      	mov	r2, r0
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d107      	bne.n	80031e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fde6 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d001      	beq.n	80031ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 80031ec:	2300      	movs	r3, #0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	6979      	ldr	r1, [r7, #20]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fa33 	bl	8003664 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fdde 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003206:	4602      	mov	r2, r0
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	4293      	cmp	r3, r2
 800320c:	d107      	bne.n	800321e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe fdcb 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4293      	cmp	r3, r2
 800321c:	d006      	beq.n	800322c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 800321e:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8003220:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8003222:	f240 21fd 	movw	r1, #765	@ 0x2fd
 8003226:	4805      	ldr	r0, [pc, #20]	@ (800323c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEES3_ddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8003228:	f00b f87e 	bl	800e328 <__assert_func>
}
 800322c:	bf00      	nop
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	0801075c 	.word	0x0801075c
 8003238:	0801078c 	.word	0x0801078c
 800323c:	08010864 	.word	0x08010864

08003240 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIddEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	60da      	str	r2, [r3, #12]
  }
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIddEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fa18 	bl	80036c8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIddEELi0EEELi0ELi3EE3runERS9_>
  }
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_ZNK5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4dataEv>:
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <_ZN5Eigen9BlockImplIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    typedef internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel> Impl;
    typedef typename XprType::StorageIndex StorageIndex;
  public:
    typedef Impl Base;
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fa0c 	bl	80036e6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    }
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	f000 fa2c 	bl	8003752 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80032fa:	4603      	mov	r3, r0
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	f000 fa29 	bl	8003762 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8003310:	4603      	mov	r3, r0
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff fc92 	bl	8002c4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8003328:	4603      	mov	r3, r0
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fa21 	bl	8003772 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 8003330:	4603      	mov	r3, r0
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fc82 	bl	8002c4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8003348:	4603      	mov	r3, r0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fa1f 	bl	800378e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 8003350:	4603      	mov	r3, r0
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6839      	ldr	r1, [r7, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fa1e 	bl	80037aa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSD_>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISG_EEdRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fa08 	bl	80037c8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 80033b8:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80033bc:	eeb0 0b47 	vmov.f64	d0, d7
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <_ZN5Eigen5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS2_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fa18 	bl	8003810 <_ZN5Eigen9BlockImplINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS2_i>
      eigen_assert( (i>=0) && (
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	db07      	blt.n	80033f6 <_ZN5Eigen5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS2_i+0x2e>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe fba8 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4293      	cmp	r3, r2
 80033f4:	db05      	blt.n	8003402 <_ZN5Eigen5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS2_i+0x3a>
 80033f6:	4b05      	ldr	r3, [pc, #20]	@ (800340c <_ZN5Eigen5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS2_i+0x44>)
 80033f8:	4a05      	ldr	r2, [pc, #20]	@ (8003410 <_ZN5Eigen5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS2_i+0x48>)
 80033fa:	2178      	movs	r1, #120	@ 0x78
 80033fc:	4805      	ldr	r0, [pc, #20]	@ (8003414 <_ZN5Eigen5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS2_i+0x4c>)
 80033fe:	f00a ff93 	bl	800e328 <__assert_func>
    }
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	0801012c 	.word	0x0801012c
 8003410:	080108c8 	.word	0x080108c8
 8003414:	080102b0 	.word	0x080102b0

08003418 <_ZN5Eigen8internal18scalar_constant_opIdEC1ERKd>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	e9c1 2300 	strd	r2, r3, [r1]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f9f4 	bl	8003832 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff ffea 	bl	800343c <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 f9eb 	bl	8003848 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3301      	adds	r3, #1
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f9ff 	bl	800387c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3308      	adds	r3, #8
 8003482:	6839      	ldr	r1, [r7, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f875 	bl	8003574 <_ZN5Eigen8internal18scalar_constant_opIdEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db08      	blt.n	80034a2 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d105      	bne.n	80034a2 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	db02      	blt.n	80034a2 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d005      	beq.n	80034ae <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 80034a2:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 80034a4:	4a05      	ldr	r2, [pc, #20]	@ (80034bc <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 80034a6:	2147      	movs	r1, #71	@ 0x47
 80034a8:	4805      	ldr	r0, [pc, #20]	@ (80034c0 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 80034aa:	f00a ff3d 	bl	800e328 <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	080109a0 	.word	0x080109a0
 80034bc:	08010a38 	.word	0x08010a38
 80034c0:	08010b2c 	.word	0x08010b2c

080034c4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIdEES7_EEEEEC1Ev>:
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f9ef 	bl	80038b0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIdEES7_EEEEEC1Ev>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ffed 	bl	80034c4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIdEES7_EEEEEC1Ev>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7ff ffea 	bl	80034dc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EENS_5DenseEEC1Ev>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3308      	adds	r3, #8
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fdd0 	bl	80030ba <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3318      	adds	r3, #24
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fb87 	bl	8002c34 <_ZN5Eigen8internal17scalar_product_opIddEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fc4a 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800352e:	4604      	mov	r4, r0
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9c8 	bl	80038c6 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003536:	4603      	mov	r3, r0
 8003538:	429c      	cmp	r4, r3
 800353a:	d10a      	bne.n	8003552 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe fc34 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003544:	4604      	mov	r4, r0
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f9c8 	bl	80038dc <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800354c:	4603      	mov	r3, r0
 800354e:	429c      	cmp	r4, r3
 8003550:	d005      	beq.n	800355e <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 8003552:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 8003554:	4a05      	ldr	r2, [pc, #20]	@ (800356c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 8003556:	2174      	movs	r1, #116	@ 0x74
 8003558:	4805      	ldr	r0, [pc, #20]	@ (8003570 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 800355a:	f00a fee5 	bl	800e328 <__assert_func>
    }
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	bd90      	pop	{r4, r7, pc}
 8003568:	08010308 	.word	0x08010308
 800356c:	08010b8c 	.word	0x08010b8c
 8003570:	080104cc 	.word	0x080104cc

08003574 <_ZN5Eigen8internal18scalar_constant_opIdEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	e9c1 2300 	strd	r2, r3, [r1]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <_ZN5Eigen9EigenBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIdEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_ZN5Eigen8internal15call_assignmentINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS3_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESA_EEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80035ce:	f107 030c 	add.w	r3, r7, #12
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fe81 	bl	80022da <_ZN5Eigen8internal9assign_opIddEC1Ev>
 80035d8:	f107 020c 	add.w	r2, r7, #12
 80035dc:	2300      	movs	r3, #0
 80035de:	6839      	ldr	r1, [r7, #0]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f986 	bl	80038f2 <_ZN5Eigen8internal15call_assignmentINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS3_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESA_EEEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISL_NS0_16evaluator_traitsISL_E5ShapeEEE5valueEPvE4typeE>
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80035ee:	b590      	push	{r4, r7, lr}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 80035fa:	68b8      	ldr	r0, [r7, #8]
 80035fc:	f000 f989 	bl	8003912 <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8003600:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8003602:	68b8      	ldr	r0, [r7, #8]
 8003604:	f000 f993 	bl	800392e <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8003608:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fe fbd8 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003612:	4602      	mov	r2, r0
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4293      	cmp	r3, r2
 8003618:	d107      	bne.n	800362a <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe fbc5 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4293      	cmp	r3, r2
 8003628:	d001      	beq.n	800362e <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	6979      	ldr	r1, [r7, #20]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f812 	bl	8003664 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8003640:	68b8      	ldr	r0, [r7, #8]
 8003642:	f000 f982 	bl	800394a <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 8003646:	4604      	mov	r4, r0
 8003648:	68b8      	ldr	r0, [r7, #8]
 800364a:	f000 f98a 	bl	8003962 <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	4621      	mov	r1, r4
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f990 	bl	800397a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd90      	pop	{r4, r7, pc}
	...

08003664 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d108      	bne.n	8003688 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d105      	bne.n	8003688 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	db02      	blt.n	8003688 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	da06      	bge.n	8003696 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 8003688:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 800368a:	4a0d      	ldr	r2, [pc, #52]	@ (80036c0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 800368c:	f240 1111 	movw	r1, #273	@ 0x111
 8003690:	480c      	ldr	r0, [pc, #48]	@ (80036c4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 8003692:	f00a fe49 	bl	800e328 <__assert_func>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	613b      	str	r3, [r7, #16]
  }
 800369e:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	fb02 f103 	mul.w	r1, r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	f000 f982 	bl	80039b6 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	0800fbe0 	.word	0x0800fbe0
 80036c0:	08010d68 	.word	0x08010d68
 80036c4:	0800fdfc 	.word	0x0800fdfc

080036c8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIddEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80036d0:	2100      	movs	r1, #0
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f97c 	bl	80039d0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIddEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f997 	bl	8003a0c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIddEELi0EEELi1ELi3EE3runERS9_>
  }
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 80036e6:	b5b0      	push	{r4, r5, r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80036f2:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f9d8 	bl	8002aac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 80036fc:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 80036fe:	68b8      	ldr	r0, [r7, #8]
 8003700:	f000 f99e 	bl	8003a40 <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8003704:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	00db      	lsls	r3, r3, #3
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800370e:	441d      	add	r5, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fa13 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8003718:	4602      	mov	r2, r0
 800371a:	2301      	movs	r3, #1
 800371c:	4629      	mov	r1, r5
 800371e:	4620      	mov	r0, r4
 8003720:	f000 f9a6 	bl	8003a70 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKdii>
        m_xpr(xpr),
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	609a      	str	r2, [r3, #8]
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	330c      	adds	r3, #12
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f9db 	bl	8003aec <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3310      	adds	r3, #16
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f9d5 	bl	8003aec <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f9e1 	bl	8003b0a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bdb0      	pop	{r4, r5, r7, pc}

08003752 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0
 8003756:	2303      	movs	r3, #3
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
 8003766:	2301      	movs	r3, #1
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fb1f 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003784:	4603      	mov	r3, r0
    }
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fb06 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80037a0:	4603      	mov	r3, r0
    }
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f9b6 	bl	8003b2a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddEC1ERKSD_>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f9ba 	bl	8003b4e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 80037da:	eeb0 7b40 	vmov.f64	d7, d0
 80037de:	ed87 7b02 	vstr	d7, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80037e2:	6839      	ldr	r1, [r7, #0]
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f9c3 	bl	8003b70 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 80037ea:	eeb0 7b40 	vmov.f64	d7, d0
 80037ee:	ed87 7b04 	vstr	d7, [r7, #16]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80037f2:	f107 0210 	add.w	r2, r7, #16
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4619      	mov	r1, r3
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	f000 f9db 	bl	8003bb8 <_ZNK5Eigen8internal13scalar_sum_opIddEclERKdS4_>
 8003802:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003806:	eeb0 0b47 	vmov.f64	d0, d7
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <_ZN5Eigen9BlockImplINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS2_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f9dd 	bl	8003be2 <_ZN5Eigen8internal15BlockImpl_denseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS3_i>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
    }
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d005      	beq.n	8003864 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 800385a:	4a06      	ldr	r2, [pc, #24]	@ (8003874 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 800385c:	2185      	movs	r1, #133	@ 0x85
 800385e:	4806      	ldr	r0, [pc, #24]	@ (8003878 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 8003860:	f00a fd62 	bl	800e328 <__assert_func>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	08010df4 	.word	0x08010df4
 8003874:	08010e04 	.word	0x08010e04
 8003878:	08010e6c 	.word	0x08010e6c

0800387c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d005      	beq.n	8003898 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 800388e:	4a06      	ldr	r2, [pc, #24]	@ (80038a8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 8003890:	2185      	movs	r1, #133	@ 0x85
 8003892:	4806      	ldr	r0, [pc, #24]	@ (80038ac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8003894:	f00a fd48 	bl	800e328 <__assert_func>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	08010df4 	.word	0x08010df4
 80038a8:	08010ecc 	.word	0x08010ecc
 80038ac:	08010e6c 	.word	0x08010e6c

080038b0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIdEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    }
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	f7ff ff40 	bl	8003752 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	f7ff ff3d 	bl	8003762 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_ZN5Eigen8internal15call_assignmentINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS3_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESA_EEEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISL_NS0_16evaluator_traitsISL_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	603b      	str	r3, [r7, #0]
  call_assignment_no_alias(dst, src, func);
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f9a2 	bl	8003c4e <_ZN5Eigen8internal24call_assignment_no_aliasINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS3_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESA_EEEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe f90d 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8003924:	4603      	mov	r3, r0
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fa36 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003940:	4603      	mov	r3, r0
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800397a:	b580      	push	{r7, lr}
 800397c:	b088      	sub	sp, #32
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8003986:	f107 0314 	add.w	r3, r7, #20
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f974 	bl	8003c7c <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IdLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8003994:	f107 031c 	add.w	r3, r7, #28
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fc9e 	bl	80022da <_ZN5Eigen8internal9assign_opIddEC1Ev>
 800399e:	f107 021c 	add.w	r2, r7, #28
 80039a2:	f107 0314 	add.w	r3, r7, #20
 80039a6:	4619      	mov	r1, r3
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f97e 	bl	8003caa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>
  }
 80039ae:	bf00      	nop
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <_ZN5Eigen12DenseStorageIdLi3ELi3ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIddEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80039d0:	b5b0      	push	{r4, r5, r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689c      	ldr	r4, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6839      	ldr	r1, [r7, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fc1f 	bl	8002228 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 80039ea:	4605      	mov	r5, r0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f96a 	bl	8003ccc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	4629      	mov	r1, r5
 80039fe:	4620      	mov	r0, r4
 8003a00:	f000 f974 	bl	8003cec <_ZNK5Eigen8internal9assign_opIddE11assignCoeffERdRKd>
  }
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bdb0      	pop	{r4, r5, r7, pc}

08003a0c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIddEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8003a14:	2101      	movs	r1, #1
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff ffda 	bl	80039d0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIddEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f977 	bl	8003d10 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIddEELi0EEELi2ELi3EE3runERS9_>
  }
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	2301      	movs	r3, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f970 	bl	8003d2e <_ZNK5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f970 	bl	8003d46 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKdii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7ff ffea 	bl	8003a58 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fed9 	bl	8003848 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3305      	adds	r3, #5
 8003a9a:	6839      	ldr	r1, [r7, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff feed 	bl	800387c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d011      	beq.n	8003acc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x5c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	db08      	blt.n	8003ac0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x50>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d105      	bne.n	8003ac0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x50>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	db02      	blt.n	8003ac0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x50>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d005      	beq.n	8003acc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x5c>
 8003ac0:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x70>)
 8003ac2:	4a08      	ldr	r2, [pc, #32]	@ (8003ae4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x74>)
 8003ac4:	21b0      	movs	r1, #176	@ 0xb0
 8003ac6:	4808      	ldr	r0, [pc, #32]	@ (8003ae8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x78>)
 8003ac8:	f00a fc2e 	bl	800e328 <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 8003acc:	2100      	movs	r1, #0
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f944 	bl	8003d5c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	08010f34 	.word	0x08010f34
 8003ae4:	08010fe0 	.word	0x08010fe0
 8003ae8:	080110ac 	.word	0x080110ac

08003aec <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff ff92 	bl	8003a40 <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8003b1c:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	615a      	str	r2, [r3, #20]
                    : m_xpr.innerStride();
    }
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f91c 	bl	8003d72 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6839      	ldr	r1, [r7, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f922 	bl	8003d88 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddE4DataC1ERKSD_>
  }
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f93b 	bl	8003dd8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8003b62:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003b66:	eeb0 0b47 	vmov.f64	d0, d7
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8003b7a:	6839      	ldr	r1, [r7, #0]
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f93e 	bl	8003dfe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 8003b82:	eeb0 7b40 	vmov.f64	d7, d0
 8003b86:	ed87 7b02 	vstr	d7, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8003b8a:	6839      	ldr	r1, [r7, #0]
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f947 	bl	8003e20 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 8003b92:	eeb0 7b40 	vmov.f64	d7, d0
 8003b96:	ed87 7b04 	vstr	d7, [r7, #16]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8003b9a:	f107 0210 	add.w	r2, r7, #16
 8003b9e:	f107 0308 	add.w	r3, r7, #8
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6838      	ldr	r0, [r7, #0]
 8003ba6:	f000 f807 	bl	8003bb8 <_ZNK5Eigen8internal13scalar_sum_opIddEclERKdS4_>
 8003baa:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003bae:	eeb0 0b47 	vmov.f64	d0, d7
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_ZNK5Eigen8internal13scalar_sum_opIddEclERKdS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	ed93 6b00 	vldr	d6, [r3]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	ed93 7b00 	vldr	d7, [r3]
 8003bd0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003bd4:	eeb0 0b47 	vmov.f64	d0, d7
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <_ZN5Eigen8internal15BlockImpl_denseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS3_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8003be2:	b5b0      	push	{r4, r5, r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8003bee:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f925 	bl	8003e42 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8003bf8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8003bfa:	68b8      	ldr	r0, [r7, #8]
 8003bfc:	f7ff ff15 	bl	8003a2a <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8003c00:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	00db      	lsls	r3, r3, #3
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8003c0a:	441d      	add	r5, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd ff8a 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2201      	movs	r2, #1
 8003c18:	4629      	mov	r1, r5
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f000 f91e 	bl	8003e5c <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi1EEC1EPdii>
        m_xpr(xpr),
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	609a      	str	r2, [r3, #8]
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff ff5d 	bl	8003aec <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3310      	adds	r3, #16
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff57 	bl	8003aec <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f91e 	bl	8003e80 <_ZN5Eigen8internal15BlockImpl_denseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bdb0      	pop	{r4, r5, r7, pc}

08003c4e <_ZN5Eigen8internal24call_assignment_no_aliasINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS3_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESA_EEEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b08a      	sub	sp, #40	@ 0x28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8003c5a:	f107 0310 	add.w	r3, r7, #16
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f935 	bl	8003ed0 <_ZN5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS4_>
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8003c66:	f107 0310 	add.w	r3, r7, #16
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f945 	bl	8003efe <_ZN5Eigen8internal10AssignmentINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS7_RKSI_RKSK_>
}
 8003c74:	bf00      	nop
 8003c76:	3728      	adds	r7, #40	@ 0x28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <_ZNK5Eigen10MatrixBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IdLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8003c88:	68b8      	ldr	r0, [r7, #8]
 8003c8a:	f7fd ff9c 	bl	8001bc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003c8e:	4604      	mov	r4, r0
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7fe f8ba 	bl	8001e0a <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f965 	bl	8003f6c <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd90      	pop	{r4, r7, pc}

08003caa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b086      	sub	sp, #24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	6978      	ldr	r0, [r7, #20]
 8003cc0:	f000 f980 	bl	8003fc4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8003cc4:	bf00      	nop
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
  }
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <_ZNK5Eigen8internal9assign_opIddE11assignCoeffERdRKd>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	e9c1 2300 	strd	r2, r3, [r1]
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIddEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8003d18:	2102      	movs	r1, #2
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fe58 	bl	80039d0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIddEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f962 	bl	8003fea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIddEELi0EEELi3ELi3EE3runERS9_>
  }
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_ZNK5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd ff25 	bl	8001b86 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8003d3c:	4603      	mov	r3, r0
    }
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
    }
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
    {}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
 8003d92:	687c      	ldr	r4, [r7, #4]
 8003d94:	6838      	ldr	r0, [r7, #0]
 8003d96:	f000 f932 	bl	8003ffe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7fe ff48 	bl	8002c34 <_ZN5Eigen8internal17scalar_product_opIddEC1ERKS2_>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	1d1c      	adds	r4, r3, #4
 8003da8:	6838      	ldr	r0, [r7, #0]
 8003daa:	f000 f934 	bl	8004016 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 8003dae:	4603      	mov	r3, r0
 8003db0:	4619      	mov	r1, r3
 8003db2:	4620      	mov	r0, r4
 8003db4:	f000 f947 	bl	8004046 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f103 0408 	add.w	r4, r3, #8
 8003dbe:	6838      	ldr	r0, [r7, #0]
 8003dc0:	f000 f935 	bl	800402e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f000 f94b 	bl	8004064 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}

08003dd8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f949 	bl	8004082 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddE5coeffEii>
 8003df0:	eeb0 7b40 	vmov.f64	d7, d0
 8003df4:	eeb0 0b47 	vmov.f64	d0, d7
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8003e08:	2201      	movs	r2, #1
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ffe3 	bl	8003dd8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8003e12:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003e16:	eeb0 0b47 	vmov.f64	d0, d7
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS8_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ffd2 	bl	8003dd8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8003e34:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003e38:	eeb0 0b47 	vmov.f64	d0, d7
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar *data()
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe f8c4 	bl	8001fda <_ZN5Eigen12DenseStorageIdLi9ELi3ELi3ELi0EE4dataEv>
 8003e52:	4603      	mov	r3, r0
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi1EEC1EPdii>:
                (this->m_data + index * innerStride(), val);
    }

    EIGEN_DEVICE_FUNC explicit inline MapBase(PointerType dataPtr) : Base(dataPtr) {}
    EIGEN_DEVICE_FUNC inline MapBase(PointerType dataPtr, Index vecSize) : Base(dataPtr, vecSize) {}
    EIGEN_DEVICE_FUNC inline MapBase(PointerType dataPtr, Index rows, Index cols) : Base(dataPtr, rows, cols) {}
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	f000 f93f 	bl	80040f4 <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPdii>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_ZN5Eigen8internal15BlockImpl_denseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    void init()
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fdcc 	bl	8003a2a <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8003e92:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	615a      	str	r2, [r3, #20]
    }
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f961 	bl	8004170 <_ZN5Eigen9DenseBaseINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_ZN5Eigen13TransposeImplINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ffed 	bl	8003ea0 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_ZN5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS4_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8003ed0:	b5b0      	push	{r4, r5, r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ffec 	bl	8003eb8 <_ZN5Eigen13TransposeImplINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003eec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ef0:	e884 0003 	stmia.w	r4, {r0, r1}
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bdb0      	pop	{r4, r5, r7, pc}

08003efe <_ZN5Eigen8internal10AssignmentINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS7_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f93a 	bl	8004186 <_ZN5Eigen8internal18check_for_aliasingINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f9cc 	bl	80042b4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>
  }
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f9f8 	bl	8004322 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ffed 	bl	8003f24 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZN5Eigen11ProductImplINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ffed 	bl	8003f3c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7ff ffeb 	bl	8003f54 <_ZN5Eigen11ProductImplINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fd fdcb 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8003f92:	4604      	mov	r4, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd ff13 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	429c      	cmp	r4, r3
 8003fa0:	d005      	beq.n	8003fae <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 8003fa2:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x4c>)
 8003fa4:	4a05      	ldr	r2, [pc, #20]	@ (8003fbc <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 8003fa6:	2160      	movs	r1, #96	@ 0x60
 8003fa8:	4805      	ldr	r0, [pc, #20]	@ (8003fc0 <_ZN5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 8003faa:	f00a f9bd 	bl	800e328 <__assert_func>
    }
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd90      	pop	{r4, r7, pc}
 8003fb8:	0800fa10 	.word	0x0800fa10
 8003fbc:	08011108 	.word	0x08011108
 8003fc0:	0800fb84 	.word	0x0800fb84

08003fc4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIddEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f9b0 	bl	8004338 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f9f2 	bl	80043c6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>
  }
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIddEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	331c      	adds	r3, #28
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS4_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe f8cc 	bl	80021f2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f9de 	bl	8004434 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8004082:	b5b0      	push	{r4, r5, r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f9de 	bl	8004452 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddE4Data4funcEv>
 8004096:	4604      	mov	r4, r0
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3304      	adds	r3, #4
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f9e1 	bl	8004468 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 80040a6:	4605      	mov	r5, r0
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3308      	adds	r3, #8
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 f9f1 	bl	8004498 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IdLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80040b6:	eeb0 7b40 	vmov.f64	d7, d0
 80040ba:	ed87 7b04 	vstr	d7, [r7, #16]
 80040be:	f107 0310 	add.w	r3, r7, #16
 80040c2:	461a      	mov	r2, r3
 80040c4:	4629      	mov	r1, r5
 80040c6:	4620      	mov	r0, r4
 80040c8:	f000 fa08 	bl	80044dc <_ZNK5Eigen8internal17scalar_product_opIddEclERKdS4_>
 80040cc:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80040d0:	eeb0 0b47 	vmov.f64	d0, d7
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bdb0      	pop	{r4, r5, r7, pc}

080040da <_ZN5Eigen10MatrixBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fa0f 	bl	8004506 <_ZN5Eigen9DenseBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPdii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff ffe9 	bl	80040da <_ZN5Eigen10MatrixBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3304      	adds	r3, #4
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fbb1 	bl	800387c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3305      	adds	r3, #5
 800411e:	6839      	ldr	r1, [r7, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fb91 	bl	8003848 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d011      	beq.n	8004150 <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPdii+0x5c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	db08      	blt.n	8004144 <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPdii+0x50>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPdii+0x50>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	db02      	blt.n	8004144 <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPdii+0x50>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d005      	beq.n	8004150 <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPdii+0x5c>
 8004144:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPdii+0x70>)
 8004146:	4a08      	ldr	r2, [pc, #32]	@ (8004168 <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPdii+0x74>)
 8004148:	21b0      	movs	r1, #176	@ 0xb0
 800414a:	4808      	ldr	r0, [pc, #32]	@ (800416c <_ZN5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPdii+0x78>)
 800414c:	f00a f8ec 	bl	800e328 <__assert_func>
      checkSanity<Derived>();
 8004150:	2100      	movs	r1, #0
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f9e2 	bl	800451c <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS4_EEvNS_8internal9enable_ifIXeqsrNS7_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	08010f34 	.word	0x08010f34
 8004168:	080111f0 	.word	0x080111f0
 800416c:	080110ac 	.word	0x080110ac

08004170 <_ZN5Eigen9DenseBaseINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
    }
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <_ZN5Eigen8internal18check_for_aliasingINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f9f8 	bl	800459a <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ffec 	bl	800419c <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddE4DataD1Ev>:
  struct Data
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3308      	adds	r3, #8
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ffea 	bl	80041b4 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fd47 	bl	8002c78 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff ffe5 	bl	80041ce <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddE4DataD1Ev>
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f9bd 	bl	8004584 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEEED1Ev>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff ffe8 	bl	80041f4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddED1Ev>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa1a 	bl	8004670 <_ZN5Eigen8internal14evaluator_baseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <_ZN5Eigen8internal15block_evaluatorINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff ffec 	bl	800422e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_ZN5Eigen8internal9evaluatorINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ffeb 	bl	8004246 <_ZN5Eigen8internal15block_evaluatorINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ffeb 	bl	8004260 <_ZN5Eigen8internal9evaluatorINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f9e5 	bl	800465a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ffe8 	bl	800427a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdED1Ev>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b092      	sub	sp, #72	@ 0x48
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80042c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f94d 	bl	8004566 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEEEC1ERKSD_>
  resize_if_allowed(dst, src, func);
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f96d 	bl	80045b0 <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80042d6:	f107 0320 	add.w	r3, r7, #32
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f9ad 	bl	800463c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS7_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f9cf 	bl	8004686 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE18const_cast_derivedEv>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80042ee:	f107 0120 	add.w	r1, r7, #32
 80042f2:	f107 0010 	add.w	r0, r7, #16
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f000 f9cf 	bl	800469c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS2_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS5_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESE_EEEEEENS0_9assign_opIddEELi0EEC1ERS9_RKSL_RKSN_RS8_>
  dense_assignment_loop<Kernel>::run(kernel);
 80042fe:	f107 0310 	add.w	r3, r7, #16
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f9e4 	bl	80046d0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS6_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESF_EEEEEENS0_9assign_opIddEELi0EEELi1ELi2EE3runERSP_>
}
 8004308:	f107 0320 	add.w	r3, r7, #32
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ffc4 	bl	800429a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 8004312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff ff7c 	bl	8004214 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEEED1Ev>
 800431c:	3740      	adds	r7, #64	@ 0x40
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS2_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
    }
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9df 	bl	800471a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff ffec 	bl	800434e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ddED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	330c      	adds	r3, #12
 800438c:	4618      	mov	r0, r3
 800438e:	f7fd fdce 	bl	8001f2e <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3308      	adds	r3, #8
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ffe5 	bl	8004366 <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f9b1 	bl	8004704 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ffe2 	bl	8004380 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ddED1Ev>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIddEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b090      	sub	sp, #64	@ 0x40
 80043ca:	af02      	add	r7, sp, #8
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80043d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f984 	bl	80046e6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f9a4 	bl	8004730 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80043e8:	f107 0320 	add.w	r3, r7, #32
 80043ec:	68f9      	ldr	r1, [r7, #12]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd feff 	bl	80021f2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7fe ff23 	bl	8003240 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8004400:	f107 0120 	add.w	r1, r7, #32
 8004404:	f107 0010 	add.w	r0, r7, #16
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f000 f9da 	bl	80047c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IdLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIddEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8004410:	f107 0310 	add.w	r3, r7, #16
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f9ef 	bl	80047f8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IdLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIddEELi0EEELi1ELi2EE3runERSD_>
}
 800441a:	f107 0320 	add.w	r3, r7, #32
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fd85 	bl	8001f2e <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8004424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ffbf 	bl	80043ac <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 800442e:	3738      	adds	r7, #56	@ 0x38
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f9e3 	bl	800480e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_5BlockIKNS5_IdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESE_ddE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681c      	ldr	r4, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f9da 	bl	8004834 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIdLi0EE11outerStrideEv>
 8004480:	4602      	mov	r2, r0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	fb03 f202 	mul.w	r2, r3, r2
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4423      	add	r3, r4
  }
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	bd90      	pop	{r4, r7, pc}

08004498 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IdLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8004498:	b5b0      	push	{r4, r5, r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681c      	ldr	r4, [r3, #0]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f9ce 	bl	800484a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IdLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 80044ae:	4602      	mov	r2, r0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	fb03 f502 	mul.w	r5, r3, r2
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f9d2 	bl	8004860 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IdLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 80044bc:	4602      	mov	r2, r0
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	fb02 f303 	mul.w	r3, r2, r3
 80044c4:	442b      	add	r3, r5
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4423      	add	r3, r4
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	ec43 2b17 	vmov	d7, r2, r3
  }
 80044d2:	eeb0 0b47 	vmov.f64	d0, d7
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bdb0      	pop	{r4, r5, r7, pc}

080044dc <_ZNK5Eigen8internal17scalar_product_opIddEclERKdS4_>:
#else
  scalar_product_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	ed93 6b00 	vldr	d6, [r3]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	ed93 7b00 	vldr	d7, [r3]
 80044f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80044f8:	eeb0 0b47 	vmov.f64	d0, d7
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <_ZN5Eigen9DenseBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
    }
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS4_EEvNS_8internal9enable_ifIXeqsrNS7_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
    {}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <_ZNK5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f99a 	bl	8004876 <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 8004542:	4603      	mov	r3, r0
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <_ZNK5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f998 	bl	800488c <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800455c:	4603      	mov	r3, r0
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6839      	ldr	r1, [r7, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f994 	bl	80048a2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddEC1ERKSD_>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80045bc:	68b8      	ldr	r0, [r7, #8]
 80045be:	f000 f982 	bl	80048c6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEE4rowsEv>
 80045c2:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80045c4:	68b8      	ldr	r0, [r7, #8]
 80045c6:	f000 f98c 	bl	80048e2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEE4colsEv>
 80045ca:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff ffb0 	bl	8004532 <_ZNK5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 80045d2:	4602      	mov	r2, r0
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d106      	bne.n	80045e8 <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x38>
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff ffb6 	bl	800454c <_ZNK5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d001      	beq.n	80045ec <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3e>
 80045ec:	2300      	movs	r3, #0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d004      	beq.n	80045fc <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x4c>
    dst.resize(dstRows, dstCols);
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	6979      	ldr	r1, [r7, #20]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f981 	bl	80048fe <_ZN5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff ff98 	bl	8004532 <_ZNK5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8004602:	4602      	mov	r2, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4293      	cmp	r3, r2
 8004608:	d106      	bne.n	8004618 <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x68>
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff ff9e 	bl	800454c <_ZNK5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4293      	cmp	r3, r2
 8004616:	d006      	beq.n	8004626 <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>)
 800461a:	4a06      	ldr	r2, [pc, #24]	@ (8004634 <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>)
 800461c:	f240 21fd 	movw	r1, #765	@ 0x2fd
 8004620:	4805      	ldr	r0, [pc, #20]	@ (8004638 <_ZN5Eigen8internal17resize_if_allowedINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS4_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESC_EEEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8004622:	f009 fe81 	bl	800e328 <__assert_func>
}
 8004626:	bf00      	nop
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	0801075c 	.word	0x0801075c
 8004634:	080112b0 	.word	0x080112b0
 8004638:	08010864 	.word	0x08010864

0800463c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS7_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6839      	ldr	r1, [r7, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f967 	bl	800491e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdEC1ERKS7_>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <_ZN5Eigen8internal14evaluator_baseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS2_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS5_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESE_EEEEEENS0_9assign_opIddEELi0EEC1ERS9_RKSL_RKSN_RS8_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	60da      	str	r2, [r3, #12]
  }
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS6_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESF_EEEEEENS0_9assign_opIddEELi0EEELi1ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f936 	bl	800494a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS6_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESF_EEEEEENS0_9assign_opIddEELi0EEELi0ELi3EE3runERSP_>
  }
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6839      	ldr	r1, [r7, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f937 	bl	8004968 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ddEC1ERKS6_>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800473c:	68b8      	ldr	r0, [r7, #8]
 800473e:	f000 f948 	bl	80049d2 <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 8004742:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8004744:	68b8      	ldr	r0, [r7, #8]
 8004746:	f000 f952 	bl	80049ee <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 800474a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fd fb37 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004754:	4602      	mov	r2, r0
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	4293      	cmp	r3, r2
 800475a:	d107      	bne.n	800476c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fd fb24 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4293      	cmp	r3, r2
 800476a:	d001      	beq.n	8004770 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8004770:	2300      	movs	r3, #0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	6979      	ldr	r1, [r7, #20]
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe ff71 	bl	8003664 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4618      	mov	r0, r3
 8004786:	f7fd fb1c 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800478a:	4602      	mov	r2, r0
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	4293      	cmp	r3, r2
 8004790:	d107      	bne.n	80047a2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4618      	mov	r0, r3
 8004796:	f7fd fb09 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4293      	cmp	r3, r2
 80047a0:	d006      	beq.n	80047b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80047a2:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80047a4:	4a05      	ldr	r2, [pc, #20]	@ (80047bc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80047a6:	f240 21fd 	movw	r1, #765	@ 0x2fd
 80047aa:	4805      	ldr	r0, [pc, #20]	@ (80047c0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IdLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80047ac:	f009 fdbc 	bl	800e328 <__assert_func>
}
 80047b0:	bf00      	nop
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	0801075c 	.word	0x0801075c
 80047bc:	08011454 	.word	0x08011454
 80047c0:	08010864 	.word	0x08010864

080047c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IdLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIddEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	60da      	str	r2, [r3, #12]
  }
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IdLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIddEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f902 	bl	8004a0a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IdLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIddEELi0EEELi0ELi3EE3runERSD_>
  }
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6839      	ldr	r1, [r7, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f903 	bl	8004a28 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f929 	bl	8004a7c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
  }
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIdLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	2300      	movs	r3, #0
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IdLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8004852:	f7fe ff7e 	bl	8003752 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8004856:	4603      	mov	r3, r0
  }
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IdLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8004868:	f7fe ff7b 	bl	8003762 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800486c:	4603      	mov	r3, r0
  }
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	f7fe ff68 	bl	8003752 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8004882:	4603      	mov	r3, r0
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	f7fe ff65 	bl	8003762 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8004898:	4603      	mov	r3, r0
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f909 	bl	8004ac4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEEEC1Ev>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 f90f 	bl	8004ada <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddE4DataC1ERKSD_>
  }
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd fa75 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80048d8:	4603      	mov	r3, r0
    }
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd fa5c 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80048f4:	4603      	mov	r3, r0
    }
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <_ZN5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE6resizeEii>:
    void resize(Index nrows, Index ncols) {
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
      m_matrix.resize(ncols,nrows);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f90b 	bl	8004b2c <_ZN5Eigen9DenseBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE6resizeEii>
    }
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdEC1ERKS7_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800491e:	b590      	push	{r4, r7, lr}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f930 	bl	8004b8e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800492e:	687c      	ldr	r4, [r7, #4]
 8004930:	6838      	ldr	r0, [r7, #0]
 8004932:	f000 f921 	bl	8004b78 <_ZNK5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 8004936:	4603      	mov	r3, r0
 8004938:	4619      	mov	r1, r3
 800493a:	4620      	mov	r0, r4
 800493c:	f000 f932 	bl	8004ba4 <_ZN5Eigen8internal9evaluatorINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS5_>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	bd90      	pop	{r4, r7, pc}

0800494a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS6_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESF_EEEEEENS0_9assign_opIddEELi0EEELi0ELi3EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8004952:	2100      	movs	r1, #0
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f934 	bl	8004bc2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS2_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS5_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESE_EEEEEENS0_9assign_opIddEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f954 	bl	8004c08 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS6_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESF_EEEEEENS0_9assign_opIddEELi0EEELi1ELi3EE3runERSP_>
  }
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ddEC1ERKS6_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f96f 	bl	8004c56 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8004978:	6838      	ldr	r0, [r7, #0]
 800497a:	f000 f954 	bl	8004c26 <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 800497e:	4602      	mov	r2, r0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8004984:	6838      	ldr	r0, [r7, #0]
 8004986:	f000 f95a 	bl	8004c3e <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 800498a:	4602      	mov	r2, r0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	605a      	str	r2, [r3, #4]
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f103 0208 	add.w	r2, r3, #8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f000 f965 	bl	8004c6c <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f103 020c 	add.w	r2, r3, #12
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f7fd fc1f 	bl	80021f2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
      m_innerDim(xpr.lhs().cols())
 80049b4:	6838      	ldr	r0, [r7, #0]
 80049b6:	f000 f936 	bl	8004c26 <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 80049ba:	4603      	mov	r3, r0
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fd f8b3 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80049c2:	4602      	mov	r2, r0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	611a      	str	r2, [r3, #16]
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fd f8ad 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fd f9d6 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004a00:	4603      	mov	r3, r0
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IdLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIddEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8004a12:	2100      	movs	r1, #0
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f939 	bl	8004c8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IdLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIddEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f959 	bl	8004cd2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IdLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIddEELi0EEELi1ELi3EE3runERSD_>
  }
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IdLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f978 	bl	8004d28 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f81e 	bl	8004a7c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8004a40:	4602      	mov	r2, r0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
      m_innerStride(map.innerStride()),
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	1d1c      	adds	r4, r3, #4
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 f94f 	bl	8004cf0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8004a52:	4603      	mov	r3, r0
 8004a54:	4619      	mov	r1, r3
 8004a56:	4620      	mov	r0, r4
 8004a58:	f7fe ff10 	bl	800387c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      m_outerStride(map.outerStride())
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	1d5c      	adds	r4, r3, #5
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f952 	bl	8004d0c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7fe feeb 	bl	8003848 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd90      	pop	{r4, r7, pc}

08004a7c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8004ada:	b590      	push	{r4, r7, lr}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
 8004ae4:	687c      	ldr	r4, [r7, #4]
 8004ae6:	6838      	ldr	r0, [r7, #0]
 8004ae8:	f000 f929 	bl	8004d3e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEE7functorEv>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4619      	mov	r1, r3
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7fe f89f 	bl	8002c34 <_ZN5Eigen8internal17scalar_product_opIddEC1ERKS2_>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	1d1c      	adds	r4, r3, #4
 8004afa:	6838      	ldr	r0, [r7, #0]
 8004afc:	f7ff ffca 	bl	8004a94 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEE3lhsEv>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4619      	mov	r1, r3
 8004b04:	4620      	mov	r0, r4
 8004b06:	f7ff fa9e 	bl	8004046 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f103 0408 	add.w	r4, r3, #8
 8004b10:	6838      	ldr	r0, [r7, #0]
 8004b12:	f7ff ffcb 	bl	8004aac <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEE3rhsEv>
 8004b16:	4603      	mov	r3, r0
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f000 f91b 	bl	8004d56 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd90      	pop	{r4, r7, pc}
	...

08004b2c <_ZN5Eigen9DenseBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE6resizeEii>:
    void resize(Index rows, Index cols)
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
      eigen_assert(rows == this->rows() && cols == this->cols()
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f91b 	bl	8004d74 <_ZNK5Eigen9EigenBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d106      	bne.n	8004b54 <_ZN5Eigen9DenseBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE6resizeEii+0x28>
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f924 	bl	8004d94 <_ZNK5Eigen9EigenBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d006      	beq.n	8004b62 <_ZN5Eigen9DenseBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE6resizeEii+0x36>
 8004b54:	4b05      	ldr	r3, [pc, #20]	@ (8004b6c <_ZN5Eigen9DenseBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE6resizeEii+0x40>)
 8004b56:	4a06      	ldr	r2, [pc, #24]	@ (8004b70 <_ZN5Eigen9DenseBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE6resizeEii+0x44>)
 8004b58:	f240 1105 	movw	r1, #261	@ 0x105
 8004b5c:	4805      	ldr	r0, [pc, #20]	@ (8004b74 <_ZN5Eigen9DenseBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE6resizeEii+0x48>)
 8004b5e:	f009 fbe3 	bl	800e328 <__assert_func>
    }
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	0801155c 	.word	0x0801155c
 8004b70:	080115c8 	.word	0x080115c8
 8004b74:	08011668 	.word	0x08011668

08004b78 <_ZNK5Eigen9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <_ZN5Eigen8internal9evaluatorINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS5_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6839      	ldr	r1, [r7, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f8fe 	bl	8004db4 <_ZN5Eigen8internal15block_evaluatorINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS3_Li1ELi3ELb0EEE>
  }
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS2_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS5_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESE_EEEEEENS0_9assign_opIddEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8004bc2:	b5b0      	push	{r4, r5, r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689c      	ldr	r4, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f8ff 	bl	8004dda <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdE8coeffRefEi>
 8004bdc:	4605      	mov	r5, r0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 f907 	bl	8004df8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddE5coeffEi>
 8004bea:	eeb0 7b40 	vmov.f64	d7, d0
 8004bee:	ed87 7b02 	vstr	d7, [r7, #8]
 8004bf2:	f107 0308 	add.w	r3, r7, #8
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f7ff f876 	bl	8003cec <_ZNK5Eigen8internal9assign_opIddE11assignCoeffERdRKd>
  }
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bdb0      	pop	{r4, r5, r7, pc}

08004c08 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS6_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESF_EEEEEENS0_9assign_opIddEELi0EEELi1ELi3EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8004c10:	2101      	movs	r1, #1
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff ffd5 	bl	8004bc2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS2_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS5_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESE_EEEEEENS0_9assign_opIddEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f916 	bl	8004e4a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS6_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESF_EEEEEENS0_9assign_opIddEELi0EEELi2ELi3EE3runERSP_>
  }
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <_ZNK5Eigen7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS1_IdLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <_ZN5Eigen8internal9evaluatorINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f8f3 	bl	8004e68 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IdLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIddEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8004c8c:	b5b0      	push	{r4, r5, r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689c      	ldr	r4, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6839      	ldr	r1, [r7, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd fac1 	bl	8002228 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	6839      	ldr	r1, [r7, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f8f5 	bl	8004e9e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ddE5coeffEi>
 8004cb4:	eeb0 7b40 	vmov.f64	d7, d0
 8004cb8:	ed87 7b02 	vstr	d7, [r7, #8]
 8004cbc:	f107 0308 	add.w	r3, r7, #8
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f7ff f811 	bl	8003cec <_ZNK5Eigen8internal9assign_opIddE11assignCoeffERdRKd>
  }
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bdb0      	pop	{r4, r5, r7, pc}

08004cd2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IdLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIddEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8004cda:	2101      	movs	r1, #1
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ffd5 	bl	8004c8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IdLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIddEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f914 	bl	8004f10 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IdLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIddEELi0EEELi2ELi3EE3runERSD_>
  }
 8004ce8:	bf00      	nop
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fe94 	bl	8003a2a <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8004d02:	4603      	mov	r3, r0
    }
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe fe91 	bl	8003a40 <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8004d1e:	4603      	mov	r3, r0
    }
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIdEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3318      	adds	r3, #24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6839      	ldr	r1, [r7, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f8ee 	bl	8004f46 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <_ZNK5Eigen9EigenBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f8f8 	bl	8004f72 <_ZNK5Eigen9EigenBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 8004d82:	4603      	mov	r3, r0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fd81 	bl	800488c <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <_ZNK5Eigen9EigenBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f8e8 	bl	8004f72 <_ZNK5Eigen9EigenBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fd66 	bl	8004876 <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 8004daa:	4603      	mov	r3, r0
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_ZN5Eigen8internal15block_evaluatorINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS3_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f8e0 	bl	8004f88 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEEC1ERKS5_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f8af 	bl	8004f2e <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi1EE4dataEv>
  }
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdE8coeffRefEi>:
  typename XprType::Scalar& coeffRef(Index index)
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
    return m_argImpl.coeffRef(index);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6839      	ldr	r1, [r7, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 f8f7 	bl	8004fdc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEi>
 8004dee:	4603      	mov	r3, r0
  }
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8004df8:	b5b0      	push	{r4, r5, r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f8fc 	bl	8005002 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddE4Data4funcEv>
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	6839      	ldr	r1, [r7, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe ff5a 	bl	8003ccc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 8004e18:	4605      	mov	r5, r0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 f8f9 	bl	8005018 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEdT_>
 8004e26:	eeb0 7b40 	vmov.f64	d7, d0
 8004e2a:	ed87 7b02 	vstr	d7, [r7, #8]
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	461a      	mov	r2, r3
 8004e34:	4629      	mov	r1, r5
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff fb50 	bl	80044dc <_ZNK5Eigen8internal17scalar_product_opIddEclERKdS4_>
 8004e3c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004e40:	eeb0 0b47 	vmov.f64	d0, d7
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bdb0      	pop	{r4, r5, r7, pc}

08004e4a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS6_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESF_EEEEEENS0_9assign_opIddEELi0EEELi2ELi3EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8004e52:	2102      	movs	r1, #2
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff feb4 	bl	8004bc2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS2_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS5_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESE_EEEEEENS0_9assign_opIddEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f8f0 	bl	8005040 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS6_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESF_EEEEEENS0_9assign_opIddEELi0EEELi3ELi3EE3runERSP_>
  }
 8004e60:	bf00      	nop
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8004e68:	b5b0      	push	{r4, r5, r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f8fe 	bl	8005074 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004e78:	687c      	ldr	r4, [r7, #4]
 8004e7a:	6838      	ldr	r0, [r7, #0]
 8004e7c:	f7fd fe16 	bl	8002aac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8004e80:	4605      	mov	r5, r0
 8004e82:	6838      	ldr	r0, [r7, #0]
 8004e84:	f000 f8e6 	bl	8005054 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f000 f8fb 	bl	800508a <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIdLi3EEC1EPKdi>
  }
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bdb0      	pop	{r4, r5, r7, pc}

08004e9e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEENS3_IdLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ddE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b0a4      	sub	sp, #144	@ 0x90
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6819      	ldr	r1, [r3, #0]
 8004eb8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004ebc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f8f4 	bl	80050ae <_ZNK5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8004ec6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004eca:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8004ece:	4611      	mov	r1, r2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 f8ff 	bl	80050d4 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6859      	ldr	r1, [r3, #4]
 8004eda:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004ede:	2200      	movs	r2, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f908 	bl	80050f6 <_ZNK5Eigen9DenseBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 8004ee6:	f107 030c 	add.w	r3, r7, #12
 8004eea:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004eee:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 f912 	bl	800511c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIdNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8004ef8:	f107 030c 	add.w	r3, r7, #12
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f92b 	bl	8005158 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 8004f02:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004f06:	eeb0 0b47 	vmov.f64	d0, d7
 8004f0a:	3790      	adds	r7, #144	@ 0x90
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IdLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIddEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8004f18:	2102      	movs	r1, #2
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff feb6 	bl	8004c8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IdLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIddEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f934 	bl	800518e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IdLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIddEELi0EEELi3ELi3EE3runERSD_>
  }
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi1EE4dataEv>:
    inline const Scalar* data() const { return this->m_data; }
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 8004f46:	b590      	push	{r4, r7, lr}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f932 	bl	80051ba <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004f56:	687c      	ldr	r4, [r7, #4]
 8004f58:	6838      	ldr	r0, [r7, #0]
 8004f5a:	f000 f922 	bl	80051a2 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4619      	mov	r1, r3
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7fe fb06 	bl	8003574 <_ZN5Eigen8internal18scalar_constant_opIdEC1ERKS2_>
  }
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd90      	pop	{r4, r7, pc}

08004f72 <_ZNK5Eigen9EigenBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEEC1ERKS5_>:
  explicit mapbase_evaluator(const XprType& map)
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f938 	bl	8005208 <_ZN5Eigen8internal14evaluator_baseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff ffc7 	bl	8004f2e <_ZNK5Eigen7MapBaseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi1EE4dataEv>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
      m_innerStride(map.innerStride()),
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	1d1c      	adds	r4, r3, #4
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f90f 	bl	80051d0 <_ZNK5Eigen8internal15BlockImpl_denseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f7fe fc46 	bl	8003848 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      m_outerStride(map.outerStride())
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	1d5c      	adds	r4, r3, #5
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f912 	bl	80051ec <_ZNK5Eigen8internal15BlockImpl_denseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f7fe fc55 	bl	800387c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd90      	pop	{r4, r7, pc}

08004fdc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8004fdc:	b590      	push	{r4, r7, lr}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
    return m_data[index * m_innerStride.value()];
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681c      	ldr	r4, [r3, #0]
 8004fea:	f7fe fbb2 	bl	8003752 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4423      	add	r3, r4
  }
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd90      	pop	{r4, r7, pc}

08005002 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES7_EEEENS0_10IndexBasedESE_ddE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEdT_>:
  CoeffReturnType coeff(IndexType index) const
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
    return m_wrapper(m_functor,index);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f103 0008 	add.w	r0, r3, #8
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	2300      	movs	r3, #0
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	f000 f8f6 	bl	800521e <_ZNK5Eigen8internal15nullary_wrapperIdNS0_18scalar_constant_opIdEELb1ELb0ELb0EEclIiEEdRKS3_T_S8_>
 8005032:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8005036:	eeb0 0b47 	vmov.f64	d0, d7
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_9TransposeINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEENS3_INS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS6_IdLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIdEESF_EEEEEENS0_9assign_opIddEELi0EEELi3ELi3EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7fc fdb2 	bl	8001bc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005062:	4603      	mov	r3, r0
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe fceb 	bl	8003a40 <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800506a:	4603      	mov	r3, r0
    }
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIdLi3EEC1EPKdi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 800509c:	1d3b      	adds	r3, r7, #4
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fc fabe 	bl	8001620 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <_ZNK5Eigen9DenseBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 80050ba:	68b8      	ldr	r0, [r7, #8]
 80050bc:	f7fc fd83 	bl	8001bc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80050c0:	4603      	mov	r3, r0
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4619      	mov	r1, r3
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f8ba 	bl	8005240 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 80050de:	6838      	ldr	r0, [r7, #0]
 80050e0:	f000 f8d6 	bl	8005290 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f8f4 	bl	80052d6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <_ZNK5Eigen9DenseBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8005102:	68b8      	ldr	r0, [r7, #8]
 8005104:	f7fc fe81 	bl	8001e0a <_ZNK5Eigen9EigenBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005108:	4603      	mov	r3, r0
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	4619      	mov	r1, r3
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f8f8 	bl	8005304 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIdNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800511c:	b5b0      	push	{r4, r5, r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8005128:	68b8      	ldr	r0, [r7, #8]
 800512a:	f000 f913 	bl	8005354 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800512e:	4604      	mov	r4, r0
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f91a 	bl	800536a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 8005136:	4605      	mov	r5, r0
 8005138:	f107 0314 	add.w	r3, r7, #20
 800513c:	4618      	mov	r0, r3
 800513e:	f7fd fd0e 	bl	8002b5e <_ZN5Eigen8internal17scalar_product_opIddEC1Ev>
 8005142:	f107 0314 	add.w	r3, r7, #20
 8005146:	462a      	mov	r2, r5
 8005148:	4621      	mov	r1, r4
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 f930 	bl	80053b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bdb0      	pop	{r4, r5, r7, pc}

08005158 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f973 	bl	800544c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 8005166:	4604      	mov	r4, r0
 8005168:	f107 030c 	add.w	r3, r7, #12
 800516c:	4618      	mov	r0, r3
 800516e:	f7fd fd78 	bl	8002c62 <_ZN5Eigen8internal13scalar_sum_opIddEC1Ev>
 8005172:	f107 030c 	add.w	r3, r7, #12
 8005176:	4619      	mov	r1, r3
 8005178:	4620      	mov	r0, r4
 800517a:	f000 fa3f 	bl	80055fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_>
 800517e:	eeb0 7b40 	vmov.f64	d7, d0
 8005182:	bf00      	nop
}
 8005184:	eeb0 0b47 	vmov.f64	d0, d7
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bd90      	pop	{r4, r7, pc}

0800518e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IdLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIddEELi0EEELi3ELi3EE3runERSD_>:
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3308      	adds	r3, #8
 80051ae:	4618      	mov	r0, r3
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIdEEKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <_ZNK5Eigen8internal15BlockImpl_denseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe fc2f 	bl	8003a40 <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80051e2:	4603      	mov	r3, r0
    }
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <_ZNK5Eigen8internal15BlockImpl_denseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fe fc16 	bl	8003a2a <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 80051fe:	4603      	mov	r3, r0
    }
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <_ZN5Eigen8internal14evaluator_baseINS_5BlockINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <_ZNK5Eigen8internal15nullary_wrapperIdNS0_18scalar_constant_opIdEELb1ELb0ELb0EEclIiEEdRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	68b8      	ldr	r0, [r7, #8]
 800522e:	f000 fa2b 	bl	8005688 <_ZNK5Eigen8internal18scalar_constant_opIdEclEv>
 8005232:	eeb0 7b40 	vmov.f64	d7, d0
 8005236:	eeb0 0b47 	vmov.f64	d0, d7
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fa28 	bl	80056a8 <_ZN5Eigen9BlockImplIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	db07      	blt.n	800526e <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4618      	mov	r0, r3
 8005262:	f7fc fc6c 	bl	8001b3e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005266:	4602      	mov	r2, r0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4293      	cmp	r3, r2
 800526c:	db05      	blt.n	800527a <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800526e:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x44>)
 8005270:	4a05      	ldr	r2, [pc, #20]	@ (8005288 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 8005272:	2178      	movs	r1, #120	@ 0x78
 8005274:	4805      	ldr	r0, [pc, #20]	@ (800528c <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 8005276:	f009 f857 	bl	800e328 <__assert_func>
    }
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	0801012c 	.word	0x0801012c
 8005288:	080116c4 	.word	0x080116c4
 800528c:	080102b0 	.word	0x080102b0

08005290 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa0b 	bl	80056ca <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff ffed 	bl	80052a6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80052d6:	b5b0      	push	{r4, r5, r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ffec 	bl	80052be <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4614      	mov	r4, r2
 80052ec:	461d      	mov	r5, r3
 80052ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80052f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bdb0      	pop	{r4, r5, r7, pc}

08005304 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f9e2 	bl	80056e0 <_ZN5Eigen9BlockImplIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	db07      	blt.n	8005332 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4618      	mov	r0, r3
 8005326:	f7fc fd41 	bl	8001dac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800532a:	4602      	mov	r2, r0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4293      	cmp	r3, r2
 8005330:	db05      	blt.n	800533e <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 8005332:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 8005334:	4a05      	ldr	r2, [pc, #20]	@ (800534c <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 8005336:	2178      	movs	r1, #120	@ 0x78
 8005338:	4805      	ldr	r0, [pc, #20]	@ (8005350 <_ZN5Eigen5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800533a:	f008 fff5 	bl	800e328 <__assert_func>
    }
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	0801012c 	.word	0x0801012c
 800534c:	080117a4 	.word	0x080117a4
 8005350:	080102b0 	.word	0x080102b0

08005354 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f9ba 	bl	8005702 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff ffed 	bl	8005380 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80053b0:	b5b0      	push	{r4, r5, r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f7ff ffea 	bl	8005398 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4614      	mov	r4, r2
 80053ca:	461d      	mov	r5, r3
 80053cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80053d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f103 0218 	add.w	r2, r3, #24
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4614      	mov	r4, r2
 80053e2:	461d      	mov	r5, r3
 80053e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80053ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3330      	adds	r3, #48	@ 0x30
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fd fc1c 	bl	8002c34 <_ZN5Eigen8internal17scalar_product_opIddEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80053fc:	68b8      	ldr	r0, [r7, #8]
 80053fe:	f000 f98b 	bl	8005718 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8005402:	4604      	mov	r4, r0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f993 	bl	8005732 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800540c:	4603      	mov	r3, r0
 800540e:	429c      	cmp	r4, r3
 8005410:	d10a      	bne.n	8005428 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 8005412:	68b8      	ldr	r0, [r7, #8]
 8005414:	f000 f998 	bl	8005748 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8005418:	4604      	mov	r4, r0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 f9a0 	bl	8005762 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 8005422:	4603      	mov	r3, r0
 8005424:	429c      	cmp	r4, r3
 8005426:	d005      	beq.n	8005434 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 8005428:	4b05      	ldr	r3, [pc, #20]	@ (8005440 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800542a:	4a06      	ldr	r2, [pc, #24]	@ (8005444 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800542c:	2174      	movs	r1, #116	@ 0x74
 800542e:	4806      	ldr	r0, [pc, #24]	@ (8005448 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 8005430:	f008 ff7a 	bl	800e328 <__assert_func>
    }
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bdb0      	pop	{r4, r5, r7, pc}
 800543e:	bf00      	nop
 8005440:	08010308 	.word	0x08010308
 8005444:	08011880 	.word	0x08011880
 8005448:	080104cc 	.word	0x080104cc

0800544c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f9c9 	bl	8005802 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff ffec 	bl	8005462 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff ffeb 	bl	800547a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ffeb 	bl	8005494 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff ffeb 	bl	80054ae <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f987 	bl	80057ec <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ffe8 	bl	80054c8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdED1Ev>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff ffeb 	bl	80054e8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f977 	bl	8005818 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff ffec 	bl	800551c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ffeb 	bl	8005534 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff ffeb 	bl	800554e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddE4DataD1Ev>:
  struct Data
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	330c      	adds	r3, #12
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff ffea 	bl	8005568 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3304      	adds	r3, #4
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff ffb2 	bl	8005502 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff ffe5 	bl	8005582 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddE4DataD1Ev>
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f90c 	bl	80057d6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff ffe8 	bl	80055a8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddED1Ev>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff ffeb 	bl	80055c8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80055fc:	b580      	push	{r7, lr}
 80055fe:	ed2d 8b02 	vpush	{d8}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8b4 	bl	8005778 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	dd05      	ble.n	8005622 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_+0x26>
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8be 	bl	8005798 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	dc06      	bgt.n	8005630 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_+0x34>
 8005622:	4b16      	ldr	r3, [pc, #88]	@ (800567c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_+0x80>)
 8005624:	4a16      	ldr	r2, [pc, #88]	@ (8005680 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_+0x84>)
 8005626:	f240 119b 	movw	r1, #411	@ 0x19b
 800562a:	4816      	ldr	r0, [pc, #88]	@ (8005684 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_+0x88>)
 800562c:	f008 fe7c 	bl	800e328 <__assert_func>
  ThisEvaluator thisEval(derived());
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff ff0b 	bl	800544c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 8005636:	4602      	mov	r2, r0
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f8ba 	bl	80057b8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ff01 	bl	800544c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800564a:	4602      	mov	r2, r0
 800564c:	f107 030c 	add.w	r3, r7, #12
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f8eb 	bl	800582e <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEdRKSM_RKS3_RKT_>
 8005658:	eeb0 8b40 	vmov.f64	d8, d0
 800565c:	bf00      	nop
}
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff ffbd 	bl	80055e2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8005668:	eeb0 7b48 	vmov.f64	d7, d8
}
 800566c:	eeb0 0b47 	vmov.f64	d0, d7
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	ecbd 8b02 	vpop	{d8}
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	0801052c 	.word	0x0801052c
 8005680:	08011a7c 	.word	0x08011a7c
 8005684:	08010704 	.word	0x08010704

08005688 <_ZNK5Eigen8internal18scalar_constant_opIdEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	ec43 2b17 	vmov	d7, r2, r3
 800569a:	eeb0 0b47 	vmov.f64	d0, d7
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <_ZN5Eigen9BlockImplIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f8c8 	bl	8005850 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
    }
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <_ZN5Eigen9BlockImplIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f8e2 	bl	80058bc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
    }
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f900 	bl	8005928 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 8005728:	4603      	mov	r3, r0
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	f7fe f80a 	bl	8003752 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800573e:	4603      	mov	r3, r0
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f8f3 	bl	800593e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 8005758:	4603      	mov	r3, r0
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	f7fd fffa 	bl	8003762 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800576e:	4603      	mov	r3, r0
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fe63 	bl	800544c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 8005786:	4603      	mov	r3, r0
 8005788:	4618      	mov	r0, r3
 800578a:	f000 f8e3 	bl	8005954 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800578e:	4603      	mov	r3, r0
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff fe53 	bl	800544c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 80057a6:	4603      	mov	r3, r0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 f8e0 	bl	800596e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 80057ae:	4603      	mov	r3, r0
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f8de 	bl	8005988 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEdRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f8b2 	bl	80059a6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 8005842:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8005846:	eeb0 0b47 	vmov.f64	d0, d7
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8005850:	b5b0      	push	{r4, r5, r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800585c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f7fd f923 	bl	8002aac <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8005866:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8005868:	68b8      	ldr	r0, [r7, #8]
 800586a:	f7fe f8de 	bl	8003a2a <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800586e:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	00db      	lsls	r3, r3, #3
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8005878:	441d      	add	r5, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4618      	mov	r0, r3
 800587e:	f7fc f953 	bl	8001b28 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005882:	4603      	mov	r3, r0
 8005884:	2201      	movs	r2, #1
 8005886:	4629      	mov	r1, r5
 8005888:	4620      	mov	r0, r4
 800588a:	f000 f8bd 	bl	8005a08 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKdii>
        m_xpr(xpr),
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	609a      	str	r2, [r3, #8]
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	330c      	adds	r3, #12
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe f926 	bl	8003aec <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3310      	adds	r3, #16
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe f920 	bl	8003aec <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f8e9 	bl	8005a84 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bdb0      	pop	{r4, r5, r7, pc}

080058bc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80058bc:	b5b0      	push	{r4, r5, r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80058c8:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fc fe02 	bl	80024d6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 80058d2:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 80058d4:	68b8      	ldr	r0, [r7, #8]
 80058d6:	f7fc febe 	bl	8002656 <_ZNK5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 80058da:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	fb02 f303 	mul.w	r3, r2, r3
 80058e2:	00db      	lsls	r3, r3, #3
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80058e4:	441d      	add	r5, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fc fa6a 	bl	8001dc2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80058ee:	4602      	mov	r2, r0
 80058f0:	2301      	movs	r3, #1
 80058f2:	4629      	mov	r1, r5
 80058f4:	4620      	mov	r0, r4
 80058f6:	f000 f8ed 	bl	8005ad4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKdii>
        m_xpr(xpr),
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	609a      	str	r2, [r3, #8]
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	330c      	adds	r3, #12
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe f8f0 	bl	8003aec <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3310      	adds	r3, #16
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 f91c 	bl	8005b50 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f933 	bl	8005b84 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bdb0      	pop	{r4, r5, r7, pc}

08005928 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	f7fd ff0f 	bl	8003752 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8005934:	4603      	mov	r3, r0
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	f7fd ff0c 	bl	8003762 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800594a:	4603      	mov	r3, r0
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff feda 	bl	8005718 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8005964:	4603      	mov	r3, r0
    }
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff fee5 	bl	8005748 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800597e:	4603      	mov	r3, r0
    }
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f904 	bl	8005ba4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddEC1ERKSI_>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f908 	bl	8005bc8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 80059b8:	eeb0 7b40 	vmov.f64	d7, d0
 80059bc:	ed87 7b02 	vstr	d7, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f911 	bl	8005bea <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 80059c8:	eeb0 7b40 	vmov.f64	d7, d0
 80059cc:	ed87 7b04 	vstr	d7, [r7, #16]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80059d0:	f107 0210 	add.w	r2, r7, #16
 80059d4:	f107 0308 	add.w	r3, r7, #8
 80059d8:	4619      	mov	r1, r3
 80059da:	6838      	ldr	r0, [r7, #0]
 80059dc:	f7fe f8ec 	bl	8003bb8 <_ZNK5Eigen8internal13scalar_sum_opIddEclERKdS4_>
 80059e0:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80059e4:	eeb0 0b47 	vmov.f64	d0, d7
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f91b 	bl	8005c32 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKdii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7ff ffe9 	bl	80059ee <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3304      	adds	r3, #4
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fd ff27 	bl	800387c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3305      	adds	r3, #5
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fd ff07 	bl	8003848 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d011      	beq.n	8005a64 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKdii+0x5c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	db08      	blt.n	8005a58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKdii+0x50>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d105      	bne.n	8005a58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKdii+0x50>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	db02      	blt.n	8005a58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKdii+0x50>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d005      	beq.n	8005a64 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKdii+0x5c>
 8005a58:	4b07      	ldr	r3, [pc, #28]	@ (8005a78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKdii+0x70>)
 8005a5a:	4a08      	ldr	r2, [pc, #32]	@ (8005a7c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKdii+0x74>)
 8005a5c:	21b0      	movs	r1, #176	@ 0xb0
 8005a5e:	4808      	ldr	r0, [pc, #32]	@ (8005a80 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKdii+0x78>)
 8005a60:	f008 fc62 	bl	800e328 <__assert_func>
      checkSanity<Derived>();
 8005a64:	2100      	movs	r1, #0
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f8ee 	bl	8005c48 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	08010f34 	.word	0x08010f34
 8005a7c:	08011c48 	.word	0x08011c48
 8005a80:	080110ac 	.word	0x080110ac

08005a84 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    void init()
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fd ffca 	bl	8003a2a <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8005a96:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	615a      	str	r2, [r3, #20]
    }
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <_ZNK5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	2301      	movs	r3, #1
 8005aae:	4618      	mov	r0, r3
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f8cb 	bl	8005c5e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKdii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff ffe9 	bl	8005aba <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3304      	adds	r3, #4
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fd fea7 	bl	8003848 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3305      	adds	r3, #5
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fd febb 	bl	800387c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d011      	beq.n	8005b30 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x5c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	db08      	blt.n	8005b24 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x50>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d105      	bne.n	8005b24 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x50>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	db02      	blt.n	8005b24 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x50>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d005      	beq.n	8005b30 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x5c>
 8005b24:	4b07      	ldr	r3, [pc, #28]	@ (8005b44 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x70>)
 8005b26:	4a08      	ldr	r2, [pc, #32]	@ (8005b48 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x74>)
 8005b28:	21b0      	movs	r1, #176	@ 0xb0
 8005b2a:	4808      	ldr	r0, [pc, #32]	@ (8005b4c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKdii+0x78>)
 8005b2c:	f008 fbfc 	bl	800e328 <__assert_func>
      checkSanity<Derived>();
 8005b30:	2100      	movs	r1, #0
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 f89e 	bl	8005c74 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	08010f34 	.word	0x08010f34
 8005b48:	08011d14 	.word	0x08011d14
 8005b4c:	080110ac 	.word	0x080110ac

08005b50 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 8005b60:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 8005b62:	4a06      	ldr	r2, [pc, #24]	@ (8005b7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 8005b64:	2185      	movs	r1, #133	@ 0x85
 8005b66:	4806      	ldr	r0, [pc, #24]	@ (8005b80 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 8005b68:	f008 fbde 	bl	800e328 <__assert_func>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	08010df4 	.word	0x08010df4
 8005b7c:	08011de0 	.word	0x08011de0
 8005b80:	08010e6c 	.word	0x08010e6c

08005b84 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fc fd60 	bl	8002656 <_ZNK5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8005b96:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	615a      	str	r2, [r3, #20]
    }
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f86b 	bl	8005c8a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 f871 	bl	8005ca0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddE4DataC1ERKSI_>
  }
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f88a 	bl	8005cf0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8005bdc:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8005be0:	eeb0 0b47 	vmov.f64	d0, d7
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b086      	sub	sp, #24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f88d 	bl	8005d16 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8005bfc:	eeb0 7b40 	vmov.f64	d7, d0
 8005c00:	ed87 7b02 	vstr	d7, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f896 	bl	8005d38 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8005c0c:	eeb0 7b40 	vmov.f64	d7, d0
 8005c10:	ed87 7b04 	vstr	d7, [r7, #16]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8005c14:	f107 0210 	add.w	r2, r7, #16
 8005c18:	f107 0308 	add.w	r3, r7, #8
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6838      	ldr	r0, [r7, #0]
 8005c20:	f7fd ffca 	bl	8003bb8 <_ZNK5Eigen8internal13scalar_sum_opIddEclERKdS4_>
 8005c24:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8005c28:	eeb0 0b47 	vmov.f64	d0, d7
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
    }
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
    {}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
    }
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
    {}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
 8005caa:	687c      	ldr	r4, [r7, #4]
 8005cac:	6838      	ldr	r0, [r7, #0]
 8005cae:	f000 f854 	bl	8005d5a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f7fc ffbc 	bl	8002c34 <_ZN5Eigen8internal17scalar_product_opIddEC1ERKS2_>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	1d1c      	adds	r4, r3, #4
 8005cc0:	6838      	ldr	r0, [r7, #0]
 8005cc2:	f000 f856 	bl	8005d72 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 f868 	bl	8005da0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f103 040c 	add.w	r4, r3, #12
 8005cd6:	6838      	ldr	r0, [r7, #0]
 8005cd8:	f000 f856 	bl	8005d88 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 f86c 	bl	8005dbe <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd90      	pop	{r4, r7, pc}

08005cf0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 f86a 	bl	8005ddc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddE5coeffEii>
 8005d08:	eeb0 7b40 	vmov.f64	d7, d0
 8005d0c:	eeb0 0b47 	vmov.f64	d0, d7
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8005d20:	2201      	movs	r2, #1
 8005d22:	2100      	movs	r1, #0
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff ffe3 	bl	8005cf0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8005d2a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8005d2e:	eeb0 0b47 	vmov.f64	d0, d7
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIddEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8005d42:	2202      	movs	r2, #2
 8005d44:	2100      	movs	r1, #0
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff ffd2 	bl	8005cf0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8005d4c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8005d50:	eeb0 0b47 	vmov.f64	d0, d7
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3330      	adds	r3, #48	@ 0x30
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3318      	adds	r3, #24
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f844 	bl	8005e3c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	6039      	str	r1, [r7, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 f844 	bl	8005e5a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b089      	sub	sp, #36	@ 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 f844 	bl	8005e78 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddE4Data4funcEv>
 8005df0:	4604      	mov	r4, r0
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3304      	adds	r3, #4
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 f847 	bl	8005e8e <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdE5coeffEii>
 8005e00:	eeb0 7b40 	vmov.f64	d7, d0
 8005e04:	ed87 7b04 	vstr	d7, [r7, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	330c      	adds	r3, #12
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	68b9      	ldr	r1, [r7, #8]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 f84f 	bl	8005eb4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 8005e16:	eeb0 7b40 	vmov.f64	d7, d0
 8005e1a:	ed87 7b06 	vstr	d7, [r7, #24]
 8005e1e:	f107 0218 	add.w	r2, r7, #24
 8005e22:	f107 0310 	add.w	r3, r7, #16
 8005e26:	4619      	mov	r1, r3
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7fe fb57 	bl	80044dc <_ZNK5Eigen8internal17scalar_product_opIddEclERKdS4_>
 8005e2e:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8005e32:	eeb0 0b47 	vmov.f64	d0, d7
 8005e36:	3724      	adds	r7, #36	@ 0x24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd90      	pop	{r4, r7, pc}

08005e3c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 f854 	bl	8005ef8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdEC1ERKS9_>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 f85b 	bl	8005f24 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIddEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ddE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 f852 	bl	8005f4a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 8005ea6:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8005eaa:	eeb0 0b47 	vmov.f64	d0, d7
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8005eb4:	b5b0      	push	{r4, r5, r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681c      	ldr	r4, [r3, #0]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f862 	bl	8005f8e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	fb03 f502 	mul.w	r5, r3, r2
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f866 	bl	8005fa4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	fb02 f303 	mul.w	r3, r2, r3
 8005ee0:	442b      	add	r3, r5
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4423      	add	r3, r4
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	ec43 2b17 	vmov	d7, r2, r3
  }
 8005eee:	eeb0 0b47 	vmov.f64	d0, d7
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bdb0      	pop	{r4, r5, r7, pc}

08005ef8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEdEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f864 	bl	8005fd0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 8005f08:	687c      	ldr	r4, [r7, #4]
 8005f0a:	6838      	ldr	r0, [r7, #0]
 8005f0c:	f000 f855 	bl	8005fba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 8005f10:	4603      	mov	r3, r0
 8005f12:	4619      	mov	r1, r3
 8005f14:	4620      	mov	r0, r4
 8005f16:	f000 f866 	bl	8005fe6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd90      	pop	{r4, r7, pc}

08005f24 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 f866 	bl	8006004 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f88c 	bl	8006058 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
  }
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8005f4a:	b5b0      	push	{r4, r5, r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681c      	ldr	r4, [r3, #0]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f888 	bl	8006070 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 8005f60:	4602      	mov	r2, r0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	fb03 f502 	mul.w	r5, r3, r2
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f88c 	bl	8006086 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	fb02 f303 	mul.w	r3, r2, r3
 8005f76:	442b      	add	r3, r5
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4423      	add	r3, r4
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	ec43 2b17 	vmov	d7, r2, r3
  }
 8005f84:	eeb0 0b47 	vmov.f64	d0, d7
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bdb0      	pop	{r4, r5, r7, pc}

08005f8e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8005f96:	f7fd fbdc 	bl	8003752 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8005f9a:	4603      	mov	r3, r0
  }
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8005fac:	f7fd fbd9 	bl	8003762 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8005fb0:	4603      	mov	r3, r0
  }
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f851 	bl	800609c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8006004:	b590      	push	{r4, r7, lr}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f86f 	bl	80060f2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f81e 	bl	8006058 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800601c:	4602      	mov	r2, r0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	601a      	str	r2, [r3, #0]
      m_innerStride(map.innerStride()),
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	1d1c      	adds	r4, r3, #4
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	4618      	mov	r0, r3
 800602a:	f000 f846 	bl	80060ba <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 800602e:	4603      	mov	r3, r0
 8006030:	4619      	mov	r1, r3
 8006032:	4620      	mov	r0, r4
 8006034:	f7fd fc22 	bl	800387c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      m_outerStride(map.outerStride())
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	1d5c      	adds	r4, r3, #5
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f849 	bl	80060d6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8006044:	4603      	mov	r3, r0
 8006046:	4619      	mov	r1, r3
 8006048:	4620      	mov	r0, r4
 800604a:	f7fd fbfd 	bl	8003848 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bd90      	pop	{r4, r7, pc}

08006058 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8006078:	f7fd fb6b 	bl	8003752 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800607c:	4603      	mov	r3, r0
  }
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800608e:	f7fd fb68 	bl	8003762 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8006092:	4603      	mov	r3, r0
  }
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f82c 	bl	8006108 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fcec 	bl	8005aa4 <_ZNK5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 80060cc:	4603      	mov	r3, r0
    }
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fc fab7 	bl	8002656 <_ZNK5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 80060e8:	4603      	mov	r3, r0
    }
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 f809 	bl	800612e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 f82f 	bl	8006182 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
  }
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IdLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 800612e:	b590      	push	{r4, r7, lr}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f84a 	bl	80061d2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f000 f81e 	bl	8006182 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8006146:	4602      	mov	r2, r0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	601a      	str	r2, [r3, #0]
      m_innerStride(map.innerStride()),
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	1d1c      	adds	r4, r3, #4
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f821 	bl	800619a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 8006158:	4603      	mov	r3, r0
 800615a:	4619      	mov	r1, r3
 800615c:	4620      	mov	r0, r4
 800615e:	f7fd fb73 	bl	8003848 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      m_outerStride(map.outerStride())
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	1d5c      	adds	r4, r3, #5
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 f824 	bl	80061b6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 800616e:	4603      	mov	r3, r0
 8006170:	4619      	mov	r1, r3
 8006172:	4620      	mov	r0, r4
 8006174:	f7fd fb82 	bl	800387c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	bd90      	pop	{r4, r7, pc}

08006182 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fd fc4a 	bl	8003a40 <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80061ac:	4603      	mov	r3, r0
    }
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fd fc31 	bl	8003a2a <_ZNK5Eigen6MatrixIdLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 80061c8:	4603      	mov	r3, r0
    }
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIdLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80061e8:	b598      	push	{r3, r4, r7, lr}
 80061ea:	af00      	add	r7, sp, #0
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 80061ec:	4808      	ldr	r0, [pc, #32]	@ (8006210 <_Z41__static_initialization_and_destruction_0v+0x28>)
 80061ee:	f7fb f9db 	bl	80015a8 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 80061f2:	4808      	ldr	r0, [pc, #32]	@ (8006214 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 80061f4:	f7fb f9e3 	bl	80015be <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 80061f8:	4806      	ldr	r0, [pc, #24]	@ (8006214 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 80061fa:	f7fb f9eb 	bl	80015d4 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 80061fe:	4621      	mov	r1, r4
 8006200:	4803      	ldr	r0, [pc, #12]	@ (8006210 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8006202:	f7fb f9f2 	bl	80015ea <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8006206:	4804      	ldr	r0, [pc, #16]	@ (8006218 <_Z41__static_initialization_and_destruction_0v+0x30>)
 8006208:	f7fa faa3 	bl	8000752 <_ZN5Eigen8internal5all_tC1Ev>
 800620c:	bf00      	nop
 800620e:	bd98      	pop	{r3, r4, r7, pc}
 8006210:	240003bc 	.word	0x240003bc
 8006214:	24000564 	.word	0x24000564
 8006218:	240003c0 	.word	0x240003c0

0800621c <_GLOBAL__sub_I_hadc1>:
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
 8006220:	f7ff ffe2 	bl	80061e8 <_Z41__static_initialization_and_destruction_0v>
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800622e:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <HAL_MspInit+0x30>)
 8006230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006234:	4a08      	ldr	r2, [pc, #32]	@ (8006258 <HAL_MspInit+0x30>)
 8006236:	f043 0302 	orr.w	r3, r3, #2
 800623a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800623e:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <HAL_MspInit+0x30>)
 8006240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	607b      	str	r3, [r7, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	58024400 	.word	0x58024400

0800625c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b0bc      	sub	sp, #240	@ 0xf0
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006264:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	609a      	str	r2, [r3, #8]
 8006270:	60da      	str	r2, [r3, #12]
 8006272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006274:	f107 0318 	add.w	r3, r7, #24
 8006278:	22c0      	movs	r2, #192	@ 0xc0
 800627a:	2100      	movs	r1, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f008 f988 	bl	800e592 <memset>
  if(hadc->Instance==ADC1)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a4a      	ldr	r2, [pc, #296]	@ (80063b0 <HAL_ADC_MspInit+0x154>)
 8006288:	4293      	cmp	r3, r2
 800628a:	f040 808d 	bne.w	80063a8 <HAL_ADC_MspInit+0x14c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800628e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800629a:	2304      	movs	r3, #4
 800629c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800629e:	230a      	movs	r3, #10
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80062a2:	2302      	movs	r3, #2
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80062a6:	2302      	movs	r3, #2
 80062a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80062aa:	2302      	movs	r3, #2
 80062ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80062ae:	23c0      	movs	r3, #192	@ 0xc0
 80062b0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80062b2:	2320      	movs	r3, #32
 80062b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062c0:	f107 0318 	add.w	r3, r7, #24
 80062c4:	4618      	mov	r0, r3
 80062c6:	f002 ffe5 	bl	8009294 <HAL_RCCEx_PeriphCLKConfig>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80062d0:	f7fb f964 	bl	800159c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80062d4:	4b37      	ldr	r3, [pc, #220]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 80062d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062da:	4a36      	ldr	r2, [pc, #216]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 80062dc:	f043 0320 	orr.w	r3, r3, #32
 80062e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80062e4:	4b33      	ldr	r3, [pc, #204]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 80062e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062f2:	4b30      	ldr	r3, [pc, #192]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 80062f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062f8:	4a2e      	ldr	r2, [pc, #184]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 80062fa:	f043 0301 	orr.w	r3, r3, #1
 80062fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006302:	4b2c      	ldr	r3, [pc, #176]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 8006304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006310:	4b28      	ldr	r3, [pc, #160]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 8006312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006316:	4a27      	ldr	r2, [pc, #156]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 8006318:	f043 0304 	orr.w	r3, r3, #4
 800631c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006320:	4b24      	ldr	r3, [pc, #144]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 8006322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800632e:	4b21      	ldr	r3, [pc, #132]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 8006330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006334:	4a1f      	ldr	r2, [pc, #124]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 8006336:	f043 0320 	orr.w	r3, r3, #32
 800633a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800633e:	4b1d      	ldr	r3, [pc, #116]	@ (80063b4 <HAL_ADC_MspInit+0x158>)
 8006340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800634c:	2340      	movs	r3, #64	@ 0x40
 800634e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006352:	2303      	movs	r3, #3
 8006354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006358:	2300      	movs	r3, #0
 800635a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800635e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8006362:	4619      	mov	r1, r3
 8006364:	4814      	ldr	r0, [pc, #80]	@ (80063b8 <HAL_ADC_MspInit+0x15c>)
 8006366:	f001 fdab 	bl	8007ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800636a:	2310      	movs	r3, #16
 800636c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006370:	2303      	movs	r3, #3
 8006372:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006376:	2300      	movs	r3, #0
 8006378:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800637c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8006380:	4619      	mov	r1, r3
 8006382:	480e      	ldr	r0, [pc, #56]	@ (80063bc <HAL_ADC_MspInit+0x160>)
 8006384:	f001 fd9c 	bl	8007ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006388:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800638c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006390:	2303      	movs	r3, #3
 8006392:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006396:	2300      	movs	r3, #0
 8006398:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800639c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80063a0:	4619      	mov	r1, r3
 80063a2:	4807      	ldr	r0, [pc, #28]	@ (80063c0 <HAL_ADC_MspInit+0x164>)
 80063a4:	f001 fd8c 	bl	8007ec0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80063a8:	bf00      	nop
 80063aa:	37f0      	adds	r7, #240	@ 0xf0
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40022000 	.word	0x40022000
 80063b4:	58024400 	.word	0x58024400
 80063b8:	58020000 	.word	0x58020000
 80063bc:	58020800 	.word	0x58020800
 80063c0:	58021400 	.word	0x58021400

080063c4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08c      	sub	sp, #48	@ 0x30
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063cc:	f107 031c 	add.w	r3, r7, #28
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	609a      	str	r2, [r3, #8]
 80063d8:	60da      	str	r2, [r3, #12]
 80063da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a45      	ldr	r2, [pc, #276]	@ (80064f8 <HAL_TIM_Base_MspInit+0x134>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d148      	bne.n	8006478 <HAL_TIM_Base_MspInit+0xb4>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80063e6:	4b45      	ldr	r3, [pc, #276]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 80063e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ec:	4a43      	ldr	r2, [pc, #268]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80063f6:	4b41      	ldr	r3, [pc, #260]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 80063f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006404:	4b3d      	ldr	r3, [pc, #244]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 8006406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800640a:	4a3c      	ldr	r2, [pc, #240]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 800640c:	f043 0310 	orr.w	r3, r3, #16
 8006410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006414:	4b39      	ldr	r3, [pc, #228]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 8006416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 8006422:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8006426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006428:	2302      	movs	r3, #2
 800642a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642c:	2300      	movs	r3, #0
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006430:	2300      	movs	r3, #0
 8006432:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006434:	2301      	movs	r3, #1
 8006436:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006438:	f107 031c 	add.w	r3, r7, #28
 800643c:	4619      	mov	r1, r3
 800643e:	4830      	ldr	r0, [pc, #192]	@ (8006500 <HAL_TIM_Base_MspInit+0x13c>)
 8006440:	f001 fd3e 	bl	8007ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006444:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800644a:	2302      	movs	r3, #2
 800644c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800644e:	2302      	movs	r3, #2
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006452:	2300      	movs	r3, #0
 8006454:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006456:	2301      	movs	r3, #1
 8006458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800645a:	f107 031c 	add.w	r3, r7, #28
 800645e:	4619      	mov	r1, r3
 8006460:	4827      	ldr	r0, [pc, #156]	@ (8006500 <HAL_TIM_Base_MspInit+0x13c>)
 8006462:	f001 fd2d 	bl	8007ec0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8006466:	2200      	movs	r2, #0
 8006468:	2100      	movs	r1, #0
 800646a:	201b      	movs	r0, #27
 800646c:	f001 fcf3 	bl	8007e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006470:	201b      	movs	r0, #27
 8006472:	f001 fd0a 	bl	8007e8a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006476:	e03a      	b.n	80064ee <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006480:	d135      	bne.n	80064ee <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006482:	4b1e      	ldr	r3, [pc, #120]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 8006484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006488:	4a1c      	ldr	r2, [pc, #112]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 800648a:	f043 0301 	orr.w	r3, r3, #1
 800648e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006492:	4b1a      	ldr	r3, [pc, #104]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 8006494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064a0:	4b16      	ldr	r3, [pc, #88]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 80064a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064a6:	4a15      	ldr	r2, [pc, #84]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 80064a8:	f043 0301 	orr.w	r3, r3, #1
 80064ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80064b0:	4b12      	ldr	r3, [pc, #72]	@ (80064fc <HAL_TIM_Base_MspInit+0x138>)
 80064b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80064be:	2307      	movs	r3, #7
 80064c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064c2:	2302      	movs	r3, #2
 80064c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ca:	2300      	movs	r3, #0
 80064cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80064ce:	2301      	movs	r3, #1
 80064d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064d2:	f107 031c 	add.w	r3, r7, #28
 80064d6:	4619      	mov	r1, r3
 80064d8:	480a      	ldr	r0, [pc, #40]	@ (8006504 <HAL_TIM_Base_MspInit+0x140>)
 80064da:	f001 fcf1 	bl	8007ec0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80064de:	2200      	movs	r2, #0
 80064e0:	2100      	movs	r1, #0
 80064e2:	201c      	movs	r0, #28
 80064e4:	f001 fcb7 	bl	8007e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80064e8:	201c      	movs	r0, #28
 80064ea:	f001 fcce 	bl	8007e8a <HAL_NVIC_EnableIRQ>
}
 80064ee:	bf00      	nop
 80064f0:	3730      	adds	r7, #48	@ 0x30
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	40010000 	.word	0x40010000
 80064fc:	58024400 	.word	0x58024400
 8006500:	58021000 	.word	0x58021000
 8006504:	58020000 	.word	0x58020000

08006508 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b0ba      	sub	sp, #232	@ 0xe8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006510:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	605a      	str	r2, [r3, #4]
 800651a:	609a      	str	r2, [r3, #8]
 800651c:	60da      	str	r2, [r3, #12]
 800651e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006520:	f107 0310 	add.w	r3, r7, #16
 8006524:	22c0      	movs	r2, #192	@ 0xc0
 8006526:	2100      	movs	r1, #0
 8006528:	4618      	mov	r0, r3
 800652a:	f008 f832 	bl	800e592 <memset>
  if(huart->Instance==USART3)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a27      	ldr	r2, [pc, #156]	@ (80065d0 <HAL_UART_MspInit+0xc8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d146      	bne.n	80065c6 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006538:	f04f 0202 	mov.w	r2, #2
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 8006544:	2304      	movs	r3, #4
 8006546:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800654a:	f107 0310 	add.w	r3, r7, #16
 800654e:	4618      	mov	r0, r3
 8006550:	f002 fea0 	bl	8009294 <HAL_RCCEx_PeriphCLKConfig>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800655a:	f7fb f81f 	bl	800159c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800655e:	4b1d      	ldr	r3, [pc, #116]	@ (80065d4 <HAL_UART_MspInit+0xcc>)
 8006560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006564:	4a1b      	ldr	r2, [pc, #108]	@ (80065d4 <HAL_UART_MspInit+0xcc>)
 8006566:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800656a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800656e:	4b19      	ldr	r3, [pc, #100]	@ (80065d4 <HAL_UART_MspInit+0xcc>)
 8006570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800657c:	4b15      	ldr	r3, [pc, #84]	@ (80065d4 <HAL_UART_MspInit+0xcc>)
 800657e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006582:	4a14      	ldr	r2, [pc, #80]	@ (80065d4 <HAL_UART_MspInit+0xcc>)
 8006584:	f043 0308 	orr.w	r3, r3, #8
 8006588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800658c:	4b11      	ldr	r3, [pc, #68]	@ (80065d4 <HAL_UART_MspInit+0xcc>)
 800658e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006592:	f003 0308 	and.w	r3, r3, #8
 8006596:	60bb      	str	r3, [r7, #8]
 8006598:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800659a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800659e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a2:	2302      	movs	r3, #2
 80065a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ae:	2300      	movs	r3, #0
 80065b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80065b4:	2307      	movs	r3, #7
 80065b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80065be:	4619      	mov	r1, r3
 80065c0:	4805      	ldr	r0, [pc, #20]	@ (80065d8 <HAL_UART_MspInit+0xd0>)
 80065c2:	f001 fc7d 	bl	8007ec0 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80065c6:	bf00      	nop
 80065c8:	37e8      	adds	r7, #232	@ 0xe8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40004800 	.word	0x40004800
 80065d4:	58024400 	.word	0x58024400
 80065d8:	58020c00 	.word	0x58020c00

080065dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80065e0:	bf00      	nop
 80065e2:	e7fd      	b.n	80065e0 <NMI_Handler+0x4>

080065e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065e8:	bf00      	nop
 80065ea:	e7fd      	b.n	80065e8 <HardFault_Handler+0x4>

080065ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065f0:	bf00      	nop
 80065f2:	e7fd      	b.n	80065f0 <MemManage_Handler+0x4>

080065f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065f8:	bf00      	nop
 80065fa:	e7fd      	b.n	80065f8 <BusFault_Handler+0x4>

080065fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006600:	bf00      	nop
 8006602:	e7fd      	b.n	8006600 <UsageFault_Handler+0x4>

08006604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006608:	bf00      	nop
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006612:	b480      	push	{r7}
 8006614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006616:	bf00      	nop
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006632:	f000 faa9 	bl	8006b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006636:	bf00      	nop
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006640:	4802      	ldr	r0, [pc, #8]	@ (800664c <TIM1_CC_IRQHandler+0x10>)
 8006642:	f005 fd2d 	bl	800c0a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	24000428 	.word	0x24000428

08006650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006654:	4802      	ldr	r0, [pc, #8]	@ (8006660 <TIM2_IRQHandler+0x10>)
 8006656:	f005 fd23 	bl	800c0a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800665a:	bf00      	nop
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	24000474 	.word	0x24000474

08006664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return 1;
 8006668:	2301      	movs	r3, #1
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <_kill>:

int _kill(int pid, int sig)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800667e:	f007 ffd7 	bl	800e630 <__errno>
 8006682:	4603      	mov	r3, r0
 8006684:	2216      	movs	r2, #22
 8006686:	601a      	str	r2, [r3, #0]
  return -1;
 8006688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <_exit>:

void _exit (int status)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800669c:	f04f 31ff 	mov.w	r1, #4294967295
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff ffe7 	bl	8006674 <_kill>
  while (1) {}    /* Make sure we hang here */
 80066a6:	bf00      	nop
 80066a8:	e7fd      	b.n	80066a6 <_exit+0x12>

080066aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b086      	sub	sp, #24
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e00a      	b.n	80066d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80066bc:	f3af 8000 	nop.w
 80066c0:	4601      	mov	r1, r0
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	60ba      	str	r2, [r7, #8]
 80066c8:	b2ca      	uxtb	r2, r1
 80066ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	3301      	adds	r3, #1
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	dbf0      	blt.n	80066bc <_read+0x12>
  }

  return len;
 80066da:	687b      	ldr	r3, [r7, #4]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	e009      	b.n	800670a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	60ba      	str	r2, [r7, #8]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	3301      	adds	r3, #1
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	429a      	cmp	r2, r3
 8006710:	dbf1      	blt.n	80066f6 <_write+0x12>
  }
  return len;
 8006712:	687b      	ldr	r3, [r7, #4]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <_close>:

int _close(int file)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006744:	605a      	str	r2, [r3, #4]
  return 0;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <_isatty>:

int _isatty(int file)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800675c:	2301      	movs	r3, #1
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800678c:	4a14      	ldr	r2, [pc, #80]	@ (80067e0 <_sbrk+0x5c>)
 800678e:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <_sbrk+0x60>)
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006798:	4b13      	ldr	r3, [pc, #76]	@ (80067e8 <_sbrk+0x64>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d102      	bne.n	80067a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80067a0:	4b11      	ldr	r3, [pc, #68]	@ (80067e8 <_sbrk+0x64>)
 80067a2:	4a12      	ldr	r2, [pc, #72]	@ (80067ec <_sbrk+0x68>)
 80067a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80067a6:	4b10      	ldr	r3, [pc, #64]	@ (80067e8 <_sbrk+0x64>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d207      	bcs.n	80067c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80067b4:	f007 ff3c 	bl	800e630 <__errno>
 80067b8:	4603      	mov	r3, r0
 80067ba:	220c      	movs	r2, #12
 80067bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295
 80067c2:	e009      	b.n	80067d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80067c4:	4b08      	ldr	r3, [pc, #32]	@ (80067e8 <_sbrk+0x64>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80067ca:	4b07      	ldr	r3, [pc, #28]	@ (80067e8 <_sbrk+0x64>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	4a05      	ldr	r2, [pc, #20]	@ (80067e8 <_sbrk+0x64>)
 80067d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067d6:	68fb      	ldr	r3, [r7, #12]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	24080000 	.word	0x24080000
 80067e4:	00000400 	.word	0x00000400
 80067e8:	24000568 	.word	0x24000568
 80067ec:	240006c0 	.word	0x240006c0

080067f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80067f4:	4b43      	ldr	r3, [pc, #268]	@ (8006904 <SystemInit+0x114>)
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fa:	4a42      	ldr	r2, [pc, #264]	@ (8006904 <SystemInit+0x114>)
 80067fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006804:	4b40      	ldr	r3, [pc, #256]	@ (8006908 <SystemInit+0x118>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	2b06      	cmp	r3, #6
 800680e:	d807      	bhi.n	8006820 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006810:	4b3d      	ldr	r3, [pc, #244]	@ (8006908 <SystemInit+0x118>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f023 030f 	bic.w	r3, r3, #15
 8006818:	4a3b      	ldr	r2, [pc, #236]	@ (8006908 <SystemInit+0x118>)
 800681a:	f043 0307 	orr.w	r3, r3, #7
 800681e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006820:	4b3a      	ldr	r3, [pc, #232]	@ (800690c <SystemInit+0x11c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a39      	ldr	r2, [pc, #228]	@ (800690c <SystemInit+0x11c>)
 8006826:	f043 0301 	orr.w	r3, r3, #1
 800682a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800682c:	4b37      	ldr	r3, [pc, #220]	@ (800690c <SystemInit+0x11c>)
 800682e:	2200      	movs	r2, #0
 8006830:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006832:	4b36      	ldr	r3, [pc, #216]	@ (800690c <SystemInit+0x11c>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4935      	ldr	r1, [pc, #212]	@ (800690c <SystemInit+0x11c>)
 8006838:	4b35      	ldr	r3, [pc, #212]	@ (8006910 <SystemInit+0x120>)
 800683a:	4013      	ands	r3, r2
 800683c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800683e:	4b32      	ldr	r3, [pc, #200]	@ (8006908 <SystemInit+0x118>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0308 	and.w	r3, r3, #8
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800684a:	4b2f      	ldr	r3, [pc, #188]	@ (8006908 <SystemInit+0x118>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f023 030f 	bic.w	r3, r3, #15
 8006852:	4a2d      	ldr	r2, [pc, #180]	@ (8006908 <SystemInit+0x118>)
 8006854:	f043 0307 	orr.w	r3, r3, #7
 8006858:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800685a:	4b2c      	ldr	r3, [pc, #176]	@ (800690c <SystemInit+0x11c>)
 800685c:	2200      	movs	r2, #0
 800685e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006860:	4b2a      	ldr	r3, [pc, #168]	@ (800690c <SystemInit+0x11c>)
 8006862:	2200      	movs	r2, #0
 8006864:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006866:	4b29      	ldr	r3, [pc, #164]	@ (800690c <SystemInit+0x11c>)
 8006868:	2200      	movs	r2, #0
 800686a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800686c:	4b27      	ldr	r3, [pc, #156]	@ (800690c <SystemInit+0x11c>)
 800686e:	4a29      	ldr	r2, [pc, #164]	@ (8006914 <SystemInit+0x124>)
 8006870:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006872:	4b26      	ldr	r3, [pc, #152]	@ (800690c <SystemInit+0x11c>)
 8006874:	4a28      	ldr	r2, [pc, #160]	@ (8006918 <SystemInit+0x128>)
 8006876:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006878:	4b24      	ldr	r3, [pc, #144]	@ (800690c <SystemInit+0x11c>)
 800687a:	4a28      	ldr	r2, [pc, #160]	@ (800691c <SystemInit+0x12c>)
 800687c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800687e:	4b23      	ldr	r3, [pc, #140]	@ (800690c <SystemInit+0x11c>)
 8006880:	2200      	movs	r2, #0
 8006882:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006884:	4b21      	ldr	r3, [pc, #132]	@ (800690c <SystemInit+0x11c>)
 8006886:	4a25      	ldr	r2, [pc, #148]	@ (800691c <SystemInit+0x12c>)
 8006888:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800688a:	4b20      	ldr	r3, [pc, #128]	@ (800690c <SystemInit+0x11c>)
 800688c:	2200      	movs	r2, #0
 800688e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006890:	4b1e      	ldr	r3, [pc, #120]	@ (800690c <SystemInit+0x11c>)
 8006892:	4a22      	ldr	r2, [pc, #136]	@ (800691c <SystemInit+0x12c>)
 8006894:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006896:	4b1d      	ldr	r3, [pc, #116]	@ (800690c <SystemInit+0x11c>)
 8006898:	2200      	movs	r2, #0
 800689a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800689c:	4b1b      	ldr	r3, [pc, #108]	@ (800690c <SystemInit+0x11c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1a      	ldr	r2, [pc, #104]	@ (800690c <SystemInit+0x11c>)
 80068a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80068a8:	4b18      	ldr	r3, [pc, #96]	@ (800690c <SystemInit+0x11c>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80068ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006920 <SystemInit+0x130>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006924 <SystemInit+0x134>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ba:	d202      	bcs.n	80068c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80068bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006928 <SystemInit+0x138>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80068c2:	4b12      	ldr	r3, [pc, #72]	@ (800690c <SystemInit+0x11c>)
 80068c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80068c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d113      	bne.n	80068f8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80068d0:	4b0e      	ldr	r3, [pc, #56]	@ (800690c <SystemInit+0x11c>)
 80068d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80068d6:	4a0d      	ldr	r2, [pc, #52]	@ (800690c <SystemInit+0x11c>)
 80068d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80068e0:	4b12      	ldr	r3, [pc, #72]	@ (800692c <SystemInit+0x13c>)
 80068e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80068e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80068e8:	4b08      	ldr	r3, [pc, #32]	@ (800690c <SystemInit+0x11c>)
 80068ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80068ee:	4a07      	ldr	r2, [pc, #28]	@ (800690c <SystemInit+0x11c>)
 80068f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80068f8:	bf00      	nop
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	e000ed00 	.word	0xe000ed00
 8006908:	52002000 	.word	0x52002000
 800690c:	58024400 	.word	0x58024400
 8006910:	eaf6ed7f 	.word	0xeaf6ed7f
 8006914:	02020200 	.word	0x02020200
 8006918:	01ff0000 	.word	0x01ff0000
 800691c:	01010280 	.word	0x01010280
 8006920:	5c001000 	.word	0x5c001000
 8006924:	ffff0000 	.word	0xffff0000
 8006928:	51008108 	.word	0x51008108
 800692c:	52004000 	.word	0x52004000

08006930 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8006934:	4b09      	ldr	r3, [pc, #36]	@ (800695c <ExitRun0Mode+0x2c>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4a08      	ldr	r2, [pc, #32]	@ (800695c <ExitRun0Mode+0x2c>)
 800693a:	f043 0302 	orr.w	r3, r3, #2
 800693e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8006940:	bf00      	nop
 8006942:	4b06      	ldr	r3, [pc, #24]	@ (800695c <ExitRun0Mode+0x2c>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0f9      	beq.n	8006942 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	58024800 	.word	0x58024800

08006960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006960:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800699c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8006964:	f7ff ffe4 	bl	8006930 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006968:	f7ff ff42 	bl	80067f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800696c:	480c      	ldr	r0, [pc, #48]	@ (80069a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800696e:	490d      	ldr	r1, [pc, #52]	@ (80069a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006970:	4a0d      	ldr	r2, [pc, #52]	@ (80069a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006974:	e002      	b.n	800697c <LoopCopyDataInit>

08006976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800697a:	3304      	adds	r3, #4

0800697c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800697c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800697e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006980:	d3f9      	bcc.n	8006976 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006982:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006984:	4c0a      	ldr	r4, [pc, #40]	@ (80069b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006988:	e001      	b.n	800698e <LoopFillZerobss>

0800698a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800698a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800698c:	3204      	adds	r2, #4

0800698e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800698e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006990:	d3fb      	bcc.n	800698a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006992:	f007 fe53 	bl	800e63c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006996:	f7f9 ff27 	bl	80007e8 <main>
  bx  lr
 800699a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800699c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80069a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80069a4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80069a8:	08011f30 	.word	0x08011f30
  ldr r2, =_sbss
 80069ac:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80069b0:	240006bc 	.word	0x240006bc

080069b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80069b4:	e7fe      	b.n	80069b4 <ADC3_IRQHandler>
	...

080069b8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08c      	sub	sp, #48	@ 0x30
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <BSP_LED_Init+0x28>
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d006      	beq.n	80069e0 <BSP_LED_Init+0x28>
 80069d2:	79fb      	ldrb	r3, [r7, #7]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d003      	beq.n	80069e0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80069d8:	f06f 0301 	mvn.w	r3, #1
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069de:	e055      	b.n	8006a8c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10f      	bne.n	8006a06 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80069e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006a98 <BSP_LED_Init+0xe0>)
 80069e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006a98 <BSP_LED_Init+0xe0>)
 80069ee:	f043 0302 	orr.w	r3, r3, #2
 80069f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80069f6:	4b28      	ldr	r3, [pc, #160]	@ (8006a98 <BSP_LED_Init+0xe0>)
 80069f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	e021      	b.n	8006a4a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d10f      	bne.n	8006a2c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8006a0c:	4b22      	ldr	r3, [pc, #136]	@ (8006a98 <BSP_LED_Init+0xe0>)
 8006a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a12:	4a21      	ldr	r2, [pc, #132]	@ (8006a98 <BSP_LED_Init+0xe0>)
 8006a14:	f043 0302 	orr.w	r3, r3, #2
 8006a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006a98 <BSP_LED_Init+0xe0>)
 8006a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	e00e      	b.n	8006a4a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a98 <BSP_LED_Init+0xe0>)
 8006a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a32:	4a19      	ldr	r2, [pc, #100]	@ (8006a98 <BSP_LED_Init+0xe0>)
 8006a34:	f043 0302 	orr.w	r3, r3, #2
 8006a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a3c:	4b16      	ldr	r3, [pc, #88]	@ (8006a98 <BSP_LED_Init+0xe0>)
 8006a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	4a13      	ldr	r2, [pc, #76]	@ (8006a9c <BSP_LED_Init+0xe4>)
 8006a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a52:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8006a54:	2301      	movs	r3, #1
 8006a56:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	4a0f      	ldr	r2, [pc, #60]	@ (8006aa0 <BSP_LED_Init+0xe8>)
 8006a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a68:	f107 0218 	add.w	r2, r7, #24
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 fa26 	bl	8007ec0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa0 <BSP_LED_Init+0xe8>)
 8006a78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	4a07      	ldr	r2, [pc, #28]	@ (8006a9c <BSP_LED_Init+0xe4>)
 8006a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a84:	2200      	movs	r2, #0
 8006a86:	4619      	mov	r1, r3
 8006a88:	f001 fbca 	bl	8008220 <HAL_GPIO_WritePin>
  }

  return ret;
 8006a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3730      	adds	r7, #48	@ 0x30
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	58024400 	.word	0x58024400
 8006a9c:	08011e58 	.word	0x08011e58
 8006aa0:	24000008 	.word	0x24000008

08006aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006aaa:	2003      	movs	r0, #3
 8006aac:	f001 f9c8 	bl	8007e40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ab0:	f002 fa1a 	bl	8008ee8 <HAL_RCC_GetSysClockFreq>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	4b15      	ldr	r3, [pc, #84]	@ (8006b0c <HAL_Init+0x68>)
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	4913      	ldr	r1, [pc, #76]	@ (8006b10 <HAL_Init+0x6c>)
 8006ac2:	5ccb      	ldrb	r3, [r1, r3]
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8006acc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ace:	4b0f      	ldr	r3, [pc, #60]	@ (8006b0c <HAL_Init+0x68>)
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8006b10 <HAL_Init+0x6c>)
 8006ad8:	5cd3      	ldrb	r3, [r2, r3]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8006b14 <HAL_Init+0x70>)
 8006ae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8006b18 <HAL_Init+0x74>)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006aee:	2000      	movs	r0, #0
 8006af0:	f000 f814 	bl	8006b1c <HAL_InitTick>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e002      	b.n	8006b04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006afe:	f7ff fb93 	bl	8006228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	08011e48 	.word	0x08011e48
 8006b14:	24000004 	.word	0x24000004
 8006b18:	24000000 	.word	0x24000000

08006b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006b24:	4b15      	ldr	r3, [pc, #84]	@ (8006b7c <HAL_InitTick+0x60>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e021      	b.n	8006b74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006b30:	4b13      	ldr	r3, [pc, #76]	@ (8006b80 <HAL_InitTick+0x64>)
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	4b11      	ldr	r3, [pc, #68]	@ (8006b7c <HAL_InitTick+0x60>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b46:	4618      	mov	r0, r3
 8006b48:	f001 f9ad 	bl	8007ea6 <HAL_SYSTICK_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e00e      	b.n	8006b74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b0f      	cmp	r3, #15
 8006b5a:	d80a      	bhi.n	8006b72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	f001 f977 	bl	8007e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b68:	4a06      	ldr	r2, [pc, #24]	@ (8006b84 <HAL_InitTick+0x68>)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e000      	b.n	8006b74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	24000018 	.word	0x24000018
 8006b80:	24000000 	.word	0x24000000
 8006b84:	24000014 	.word	0x24000014

08006b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ba8 <HAL_IncTick+0x20>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	4b06      	ldr	r3, [pc, #24]	@ (8006bac <HAL_IncTick+0x24>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4413      	add	r3, r2
 8006b98:	4a04      	ldr	r2, [pc, #16]	@ (8006bac <HAL_IncTick+0x24>)
 8006b9a:	6013      	str	r3, [r2, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	24000018 	.word	0x24000018
 8006bac:	2400056c 	.word	0x2400056c

08006bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8006bb4:	4b03      	ldr	r3, [pc, #12]	@ (8006bc4 <HAL_GetTick+0x14>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	2400056c 	.word	0x2400056c

08006bc8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006bcc:	4b03      	ldr	r3, [pc, #12]	@ (8006bdc <HAL_GetREVID+0x14>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	0c1b      	lsrs	r3, r3, #16
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	5c001000 	.word	0x5c001000

08006be0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	609a      	str	r2, [r3, #8]
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	609a      	str	r2, [r3, #8]
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d107      	bne.n	8006c6c <LL_ADC_SetChannelPreselection+0x24>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	0e9b      	lsrs	r3, r3, #26
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	2201      	movs	r2, #1
 8006c66:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6a:	e015      	b.n	8006c98 <LL_ADC_SetChannelPreselection+0x50>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	fa93 f3a3 	rbit	r3, r3
 8006c76:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8006c82:	2320      	movs	r3, #32
 8006c84:	e003      	b.n	8006c8e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	fab3 f383 	clz	r3, r3
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	2201      	movs	r2, #1
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	69d2      	ldr	r2, [r2, #28]
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b087      	sub	sp, #28
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
 8006cba:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3360      	adds	r3, #96	@ 0x60
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	611a      	str	r2, [r3, #16]
}
 8006d14:	bf00      	nop
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3360      	adds	r3, #96	@ 0x60
 8006d30:	461a      	mov	r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	431a      	orrs	r2, r3
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	601a      	str	r2, [r3, #0]
  }
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b087      	sub	sp, #28
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3330      	adds	r3, #48	@ 0x30
 8006d66:	461a      	mov	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	0a1b      	lsrs	r3, r3, #8
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	f003 030c 	and.w	r3, r3, #12
 8006d72:	4413      	add	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	211f      	movs	r1, #31
 8006d82:	fa01 f303 	lsl.w	r3, r1, r3
 8006d86:	43db      	mvns	r3, r3
 8006d88:	401a      	ands	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0e9b      	lsrs	r3, r3, #26
 8006d8e:	f003 011f 	and.w	r1, r3, #31
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006da2:	bf00      	nop
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b087      	sub	sp, #28
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3314      	adds	r3, #20
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	0e5b      	lsrs	r3, r3, #25
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	4413      	add	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	0d1b      	lsrs	r3, r3, #20
 8006dd6:	f003 031f 	and.w	r3, r3, #31
 8006dda:	2107      	movs	r1, #7
 8006ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	0d1b      	lsrs	r3, r3, #20
 8006de8:	f003 031f 	and.w	r3, r3, #31
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	fa01 f303 	lsl.w	r3, r1, r3
 8006df2:	431a      	orrs	r2, r3
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006df8:	bf00      	nop
 8006dfa:	371c      	adds	r7, #28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	401a      	ands	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f003 0318 	and.w	r3, r3, #24
 8006e26:	4908      	ldr	r1, [pc, #32]	@ (8006e48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006e28:	40d9      	lsrs	r1, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	400b      	ands	r3, r1
 8006e2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	000fffff 	.word	0x000fffff

08006e4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	4b04      	ldr	r3, [pc, #16]	@ (8006e6c <LL_ADC_DisableDeepPowerDown+0x20>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6093      	str	r3, [r2, #8]
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	5fffffc0 	.word	0x5fffffc0

08006e70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e84:	d101      	bne.n	8006e8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	4b05      	ldr	r3, [pc, #20]	@ (8006ebc <LL_ADC_EnableInternalRegulator+0x24>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	6fffffc0 	.word	0x6fffffc0

08006ec0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ed4:	d101      	bne.n	8006eda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <LL_ADC_IsEnabled+0x18>
 8006efc:	2301      	movs	r3, #1
 8006efe:	e000      	b.n	8006f02 <LL_ADC_IsEnabled+0x1a>
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d101      	bne.n	8006f26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d101      	bne.n	8006f4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006f5c:	b590      	push	{r4, r7, lr}
 8006f5e:	b089      	sub	sp, #36	@ 0x24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e18f      	b.n	8007296 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d109      	bne.n	8006f98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff f969 	bl	800625c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff ff67 	bl	8006e70 <LL_ADC_IsDeepPowerDownEnabled>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff ff4d 	bl	8006e4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff ff82 	bl	8006ec0 <LL_ADC_IsInternalRegulatorEnabled>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d114      	bne.n	8006fec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff ff66 	bl	8006e98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006fcc:	4b87      	ldr	r3, [pc, #540]	@ (80071ec <HAL_ADC_Init+0x290>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	099b      	lsrs	r3, r3, #6
 8006fd2:	4a87      	ldr	r2, [pc, #540]	@ (80071f0 <HAL_ADC_Init+0x294>)
 8006fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006fde:	e002      	b.n	8006fe6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f9      	bne.n	8006fe0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7ff ff65 	bl	8006ec0 <LL_ADC_IsInternalRegulatorEnabled>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10d      	bne.n	8007018 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007000:	f043 0210 	orr.w	r2, r3, #16
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700c:	f043 0201 	orr.w	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff ff76 	bl	8006f0e <LL_ADC_REG_IsConversionOngoing>
 8007022:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 8129 	bne.w	8007284 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f040 8125 	bne.w	8007284 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800703e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007042:	f043 0202 	orr.w	r2, r3, #2
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff ff4a 	bl	8006ee8 <LL_ADC_IsEnabled>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d136      	bne.n	80070c8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a65      	ldr	r2, [pc, #404]	@ (80071f4 <HAL_ADC_Init+0x298>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d004      	beq.n	800706e <HAL_ADC_Init+0x112>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a63      	ldr	r2, [pc, #396]	@ (80071f8 <HAL_ADC_Init+0x29c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d10e      	bne.n	800708c <HAL_ADC_Init+0x130>
 800706e:	4861      	ldr	r0, [pc, #388]	@ (80071f4 <HAL_ADC_Init+0x298>)
 8007070:	f7ff ff3a 	bl	8006ee8 <LL_ADC_IsEnabled>
 8007074:	4604      	mov	r4, r0
 8007076:	4860      	ldr	r0, [pc, #384]	@ (80071f8 <HAL_ADC_Init+0x29c>)
 8007078:	f7ff ff36 	bl	8006ee8 <LL_ADC_IsEnabled>
 800707c:	4603      	mov	r3, r0
 800707e:	4323      	orrs	r3, r4
 8007080:	2b00      	cmp	r3, #0
 8007082:	bf0c      	ite	eq
 8007084:	2301      	moveq	r3, #1
 8007086:	2300      	movne	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	e008      	b.n	800709e <HAL_ADC_Init+0x142>
 800708c:	485b      	ldr	r0, [pc, #364]	@ (80071fc <HAL_ADC_Init+0x2a0>)
 800708e:	f7ff ff2b 	bl	8006ee8 <LL_ADC_IsEnabled>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	bf0c      	ite	eq
 8007098:	2301      	moveq	r3, #1
 800709a:	2300      	movne	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d012      	beq.n	80070c8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a53      	ldr	r2, [pc, #332]	@ (80071f4 <HAL_ADC_Init+0x298>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d004      	beq.n	80070b6 <HAL_ADC_Init+0x15a>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a51      	ldr	r2, [pc, #324]	@ (80071f8 <HAL_ADC_Init+0x29c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d101      	bne.n	80070ba <HAL_ADC_Init+0x15e>
 80070b6:	4a52      	ldr	r2, [pc, #328]	@ (8007200 <HAL_ADC_Init+0x2a4>)
 80070b8:	e000      	b.n	80070bc <HAL_ADC_Init+0x160>
 80070ba:	4a52      	ldr	r2, [pc, #328]	@ (8007204 <HAL_ADC_Init+0x2a8>)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	f7ff fd8c 	bl	8006be0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80070c8:	f7ff fd7e 	bl	8006bc8 <HAL_GetREVID>
 80070cc:	4603      	mov	r3, r0
 80070ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d914      	bls.n	8007100 <HAL_ADC_Init+0x1a4>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	2b10      	cmp	r3, #16
 80070dc:	d110      	bne.n	8007100 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	7d5b      	ldrb	r3, [r3, #21]
 80070e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80070e8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80070ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	7f1b      	ldrb	r3, [r3, #28]
 80070f4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80070f6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80070f8:	f043 030c 	orr.w	r3, r3, #12
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	e00d      	b.n	800711c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	7d5b      	ldrb	r3, [r3, #21]
 8007104:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800710a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007110:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	7f1b      	ldrb	r3, [r3, #28]
 8007116:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007118:	4313      	orrs	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	7f1b      	ldrb	r3, [r3, #28]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d106      	bne.n	8007132 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	3b01      	subs	r3, #1
 800712a:	045b      	lsls	r3, r3, #17
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	4313      	orrs	r3, r2
 8007130:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007146:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	4313      	orrs	r3, r2
 800714c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	4b2c      	ldr	r3, [pc, #176]	@ (8007208 <HAL_ADC_Init+0x2ac>)
 8007156:	4013      	ands	r3, r2
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	69b9      	ldr	r1, [r7, #24]
 800715e:	430b      	orrs	r3, r1
 8007160:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff fed1 	bl	8006f0e <LL_ADC_REG_IsConversionOngoing>
 800716c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff fede 	bl	8006f34 <LL_ADC_INJ_IsConversionOngoing>
 8007178:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d15f      	bne.n	8007240 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d15c      	bne.n	8007240 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7d1b      	ldrb	r3, [r3, #20]
 800718a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8007190:	4313      	orrs	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	4b1c      	ldr	r3, [pc, #112]	@ (800720c <HAL_ADC_Init+0x2b0>)
 800719c:	4013      	ands	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6812      	ldr	r2, [r2, #0]
 80071a2:	69b9      	ldr	r1, [r7, #24]
 80071a4:	430b      	orrs	r3, r1
 80071a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d130      	bne.n	8007214 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691a      	ldr	r2, [r3, #16]
 80071be:	4b14      	ldr	r3, [pc, #80]	@ (8007210 <HAL_ADC_Init+0x2b4>)
 80071c0:	4013      	ands	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071c6:	3a01      	subs	r2, #1
 80071c8:	0411      	lsls	r1, r2, #16
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80071ce:	4311      	orrs	r1, r2
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80071d4:	4311      	orrs	r1, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80071da:	430a      	orrs	r2, r1
 80071dc:	431a      	orrs	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	611a      	str	r2, [r3, #16]
 80071e8:	e01c      	b.n	8007224 <HAL_ADC_Init+0x2c8>
 80071ea:	bf00      	nop
 80071ec:	24000000 	.word	0x24000000
 80071f0:	053e2d63 	.word	0x053e2d63
 80071f4:	40022000 	.word	0x40022000
 80071f8:	40022100 	.word	0x40022100
 80071fc:	58026000 	.word	0x58026000
 8007200:	40022300 	.word	0x40022300
 8007204:	58026300 	.word	0x58026300
 8007208:	fff0c003 	.word	0xfff0c003
 800720c:	ffffbffc 	.word	0xffffbffc
 8007210:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691a      	ldr	r2, [r3, #16]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0201 	bic.w	r2, r2, #1
 8007222:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fb20 	bl	8007880 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d10c      	bne.n	8007262 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724e:	f023 010f 	bic.w	r1, r3, #15
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	1e5a      	subs	r2, r3, #1
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007260:	e007      	b.n	8007272 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 020f 	bic.w	r2, r2, #15
 8007270:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007276:	f023 0303 	bic.w	r3, r3, #3
 800727a:	f043 0201 	orr.w	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	655a      	str	r2, [r3, #84]	@ 0x54
 8007282:	e007      	b.n	8007294 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007288:	f043 0210 	orr.w	r2, r3, #16
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007294:	7ffb      	ldrb	r3, [r7, #31]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3724      	adds	r7, #36	@ 0x24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd90      	pop	{r4, r7, pc}
 800729e:	bf00      	nop

080072a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80072a0:	b590      	push	{r4, r7, lr}
 80072a2:	b08d      	sub	sp, #52	@ 0x34
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	4a65      	ldr	r2, [pc, #404]	@ (8007450 <HAL_ADC_ConfigChannel+0x1b0>)
 80072ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_ADC_ConfigChannel+0x2a>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e2c7      	b.n	800785a <HAL_ADC_ConfigChannel+0x5ba>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff fe19 	bl	8006f0e <LL_ADC_REG_IsConversionOngoing>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f040 82ac 	bne.w	800783c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	db2c      	blt.n	8007346 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d108      	bne.n	800730a <HAL_ADC_ConfigChannel+0x6a>
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	0e9b      	lsrs	r3, r3, #26
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	2201      	movs	r2, #1
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	e016      	b.n	8007338 <HAL_ADC_ConfigChannel+0x98>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	fa93 f3a3 	rbit	r3, r3
 8007316:	613b      	str	r3, [r7, #16]
  return result;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8007322:	2320      	movs	r3, #32
 8007324:	e003      	b.n	800732e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	fab3 f383 	clz	r3, r3
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2201      	movs	r2, #1
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6812      	ldr	r2, [r2, #0]
 800733c:	69d1      	ldr	r1, [r2, #28]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	430b      	orrs	r3, r1
 8007344:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6818      	ldr	r0, [r3, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	6859      	ldr	r1, [r3, #4]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	f7ff fcff 	bl	8006d56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff fdd6 	bl	8006f0e <LL_ADC_REG_IsConversionOngoing>
 8007362:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff fde3 	bl	8006f34 <LL_ADC_INJ_IsConversionOngoing>
 800736e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007372:	2b00      	cmp	r3, #0
 8007374:	f040 80b8 	bne.w	80074e8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737a:	2b00      	cmp	r3, #0
 800737c:	f040 80b4 	bne.w	80074e8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	6819      	ldr	r1, [r3, #0]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	461a      	mov	r2, r3
 800738e:	f7ff fd0e 	bl	8006dae <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007392:	4b30      	ldr	r3, [pc, #192]	@ (8007454 <HAL_ADC_ConfigChannel+0x1b4>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800739a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800739e:	d10b      	bne.n	80073b8 <HAL_ADC_ConfigChannel+0x118>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	695a      	ldr	r2, [r3, #20]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	089b      	lsrs	r3, r3, #2
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	fa02 f303 	lsl.w	r3, r2, r3
 80073b6:	e01d      	b.n	80073f4 <HAL_ADC_ConfigChannel+0x154>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f003 0310 	and.w	r3, r3, #16
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <HAL_ADC_ConfigChannel+0x13e>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	695a      	ldr	r2, [r3, #20]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	089b      	lsrs	r3, r3, #2
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	fa02 f303 	lsl.w	r3, r2, r3
 80073dc:	e00a      	b.n	80073f4 <HAL_ADC_ConfigChannel+0x154>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	695a      	ldr	r2, [r3, #20]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	089b      	lsrs	r3, r3, #2
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	fa02 f303 	lsl.w	r3, r2, r3
 80073f4:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d02c      	beq.n	8007458 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6919      	ldr	r1, [r3, #16]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	f7ff fc4f 	bl	8006cae <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6818      	ldr	r0, [r3, #0]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	6919      	ldr	r1, [r3, #16]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	7e5b      	ldrb	r3, [r3, #25]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d102      	bne.n	8007426 <HAL_ADC_ConfigChannel+0x186>
 8007420:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007424:	e000      	b.n	8007428 <HAL_ADC_ConfigChannel+0x188>
 8007426:	2300      	movs	r3, #0
 8007428:	461a      	mov	r2, r3
 800742a:	f7ff fc79 	bl	8006d20 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6919      	ldr	r1, [r3, #16]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	7e1b      	ldrb	r3, [r3, #24]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d102      	bne.n	8007444 <HAL_ADC_ConfigChannel+0x1a4>
 800743e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007442:	e000      	b.n	8007446 <HAL_ADC_ConfigChannel+0x1a6>
 8007444:	2300      	movs	r3, #0
 8007446:	461a      	mov	r2, r3
 8007448:	f7ff fc51 	bl	8006cee <LL_ADC_SetDataRightShift>
 800744c:	e04c      	b.n	80074e8 <HAL_ADC_ConfigChannel+0x248>
 800744e:	bf00      	nop
 8007450:	47ff0000 	.word	0x47ff0000
 8007454:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800745e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	069b      	lsls	r3, r3, #26
 8007468:	429a      	cmp	r2, r3
 800746a:	d107      	bne.n	800747c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800747a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007482:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	069b      	lsls	r3, r3, #26
 800748c:	429a      	cmp	r2, r3
 800748e:	d107      	bne.n	80074a0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800749e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	069b      	lsls	r3, r3, #26
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d107      	bne.n	80074c4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80074c2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	069b      	lsls	r3, r3, #26
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d107      	bne.n	80074e8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80074e6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fcfb 	bl	8006ee8 <LL_ADC_IsEnabled>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 81aa 	bne.w	800784e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6819      	ldr	r1, [r3, #0]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	461a      	mov	r2, r3
 8007508:	f7ff fc7c 	bl	8006e04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	4a87      	ldr	r2, [pc, #540]	@ (8007730 <HAL_ADC_ConfigChannel+0x490>)
 8007512:	4293      	cmp	r3, r2
 8007514:	f040 809a 	bne.w	800764c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4984      	ldr	r1, [pc, #528]	@ (8007734 <HAL_ADC_ConfigChannel+0x494>)
 8007522:	428b      	cmp	r3, r1
 8007524:	d147      	bne.n	80075b6 <HAL_ADC_ConfigChannel+0x316>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4983      	ldr	r1, [pc, #524]	@ (8007738 <HAL_ADC_ConfigChannel+0x498>)
 800752c:	428b      	cmp	r3, r1
 800752e:	d040      	beq.n	80075b2 <HAL_ADC_ConfigChannel+0x312>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4981      	ldr	r1, [pc, #516]	@ (800773c <HAL_ADC_ConfigChannel+0x49c>)
 8007536:	428b      	cmp	r3, r1
 8007538:	d039      	beq.n	80075ae <HAL_ADC_ConfigChannel+0x30e>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4980      	ldr	r1, [pc, #512]	@ (8007740 <HAL_ADC_ConfigChannel+0x4a0>)
 8007540:	428b      	cmp	r3, r1
 8007542:	d032      	beq.n	80075aa <HAL_ADC_ConfigChannel+0x30a>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	497e      	ldr	r1, [pc, #504]	@ (8007744 <HAL_ADC_ConfigChannel+0x4a4>)
 800754a:	428b      	cmp	r3, r1
 800754c:	d02b      	beq.n	80075a6 <HAL_ADC_ConfigChannel+0x306>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	497d      	ldr	r1, [pc, #500]	@ (8007748 <HAL_ADC_ConfigChannel+0x4a8>)
 8007554:	428b      	cmp	r3, r1
 8007556:	d024      	beq.n	80075a2 <HAL_ADC_ConfigChannel+0x302>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	497b      	ldr	r1, [pc, #492]	@ (800774c <HAL_ADC_ConfigChannel+0x4ac>)
 800755e:	428b      	cmp	r3, r1
 8007560:	d01d      	beq.n	800759e <HAL_ADC_ConfigChannel+0x2fe>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	497a      	ldr	r1, [pc, #488]	@ (8007750 <HAL_ADC_ConfigChannel+0x4b0>)
 8007568:	428b      	cmp	r3, r1
 800756a:	d016      	beq.n	800759a <HAL_ADC_ConfigChannel+0x2fa>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4978      	ldr	r1, [pc, #480]	@ (8007754 <HAL_ADC_ConfigChannel+0x4b4>)
 8007572:	428b      	cmp	r3, r1
 8007574:	d00f      	beq.n	8007596 <HAL_ADC_ConfigChannel+0x2f6>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4977      	ldr	r1, [pc, #476]	@ (8007758 <HAL_ADC_ConfigChannel+0x4b8>)
 800757c:	428b      	cmp	r3, r1
 800757e:	d008      	beq.n	8007592 <HAL_ADC_ConfigChannel+0x2f2>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4975      	ldr	r1, [pc, #468]	@ (800775c <HAL_ADC_ConfigChannel+0x4bc>)
 8007586:	428b      	cmp	r3, r1
 8007588:	d101      	bne.n	800758e <HAL_ADC_ConfigChannel+0x2ee>
 800758a:	4b75      	ldr	r3, [pc, #468]	@ (8007760 <HAL_ADC_ConfigChannel+0x4c0>)
 800758c:	e05a      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 800758e:	2300      	movs	r3, #0
 8007590:	e058      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 8007592:	4b74      	ldr	r3, [pc, #464]	@ (8007764 <HAL_ADC_ConfigChannel+0x4c4>)
 8007594:	e056      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 8007596:	4b74      	ldr	r3, [pc, #464]	@ (8007768 <HAL_ADC_ConfigChannel+0x4c8>)
 8007598:	e054      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 800759a:	4b6e      	ldr	r3, [pc, #440]	@ (8007754 <HAL_ADC_ConfigChannel+0x4b4>)
 800759c:	e052      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 800759e:	4b6c      	ldr	r3, [pc, #432]	@ (8007750 <HAL_ADC_ConfigChannel+0x4b0>)
 80075a0:	e050      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 80075a2:	4b72      	ldr	r3, [pc, #456]	@ (800776c <HAL_ADC_ConfigChannel+0x4cc>)
 80075a4:	e04e      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 80075a6:	4b72      	ldr	r3, [pc, #456]	@ (8007770 <HAL_ADC_ConfigChannel+0x4d0>)
 80075a8:	e04c      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 80075aa:	4b72      	ldr	r3, [pc, #456]	@ (8007774 <HAL_ADC_ConfigChannel+0x4d4>)
 80075ac:	e04a      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 80075ae:	4b72      	ldr	r3, [pc, #456]	@ (8007778 <HAL_ADC_ConfigChannel+0x4d8>)
 80075b0:	e048      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e046      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4970      	ldr	r1, [pc, #448]	@ (800777c <HAL_ADC_ConfigChannel+0x4dc>)
 80075bc:	428b      	cmp	r3, r1
 80075be:	d140      	bne.n	8007642 <HAL_ADC_ConfigChannel+0x3a2>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	495c      	ldr	r1, [pc, #368]	@ (8007738 <HAL_ADC_ConfigChannel+0x498>)
 80075c6:	428b      	cmp	r3, r1
 80075c8:	d039      	beq.n	800763e <HAL_ADC_ConfigChannel+0x39e>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	495b      	ldr	r1, [pc, #364]	@ (800773c <HAL_ADC_ConfigChannel+0x49c>)
 80075d0:	428b      	cmp	r3, r1
 80075d2:	d032      	beq.n	800763a <HAL_ADC_ConfigChannel+0x39a>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4959      	ldr	r1, [pc, #356]	@ (8007740 <HAL_ADC_ConfigChannel+0x4a0>)
 80075da:	428b      	cmp	r3, r1
 80075dc:	d02b      	beq.n	8007636 <HAL_ADC_ConfigChannel+0x396>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4958      	ldr	r1, [pc, #352]	@ (8007744 <HAL_ADC_ConfigChannel+0x4a4>)
 80075e4:	428b      	cmp	r3, r1
 80075e6:	d024      	beq.n	8007632 <HAL_ADC_ConfigChannel+0x392>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4956      	ldr	r1, [pc, #344]	@ (8007748 <HAL_ADC_ConfigChannel+0x4a8>)
 80075ee:	428b      	cmp	r3, r1
 80075f0:	d01d      	beq.n	800762e <HAL_ADC_ConfigChannel+0x38e>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4955      	ldr	r1, [pc, #340]	@ (800774c <HAL_ADC_ConfigChannel+0x4ac>)
 80075f8:	428b      	cmp	r3, r1
 80075fa:	d016      	beq.n	800762a <HAL_ADC_ConfigChannel+0x38a>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4953      	ldr	r1, [pc, #332]	@ (8007750 <HAL_ADC_ConfigChannel+0x4b0>)
 8007602:	428b      	cmp	r3, r1
 8007604:	d00f      	beq.n	8007626 <HAL_ADC_ConfigChannel+0x386>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4952      	ldr	r1, [pc, #328]	@ (8007754 <HAL_ADC_ConfigChannel+0x4b4>)
 800760c:	428b      	cmp	r3, r1
 800760e:	d008      	beq.n	8007622 <HAL_ADC_ConfigChannel+0x382>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4951      	ldr	r1, [pc, #324]	@ (800775c <HAL_ADC_ConfigChannel+0x4bc>)
 8007616:	428b      	cmp	r3, r1
 8007618:	d101      	bne.n	800761e <HAL_ADC_ConfigChannel+0x37e>
 800761a:	4b51      	ldr	r3, [pc, #324]	@ (8007760 <HAL_ADC_ConfigChannel+0x4c0>)
 800761c:	e012      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 800761e:	2300      	movs	r3, #0
 8007620:	e010      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 8007622:	4b51      	ldr	r3, [pc, #324]	@ (8007768 <HAL_ADC_ConfigChannel+0x4c8>)
 8007624:	e00e      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 8007626:	4b4b      	ldr	r3, [pc, #300]	@ (8007754 <HAL_ADC_ConfigChannel+0x4b4>)
 8007628:	e00c      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 800762a:	4b49      	ldr	r3, [pc, #292]	@ (8007750 <HAL_ADC_ConfigChannel+0x4b0>)
 800762c:	e00a      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 800762e:	4b4f      	ldr	r3, [pc, #316]	@ (800776c <HAL_ADC_ConfigChannel+0x4cc>)
 8007630:	e008      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 8007632:	4b4f      	ldr	r3, [pc, #316]	@ (8007770 <HAL_ADC_ConfigChannel+0x4d0>)
 8007634:	e006      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 8007636:	4b4f      	ldr	r3, [pc, #316]	@ (8007774 <HAL_ADC_ConfigChannel+0x4d4>)
 8007638:	e004      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 800763a:	4b4f      	ldr	r3, [pc, #316]	@ (8007778 <HAL_ADC_ConfigChannel+0x4d8>)
 800763c:	e002      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 800763e:	2301      	movs	r3, #1
 8007640:	e000      	b.n	8007644 <HAL_ADC_ConfigChannel+0x3a4>
 8007642:	2300      	movs	r3, #0
 8007644:	4619      	mov	r1, r3
 8007646:	4610      	mov	r0, r2
 8007648:	f7ff fafe 	bl	8006c48 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	f280 80fc 	bge.w	800784e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a36      	ldr	r2, [pc, #216]	@ (8007734 <HAL_ADC_ConfigChannel+0x494>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d004      	beq.n	800766a <HAL_ADC_ConfigChannel+0x3ca>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a45      	ldr	r2, [pc, #276]	@ (800777c <HAL_ADC_ConfigChannel+0x4dc>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d101      	bne.n	800766e <HAL_ADC_ConfigChannel+0x3ce>
 800766a:	4b45      	ldr	r3, [pc, #276]	@ (8007780 <HAL_ADC_ConfigChannel+0x4e0>)
 800766c:	e000      	b.n	8007670 <HAL_ADC_ConfigChannel+0x3d0>
 800766e:	4b45      	ldr	r3, [pc, #276]	@ (8007784 <HAL_ADC_ConfigChannel+0x4e4>)
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff fadb 	bl	8006c2c <LL_ADC_GetCommonPathInternalCh>
 8007676:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a2d      	ldr	r2, [pc, #180]	@ (8007734 <HAL_ADC_ConfigChannel+0x494>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d004      	beq.n	800768c <HAL_ADC_ConfigChannel+0x3ec>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a3d      	ldr	r2, [pc, #244]	@ (800777c <HAL_ADC_ConfigChannel+0x4dc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d10e      	bne.n	80076aa <HAL_ADC_ConfigChannel+0x40a>
 800768c:	4829      	ldr	r0, [pc, #164]	@ (8007734 <HAL_ADC_ConfigChannel+0x494>)
 800768e:	f7ff fc2b 	bl	8006ee8 <LL_ADC_IsEnabled>
 8007692:	4604      	mov	r4, r0
 8007694:	4839      	ldr	r0, [pc, #228]	@ (800777c <HAL_ADC_ConfigChannel+0x4dc>)
 8007696:	f7ff fc27 	bl	8006ee8 <LL_ADC_IsEnabled>
 800769a:	4603      	mov	r3, r0
 800769c:	4323      	orrs	r3, r4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bf0c      	ite	eq
 80076a2:	2301      	moveq	r3, #1
 80076a4:	2300      	movne	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	e008      	b.n	80076bc <HAL_ADC_ConfigChannel+0x41c>
 80076aa:	4837      	ldr	r0, [pc, #220]	@ (8007788 <HAL_ADC_ConfigChannel+0x4e8>)
 80076ac:	f7ff fc1c 	bl	8006ee8 <LL_ADC_IsEnabled>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	bf0c      	ite	eq
 80076b6:	2301      	moveq	r3, #1
 80076b8:	2300      	movne	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 80b3 	beq.w	8007828 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a31      	ldr	r2, [pc, #196]	@ (800778c <HAL_ADC_ConfigChannel+0x4ec>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d165      	bne.n	8007798 <HAL_ADC_ConfigChannel+0x4f8>
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d160      	bne.n	8007798 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a2b      	ldr	r2, [pc, #172]	@ (8007788 <HAL_ADC_ConfigChannel+0x4e8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	f040 80b6 	bne.w	800784e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a13      	ldr	r2, [pc, #76]	@ (8007734 <HAL_ADC_ConfigChannel+0x494>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d004      	beq.n	80076f6 <HAL_ADC_ConfigChannel+0x456>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a22      	ldr	r2, [pc, #136]	@ (800777c <HAL_ADC_ConfigChannel+0x4dc>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d101      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x45a>
 80076f6:	4a22      	ldr	r2, [pc, #136]	@ (8007780 <HAL_ADC_ConfigChannel+0x4e0>)
 80076f8:	e000      	b.n	80076fc <HAL_ADC_ConfigChannel+0x45c>
 80076fa:	4a22      	ldr	r2, [pc, #136]	@ (8007784 <HAL_ADC_ConfigChannel+0x4e4>)
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007702:	4619      	mov	r1, r3
 8007704:	4610      	mov	r0, r2
 8007706:	f7ff fa7e 	bl	8006c06 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800770a:	4b21      	ldr	r3, [pc, #132]	@ (8007790 <HAL_ADC_ConfigChannel+0x4f0>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	099b      	lsrs	r3, r3, #6
 8007710:	4a20      	ldr	r2, [pc, #128]	@ (8007794 <HAL_ADC_ConfigChannel+0x4f4>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	3301      	adds	r3, #1
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800771e:	e002      	b.n	8007726 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3b01      	subs	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f9      	bne.n	8007720 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800772c:	e08f      	b.n	800784e <HAL_ADC_ConfigChannel+0x5ae>
 800772e:	bf00      	nop
 8007730:	47ff0000 	.word	0x47ff0000
 8007734:	40022000 	.word	0x40022000
 8007738:	04300002 	.word	0x04300002
 800773c:	08600004 	.word	0x08600004
 8007740:	0c900008 	.word	0x0c900008
 8007744:	10c00010 	.word	0x10c00010
 8007748:	14f00020 	.word	0x14f00020
 800774c:	2a000400 	.word	0x2a000400
 8007750:	2e300800 	.word	0x2e300800
 8007754:	32601000 	.word	0x32601000
 8007758:	43210000 	.word	0x43210000
 800775c:	4b840000 	.word	0x4b840000
 8007760:	4fb80000 	.word	0x4fb80000
 8007764:	47520000 	.word	0x47520000
 8007768:	36902000 	.word	0x36902000
 800776c:	25b00200 	.word	0x25b00200
 8007770:	21800100 	.word	0x21800100
 8007774:	1d500080 	.word	0x1d500080
 8007778:	19200040 	.word	0x19200040
 800777c:	40022100 	.word	0x40022100
 8007780:	40022300 	.word	0x40022300
 8007784:	58026300 	.word	0x58026300
 8007788:	58026000 	.word	0x58026000
 800778c:	cb840000 	.word	0xcb840000
 8007790:	24000000 	.word	0x24000000
 8007794:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a31      	ldr	r2, [pc, #196]	@ (8007864 <HAL_ADC_ConfigChannel+0x5c4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d11e      	bne.n	80077e0 <HAL_ADC_ConfigChannel+0x540>
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d119      	bne.n	80077e0 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007868 <HAL_ADC_ConfigChannel+0x5c8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d14b      	bne.n	800784e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a2c      	ldr	r2, [pc, #176]	@ (800786c <HAL_ADC_ConfigChannel+0x5cc>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <HAL_ADC_ConfigChannel+0x52a>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007870 <HAL_ADC_ConfigChannel+0x5d0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d101      	bne.n	80077ce <HAL_ADC_ConfigChannel+0x52e>
 80077ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007874 <HAL_ADC_ConfigChannel+0x5d4>)
 80077cc:	e000      	b.n	80077d0 <HAL_ADC_ConfigChannel+0x530>
 80077ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007878 <HAL_ADC_ConfigChannel+0x5d8>)
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077d6:	4619      	mov	r1, r3
 80077d8:	4610      	mov	r0, r2
 80077da:	f7ff fa14 	bl	8006c06 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077de:	e036      	b.n	800784e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a25      	ldr	r2, [pc, #148]	@ (800787c <HAL_ADC_ConfigChannel+0x5dc>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d131      	bne.n	800784e <HAL_ADC_ConfigChannel+0x5ae>
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d12c      	bne.n	800784e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007868 <HAL_ADC_ConfigChannel+0x5c8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d127      	bne.n	800784e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1a      	ldr	r2, [pc, #104]	@ (800786c <HAL_ADC_ConfigChannel+0x5cc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d004      	beq.n	8007812 <HAL_ADC_ConfigChannel+0x572>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a18      	ldr	r2, [pc, #96]	@ (8007870 <HAL_ADC_ConfigChannel+0x5d0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d101      	bne.n	8007816 <HAL_ADC_ConfigChannel+0x576>
 8007812:	4a18      	ldr	r2, [pc, #96]	@ (8007874 <HAL_ADC_ConfigChannel+0x5d4>)
 8007814:	e000      	b.n	8007818 <HAL_ADC_ConfigChannel+0x578>
 8007816:	4a18      	ldr	r2, [pc, #96]	@ (8007878 <HAL_ADC_ConfigChannel+0x5d8>)
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f7ff f9f0 	bl	8006c06 <LL_ADC_SetCommonPathInternalCh>
 8007826:	e012      	b.n	800784e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782c:	f043 0220 	orr.w	r2, r3, #32
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800783a:	e008      	b.n	800784e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007840:	f043 0220 	orr.w	r2, r3, #32
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8007856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800785a:	4618      	mov	r0, r3
 800785c:	3734      	adds	r7, #52	@ 0x34
 800785e:	46bd      	mov	sp, r7
 8007860:	bd90      	pop	{r4, r7, pc}
 8007862:	bf00      	nop
 8007864:	c7520000 	.word	0xc7520000
 8007868:	58026000 	.word	0x58026000
 800786c:	40022000 	.word	0x40022000
 8007870:	40022100 	.word	0x40022100
 8007874:	40022300 	.word	0x40022300
 8007878:	58026300 	.word	0x58026300
 800787c:	cfb80000 	.word	0xcfb80000

08007880 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a7a      	ldr	r2, [pc, #488]	@ (8007a78 <ADC_ConfigureBoostMode+0x1f8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d004      	beq.n	800789c <ADC_ConfigureBoostMode+0x1c>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a79      	ldr	r2, [pc, #484]	@ (8007a7c <ADC_ConfigureBoostMode+0x1fc>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d109      	bne.n	80078b0 <ADC_ConfigureBoostMode+0x30>
 800789c:	4b78      	ldr	r3, [pc, #480]	@ (8007a80 <ADC_ConfigureBoostMode+0x200>)
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	e008      	b.n	80078c2 <ADC_ConfigureBoostMode+0x42>
 80078b0:	4b74      	ldr	r3, [pc, #464]	@ (8007a84 <ADC_ConfigureBoostMode+0x204>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bf14      	ite	ne
 80078bc:	2301      	movne	r3, #1
 80078be:	2300      	moveq	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01c      	beq.n	8007900 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80078c6:	f001 fc89 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 80078ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078d4:	d010      	beq.n	80078f8 <ADC_ConfigureBoostMode+0x78>
 80078d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078da:	d873      	bhi.n	80079c4 <ADC_ConfigureBoostMode+0x144>
 80078dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e0:	d002      	beq.n	80078e8 <ADC_ConfigureBoostMode+0x68>
 80078e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078e6:	d16d      	bne.n	80079c4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	0c1b      	lsrs	r3, r3, #16
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f4:	60fb      	str	r3, [r7, #12]
        break;
 80078f6:	e068      	b.n	80079ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	089b      	lsrs	r3, r3, #2
 80078fc:	60fb      	str	r3, [r7, #12]
        break;
 80078fe:	e064      	b.n	80079ca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007900:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007904:	f04f 0100 	mov.w	r1, #0
 8007908:	f002 fece 	bl	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800790c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8007916:	d051      	beq.n	80079bc <ADC_ConfigureBoostMode+0x13c>
 8007918:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800791c:	d854      	bhi.n	80079c8 <ADC_ConfigureBoostMode+0x148>
 800791e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8007922:	d047      	beq.n	80079b4 <ADC_ConfigureBoostMode+0x134>
 8007924:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8007928:	d84e      	bhi.n	80079c8 <ADC_ConfigureBoostMode+0x148>
 800792a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800792e:	d03d      	beq.n	80079ac <ADC_ConfigureBoostMode+0x12c>
 8007930:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8007934:	d848      	bhi.n	80079c8 <ADC_ConfigureBoostMode+0x148>
 8007936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800793a:	d033      	beq.n	80079a4 <ADC_ConfigureBoostMode+0x124>
 800793c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007940:	d842      	bhi.n	80079c8 <ADC_ConfigureBoostMode+0x148>
 8007942:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8007946:	d029      	beq.n	800799c <ADC_ConfigureBoostMode+0x11c>
 8007948:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800794c:	d83c      	bhi.n	80079c8 <ADC_ConfigureBoostMode+0x148>
 800794e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007952:	d01a      	beq.n	800798a <ADC_ConfigureBoostMode+0x10a>
 8007954:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007958:	d836      	bhi.n	80079c8 <ADC_ConfigureBoostMode+0x148>
 800795a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800795e:	d014      	beq.n	800798a <ADC_ConfigureBoostMode+0x10a>
 8007960:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007964:	d830      	bhi.n	80079c8 <ADC_ConfigureBoostMode+0x148>
 8007966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800796a:	d00e      	beq.n	800798a <ADC_ConfigureBoostMode+0x10a>
 800796c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007970:	d82a      	bhi.n	80079c8 <ADC_ConfigureBoostMode+0x148>
 8007972:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007976:	d008      	beq.n	800798a <ADC_ConfigureBoostMode+0x10a>
 8007978:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800797c:	d824      	bhi.n	80079c8 <ADC_ConfigureBoostMode+0x148>
 800797e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007982:	d002      	beq.n	800798a <ADC_ConfigureBoostMode+0x10a>
 8007984:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007988:	d11e      	bne.n	80079c8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	0c9b      	lsrs	r3, r3, #18
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	fbb2 f3f3 	udiv	r3, r2, r3
 8007998:	60fb      	str	r3, [r7, #12]
        break;
 800799a:	e016      	b.n	80079ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	091b      	lsrs	r3, r3, #4
 80079a0:	60fb      	str	r3, [r7, #12]
        break;
 80079a2:	e012      	b.n	80079ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	60fb      	str	r3, [r7, #12]
        break;
 80079aa:	e00e      	b.n	80079ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	099b      	lsrs	r3, r3, #6
 80079b0:	60fb      	str	r3, [r7, #12]
        break;
 80079b2:	e00a      	b.n	80079ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	09db      	lsrs	r3, r3, #7
 80079b8:	60fb      	str	r3, [r7, #12]
        break;
 80079ba:	e006      	b.n	80079ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	0a1b      	lsrs	r3, r3, #8
 80079c0:	60fb      	str	r3, [r7, #12]
        break;
 80079c2:	e002      	b.n	80079ca <ADC_ConfigureBoostMode+0x14a>
        break;
 80079c4:	bf00      	nop
 80079c6:	e000      	b.n	80079ca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80079c8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80079ca:	f7ff f8fd 	bl	8006bc8 <HAL_GetREVID>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d815      	bhi.n	8007a04 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4a2b      	ldr	r2, [pc, #172]	@ (8007a88 <ADC_ConfigureBoostMode+0x208>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d908      	bls.n	80079f2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80079f0:	e03e      	b.n	8007a70 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a00:	609a      	str	r2, [r3, #8]
}
 8007a02:	e035      	b.n	8007a70 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	085b      	lsrs	r3, r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007a8c <ADC_ConfigureBoostMode+0x20c>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d808      	bhi.n	8007a24 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007a20:	609a      	str	r2, [r3, #8]
}
 8007a22:	e025      	b.n	8007a70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4a1a      	ldr	r2, [pc, #104]	@ (8007a90 <ADC_ConfigureBoostMode+0x210>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d80a      	bhi.n	8007a42 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a3e:	609a      	str	r2, [r3, #8]
}
 8007a40:	e016      	b.n	8007a70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4a13      	ldr	r2, [pc, #76]	@ (8007a94 <ADC_ConfigureBoostMode+0x214>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d80a      	bhi.n	8007a60 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a5c:	609a      	str	r2, [r3, #8]
}
 8007a5e:	e007      	b.n	8007a70 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007a6e:	609a      	str	r2, [r3, #8]
}
 8007a70:	bf00      	nop
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	40022000 	.word	0x40022000
 8007a7c:	40022100 	.word	0x40022100
 8007a80:	40022300 	.word	0x40022300
 8007a84:	58026300 	.word	0x58026300
 8007a88:	01312d00 	.word	0x01312d00
 8007a8c:	005f5e10 	.word	0x005f5e10
 8007a90:	00bebc20 	.word	0x00bebc20
 8007a94:	017d7840 	.word	0x017d7840

08007a98 <LL_ADC_IsEnabled>:
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <LL_ADC_IsEnabled+0x18>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <LL_ADC_IsEnabled+0x1a>
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <LL_ADC_REG_IsConversionOngoing>:
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d101      	bne.n	8007ad6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007ae4:	b590      	push	{r4, r7, lr}
 8007ae6:	b09f      	sub	sp, #124	@ 0x7c
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e0be      	b.n	8007c80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a5c      	ldr	r2, [pc, #368]	@ (8007c88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d102      	bne.n	8007b22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8007c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007b1e:	60bb      	str	r3, [r7, #8]
 8007b20:	e001      	b.n	8007b26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007b22:	2300      	movs	r3, #0
 8007b24:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10b      	bne.n	8007b44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b30:	f043 0220 	orr.w	r2, r3, #32
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e09d      	b.n	8007c80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff ffb9 	bl	8007abe <LL_ADC_REG_IsConversionOngoing>
 8007b4c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7ff ffb3 	bl	8007abe <LL_ADC_REG_IsConversionOngoing>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d17f      	bne.n	8007c5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d17c      	bne.n	8007c5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a47      	ldr	r2, [pc, #284]	@ (8007c88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d004      	beq.n	8007b78 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a46      	ldr	r2, [pc, #280]	@ (8007c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d101      	bne.n	8007b7c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007b78:	4b45      	ldr	r3, [pc, #276]	@ (8007c90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007b7a:	e000      	b.n	8007b7e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007b7c:	4b45      	ldr	r3, [pc, #276]	@ (8007c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d039      	beq.n	8007bfc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007b88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	431a      	orrs	r2, r3
 8007b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b98:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a3a      	ldr	r2, [pc, #232]	@ (8007c88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a38      	ldr	r2, [pc, #224]	@ (8007c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d10e      	bne.n	8007bcc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007bae:	4836      	ldr	r0, [pc, #216]	@ (8007c88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007bb0:	f7ff ff72 	bl	8007a98 <LL_ADC_IsEnabled>
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	4835      	ldr	r0, [pc, #212]	@ (8007c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007bb8:	f7ff ff6e 	bl	8007a98 <LL_ADC_IsEnabled>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	4323      	orrs	r3, r4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf0c      	ite	eq
 8007bc4:	2301      	moveq	r3, #1
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	e008      	b.n	8007bde <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8007bcc:	4832      	ldr	r0, [pc, #200]	@ (8007c98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007bce:	f7ff ff63 	bl	8007a98 <LL_ADC_IsEnabled>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bf0c      	ite	eq
 8007bd8:	2301      	moveq	r3, #1
 8007bda:	2300      	movne	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d047      	beq.n	8007c72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	4b2d      	ldr	r3, [pc, #180]	@ (8007c9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	6811      	ldr	r1, [r2, #0]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	6892      	ldr	r2, [r2, #8]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bf8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007bfa:	e03a      	b.n	8007c72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8007c88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d004      	beq.n	8007c1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a1d      	ldr	r2, [pc, #116]	@ (8007c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d10e      	bne.n	8007c3a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007c1c:	481a      	ldr	r0, [pc, #104]	@ (8007c88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007c1e:	f7ff ff3b 	bl	8007a98 <LL_ADC_IsEnabled>
 8007c22:	4604      	mov	r4, r0
 8007c24:	4819      	ldr	r0, [pc, #100]	@ (8007c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007c26:	f7ff ff37 	bl	8007a98 <LL_ADC_IsEnabled>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4323      	orrs	r3, r4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bf0c      	ite	eq
 8007c32:	2301      	moveq	r3, #1
 8007c34:	2300      	movne	r3, #0
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	e008      	b.n	8007c4c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007c3a:	4817      	ldr	r0, [pc, #92]	@ (8007c98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007c3c:	f7ff ff2c 	bl	8007a98 <LL_ADC_IsEnabled>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	bf0c      	ite	eq
 8007c46:	2301      	moveq	r3, #1
 8007c48:	2300      	movne	r3, #0
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d010      	beq.n	8007c72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	4b11      	ldr	r3, [pc, #68]	@ (8007c9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007c56:	4013      	ands	r3, r2
 8007c58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c5a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007c5c:	e009      	b.n	8007c72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c62:	f043 0220 	orr.w	r2, r3, #32
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8007c70:	e000      	b.n	8007c74 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007c72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8007c7c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	377c      	adds	r7, #124	@ 0x7c
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd90      	pop	{r4, r7, pc}
 8007c88:	40022000 	.word	0x40022000
 8007c8c:	40022100 	.word	0x40022100
 8007c90:	40022300 	.word	0x40022300
 8007c94:	58026300 	.word	0x58026300
 8007c98:	58026000 	.word	0x58026000
 8007c9c:	fffff0e0 	.word	0xfffff0e0

08007ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007cc8:	4b06      	ldr	r3, [pc, #24]	@ (8007ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007cce:	4a04      	ldr	r2, [pc, #16]	@ (8007ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	60d3      	str	r3, [r2, #12]
}
 8007cd4:	bf00      	nop
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	e000ed00 	.word	0xe000ed00
 8007ce4:	05fa0000 	.word	0x05fa0000

08007ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007cec:	4b04      	ldr	r3, [pc, #16]	@ (8007d00 <__NVIC_GetPriorityGrouping+0x18>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	0a1b      	lsrs	r3, r3, #8
 8007cf2:	f003 0307 	and.w	r3, r3, #7
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	e000ed00 	.word	0xe000ed00

08007d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	db0b      	blt.n	8007d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	f003 021f 	and.w	r2, r3, #31
 8007d1c:	4907      	ldr	r1, [pc, #28]	@ (8007d3c <__NVIC_EnableIRQ+0x38>)
 8007d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	2001      	movs	r0, #1
 8007d26:	fa00 f202 	lsl.w	r2, r0, r2
 8007d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	e000e100 	.word	0xe000e100

08007d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	6039      	str	r1, [r7, #0]
 8007d4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	db0a      	blt.n	8007d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	490c      	ldr	r1, [pc, #48]	@ (8007d8c <__NVIC_SetPriority+0x4c>)
 8007d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d5e:	0112      	lsls	r2, r2, #4
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	440b      	add	r3, r1
 8007d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d68:	e00a      	b.n	8007d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	4908      	ldr	r1, [pc, #32]	@ (8007d90 <__NVIC_SetPriority+0x50>)
 8007d70:	88fb      	ldrh	r3, [r7, #6]
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	3b04      	subs	r3, #4
 8007d78:	0112      	lsls	r2, r2, #4
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	440b      	add	r3, r1
 8007d7e:	761a      	strb	r2, [r3, #24]
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	e000e100 	.word	0xe000e100
 8007d90:	e000ed00 	.word	0xe000ed00

08007d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b089      	sub	sp, #36	@ 0x24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	f1c3 0307 	rsb	r3, r3, #7
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	bf28      	it	cs
 8007db2:	2304      	movcs	r3, #4
 8007db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	3304      	adds	r3, #4
 8007dba:	2b06      	cmp	r3, #6
 8007dbc:	d902      	bls.n	8007dc4 <NVIC_EncodePriority+0x30>
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	3b03      	subs	r3, #3
 8007dc2:	e000      	b.n	8007dc6 <NVIC_EncodePriority+0x32>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	43da      	mvns	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	401a      	ands	r2, r3
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	fa01 f303 	lsl.w	r3, r1, r3
 8007de6:	43d9      	mvns	r1, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007dec:	4313      	orrs	r3, r2
         );
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3724      	adds	r7, #36	@ 0x24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
	...

08007dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e0c:	d301      	bcc.n	8007e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e00f      	b.n	8007e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e12:	4a0a      	ldr	r2, [pc, #40]	@ (8007e3c <SysTick_Config+0x40>)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e1a:	210f      	movs	r1, #15
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	f7ff ff8e 	bl	8007d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e24:	4b05      	ldr	r3, [pc, #20]	@ (8007e3c <SysTick_Config+0x40>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e2a:	4b04      	ldr	r3, [pc, #16]	@ (8007e3c <SysTick_Config+0x40>)
 8007e2c:	2207      	movs	r2, #7
 8007e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	e000e010 	.word	0xe000e010

08007e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff ff29 	bl	8007ca0 <__NVIC_SetPriorityGrouping>
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b086      	sub	sp, #24
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
 8007e62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007e64:	f7ff ff40 	bl	8007ce8 <__NVIC_GetPriorityGrouping>
 8007e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	6978      	ldr	r0, [r7, #20]
 8007e70:	f7ff ff90 	bl	8007d94 <NVIC_EncodePriority>
 8007e74:	4602      	mov	r2, r0
 8007e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff ff5f 	bl	8007d40 <__NVIC_SetPriority>
}
 8007e82:	bf00      	nop
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	4603      	mov	r3, r0
 8007e92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff ff33 	bl	8007d04 <__NVIC_EnableIRQ>
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff ffa4 	bl	8007dfc <SysTick_Config>
 8007eb4:	4603      	mov	r3, r0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b089      	sub	sp, #36	@ 0x24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007ece:	4b89      	ldr	r3, [pc, #548]	@ (80080f4 <HAL_GPIO_Init+0x234>)
 8007ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ed2:	e194      	b.n	80081fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	2101      	movs	r1, #1
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 8186 	beq.w	80081f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d005      	beq.n	8007f04 <HAL_GPIO_Init+0x44>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d130      	bne.n	8007f66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	2203      	movs	r2, #3
 8007f10:	fa02 f303 	lsl.w	r3, r2, r3
 8007f14:	43db      	mvns	r3, r3
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	fa02 f303 	lsl.w	r3, r2, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f42:	43db      	mvns	r3, r3
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	4013      	ands	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	091b      	lsrs	r3, r3, #4
 8007f50:	f003 0201 	and.w	r2, r3, #1
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d017      	beq.n	8007fa2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	43db      	mvns	r3, r3
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	4013      	ands	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	fa02 f303 	lsl.w	r3, r2, r3
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d123      	bne.n	8007ff6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	08da      	lsrs	r2, r3, #3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3208      	adds	r2, #8
 8007fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	220f      	movs	r2, #15
 8007fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	691a      	ldr	r2, [r3, #16]
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	08da      	lsrs	r2, r3, #3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3208      	adds	r2, #8
 8007ff0:	69b9      	ldr	r1, [r7, #24]
 8007ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	2203      	movs	r2, #3
 8008002:	fa02 f303 	lsl.w	r3, r2, r3
 8008006:	43db      	mvns	r3, r3
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	4013      	ands	r3, r2
 800800c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f003 0203 	and.w	r2, r3, #3
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	fa02 f303 	lsl.w	r3, r2, r3
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	4313      	orrs	r3, r2
 8008022:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 80e0 	beq.w	80081f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008038:	4b2f      	ldr	r3, [pc, #188]	@ (80080f8 <HAL_GPIO_Init+0x238>)
 800803a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800803e:	4a2e      	ldr	r2, [pc, #184]	@ (80080f8 <HAL_GPIO_Init+0x238>)
 8008040:	f043 0302 	orr.w	r3, r3, #2
 8008044:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008048:	4b2b      	ldr	r3, [pc, #172]	@ (80080f8 <HAL_GPIO_Init+0x238>)
 800804a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008056:	4a29      	ldr	r2, [pc, #164]	@ (80080fc <HAL_GPIO_Init+0x23c>)
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	089b      	lsrs	r3, r3, #2
 800805c:	3302      	adds	r3, #2
 800805e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	220f      	movs	r2, #15
 800806e:	fa02 f303 	lsl.w	r3, r2, r3
 8008072:	43db      	mvns	r3, r3
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	4013      	ands	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a20      	ldr	r2, [pc, #128]	@ (8008100 <HAL_GPIO_Init+0x240>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d052      	beq.n	8008128 <HAL_GPIO_Init+0x268>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a1f      	ldr	r2, [pc, #124]	@ (8008104 <HAL_GPIO_Init+0x244>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d031      	beq.n	80080ee <HAL_GPIO_Init+0x22e>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a1e      	ldr	r2, [pc, #120]	@ (8008108 <HAL_GPIO_Init+0x248>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d02b      	beq.n	80080ea <HAL_GPIO_Init+0x22a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a1d      	ldr	r2, [pc, #116]	@ (800810c <HAL_GPIO_Init+0x24c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d025      	beq.n	80080e6 <HAL_GPIO_Init+0x226>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a1c      	ldr	r2, [pc, #112]	@ (8008110 <HAL_GPIO_Init+0x250>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d01f      	beq.n	80080e2 <HAL_GPIO_Init+0x222>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008114 <HAL_GPIO_Init+0x254>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d019      	beq.n	80080de <HAL_GPIO_Init+0x21e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008118 <HAL_GPIO_Init+0x258>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d013      	beq.n	80080da <HAL_GPIO_Init+0x21a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a19      	ldr	r2, [pc, #100]	@ (800811c <HAL_GPIO_Init+0x25c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00d      	beq.n	80080d6 <HAL_GPIO_Init+0x216>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a18      	ldr	r2, [pc, #96]	@ (8008120 <HAL_GPIO_Init+0x260>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d007      	beq.n	80080d2 <HAL_GPIO_Init+0x212>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a17      	ldr	r2, [pc, #92]	@ (8008124 <HAL_GPIO_Init+0x264>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d101      	bne.n	80080ce <HAL_GPIO_Init+0x20e>
 80080ca:	2309      	movs	r3, #9
 80080cc:	e02d      	b.n	800812a <HAL_GPIO_Init+0x26a>
 80080ce:	230a      	movs	r3, #10
 80080d0:	e02b      	b.n	800812a <HAL_GPIO_Init+0x26a>
 80080d2:	2308      	movs	r3, #8
 80080d4:	e029      	b.n	800812a <HAL_GPIO_Init+0x26a>
 80080d6:	2307      	movs	r3, #7
 80080d8:	e027      	b.n	800812a <HAL_GPIO_Init+0x26a>
 80080da:	2306      	movs	r3, #6
 80080dc:	e025      	b.n	800812a <HAL_GPIO_Init+0x26a>
 80080de:	2305      	movs	r3, #5
 80080e0:	e023      	b.n	800812a <HAL_GPIO_Init+0x26a>
 80080e2:	2304      	movs	r3, #4
 80080e4:	e021      	b.n	800812a <HAL_GPIO_Init+0x26a>
 80080e6:	2303      	movs	r3, #3
 80080e8:	e01f      	b.n	800812a <HAL_GPIO_Init+0x26a>
 80080ea:	2302      	movs	r3, #2
 80080ec:	e01d      	b.n	800812a <HAL_GPIO_Init+0x26a>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e01b      	b.n	800812a <HAL_GPIO_Init+0x26a>
 80080f2:	bf00      	nop
 80080f4:	58000080 	.word	0x58000080
 80080f8:	58024400 	.word	0x58024400
 80080fc:	58000400 	.word	0x58000400
 8008100:	58020000 	.word	0x58020000
 8008104:	58020400 	.word	0x58020400
 8008108:	58020800 	.word	0x58020800
 800810c:	58020c00 	.word	0x58020c00
 8008110:	58021000 	.word	0x58021000
 8008114:	58021400 	.word	0x58021400
 8008118:	58021800 	.word	0x58021800
 800811c:	58021c00 	.word	0x58021c00
 8008120:	58022000 	.word	0x58022000
 8008124:	58022400 	.word	0x58022400
 8008128:	2300      	movs	r3, #0
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	f002 0203 	and.w	r2, r2, #3
 8008130:	0092      	lsls	r2, r2, #2
 8008132:	4093      	lsls	r3, r2
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	4313      	orrs	r3, r2
 8008138:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800813a:	4938      	ldr	r1, [pc, #224]	@ (800821c <HAL_GPIO_Init+0x35c>)
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	089b      	lsrs	r3, r3, #2
 8008140:	3302      	adds	r3, #2
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	43db      	mvns	r3, r3
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	4013      	ands	r3, r2
 8008158:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	4313      	orrs	r3, r2
 800816c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800816e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	43db      	mvns	r3, r3
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4013      	ands	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	4313      	orrs	r3, r2
 800819a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800819c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	43db      	mvns	r3, r3
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	4013      	ands	r3, r2
 80081b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	43db      	mvns	r3, r3
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	4013      	ands	r3, r2
 80081dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	3301      	adds	r3, #1
 80081fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	fa22 f303 	lsr.w	r3, r2, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	f47f ae63 	bne.w	8007ed4 <HAL_GPIO_Init+0x14>
  }
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	3724      	adds	r7, #36	@ 0x24
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	58000400 	.word	0x58000400

08008220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	807b      	strh	r3, [r7, #2]
 800822c:	4613      	mov	r3, r2
 800822e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008230:	787b      	ldrb	r3, [r7, #1]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008236:	887a      	ldrh	r2, [r7, #2]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800823c:	e003      	b.n	8008246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800823e:	887b      	ldrh	r3, [r7, #2]
 8008240:	041a      	lsls	r2, r3, #16
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	619a      	str	r2, [r3, #24]
}
 8008246:	bf00      	nop
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
	...

08008254 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800825c:	4b19      	ldr	r3, [pc, #100]	@ (80082c4 <HAL_PWREx_ConfigSupply+0x70>)
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b04      	cmp	r3, #4
 8008266:	d00a      	beq.n	800827e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008268:	4b16      	ldr	r3, [pc, #88]	@ (80082c4 <HAL_PWREx_ConfigSupply+0x70>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	429a      	cmp	r2, r3
 8008274:	d001      	beq.n	800827a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e01f      	b.n	80082ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	e01d      	b.n	80082ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800827e:	4b11      	ldr	r3, [pc, #68]	@ (80082c4 <HAL_PWREx_ConfigSupply+0x70>)
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f023 0207 	bic.w	r2, r3, #7
 8008286:	490f      	ldr	r1, [pc, #60]	@ (80082c4 <HAL_PWREx_ConfigSupply+0x70>)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4313      	orrs	r3, r2
 800828c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800828e:	f7fe fc8f 	bl	8006bb0 <HAL_GetTick>
 8008292:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008294:	e009      	b.n	80082aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008296:	f7fe fc8b 	bl	8006bb0 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082a4:	d901      	bls.n	80082aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e007      	b.n	80082ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082aa:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <HAL_PWREx_ConfigSupply+0x70>)
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082b6:	d1ee      	bne.n	8008296 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	58024800 	.word	0x58024800

080082c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08c      	sub	sp, #48	@ 0x30
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d102      	bne.n	80082dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	f000 bc48 	b.w	8008b6c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8088 	beq.w	80083fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082ea:	4b99      	ldr	r3, [pc, #612]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082f4:	4b96      	ldr	r3, [pc, #600]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 80082f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80082fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fc:	2b10      	cmp	r3, #16
 80082fe:	d007      	beq.n	8008310 <HAL_RCC_OscConfig+0x48>
 8008300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008302:	2b18      	cmp	r3, #24
 8008304:	d111      	bne.n	800832a <HAL_RCC_OscConfig+0x62>
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d10c      	bne.n	800832a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008310:	4b8f      	ldr	r3, [pc, #572]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d06d      	beq.n	80083f8 <HAL_RCC_OscConfig+0x130>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d169      	bne.n	80083f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	f000 bc21 	b.w	8008b6c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008332:	d106      	bne.n	8008342 <HAL_RCC_OscConfig+0x7a>
 8008334:	4b86      	ldr	r3, [pc, #536]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a85      	ldr	r2, [pc, #532]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800833a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	e02e      	b.n	80083a0 <HAL_RCC_OscConfig+0xd8>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10c      	bne.n	8008364 <HAL_RCC_OscConfig+0x9c>
 800834a:	4b81      	ldr	r3, [pc, #516]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a80      	ldr	r2, [pc, #512]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	4b7e      	ldr	r3, [pc, #504]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a7d      	ldr	r2, [pc, #500]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800835c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	e01d      	b.n	80083a0 <HAL_RCC_OscConfig+0xd8>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800836c:	d10c      	bne.n	8008388 <HAL_RCC_OscConfig+0xc0>
 800836e:	4b78      	ldr	r3, [pc, #480]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a77      	ldr	r2, [pc, #476]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008378:	6013      	str	r3, [r2, #0]
 800837a:	4b75      	ldr	r3, [pc, #468]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a74      	ldr	r2, [pc, #464]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	e00b      	b.n	80083a0 <HAL_RCC_OscConfig+0xd8>
 8008388:	4b71      	ldr	r3, [pc, #452]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a70      	ldr	r2, [pc, #448]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800838e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	4b6e      	ldr	r3, [pc, #440]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a6d      	ldr	r2, [pc, #436]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800839a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800839e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d013      	beq.n	80083d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a8:	f7fe fc02 	bl	8006bb0 <HAL_GetTick>
 80083ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083b0:	f7fe fbfe 	bl	8006bb0 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b64      	cmp	r3, #100	@ 0x64
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e3d4      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083c2:	4b63      	ldr	r3, [pc, #396]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0f0      	beq.n	80083b0 <HAL_RCC_OscConfig+0xe8>
 80083ce:	e014      	b.n	80083fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d0:	f7fe fbee 	bl	8006bb0 <HAL_GetTick>
 80083d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083d6:	e008      	b.n	80083ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083d8:	f7fe fbea 	bl	8006bb0 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b64      	cmp	r3, #100	@ 0x64
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e3c0      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083ea:	4b59      	ldr	r3, [pc, #356]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1f0      	bne.n	80083d8 <HAL_RCC_OscConfig+0x110>
 80083f6:	e000      	b.n	80083fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 80ca 	beq.w	800859c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008408:	4b51      	ldr	r3, [pc, #324]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008410:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008412:	4b4f      	ldr	r3, [pc, #316]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <HAL_RCC_OscConfig+0x166>
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	2b18      	cmp	r3, #24
 8008422:	d156      	bne.n	80084d2 <HAL_RCC_OscConfig+0x20a>
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	f003 0303 	and.w	r3, r3, #3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d151      	bne.n	80084d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800842e:	4b48      	ldr	r3, [pc, #288]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0304 	and.w	r3, r3, #4
 8008436:	2b00      	cmp	r3, #0
 8008438:	d005      	beq.n	8008446 <HAL_RCC_OscConfig+0x17e>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e392      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008446:	4b42      	ldr	r3, [pc, #264]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f023 0219 	bic.w	r2, r3, #25
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	493f      	ldr	r1, [pc, #252]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008454:	4313      	orrs	r3, r2
 8008456:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008458:	f7fe fbaa 	bl	8006bb0 <HAL_GetTick>
 800845c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008460:	f7fe fba6 	bl	8006bb0 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e37c      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008472:	4b37      	ldr	r3, [pc, #220]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0f0      	beq.n	8008460 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800847e:	f7fe fba3 	bl	8006bc8 <HAL_GetREVID>
 8008482:	4603      	mov	r3, r0
 8008484:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008488:	4293      	cmp	r3, r2
 800848a:	d817      	bhi.n	80084bc <HAL_RCC_OscConfig+0x1f4>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b40      	cmp	r3, #64	@ 0x40
 8008492:	d108      	bne.n	80084a6 <HAL_RCC_OscConfig+0x1de>
 8008494:	4b2e      	ldr	r3, [pc, #184]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800849c:	4a2c      	ldr	r2, [pc, #176]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800849e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084a4:	e07a      	b.n	800859c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084a6:	4b2a      	ldr	r3, [pc, #168]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	031b      	lsls	r3, r3, #12
 80084b4:	4926      	ldr	r1, [pc, #152]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084ba:	e06f      	b.n	800859c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084bc:	4b24      	ldr	r3, [pc, #144]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	061b      	lsls	r3, r3, #24
 80084ca:	4921      	ldr	r1, [pc, #132]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084d0:	e064      	b.n	800859c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d047      	beq.n	800856a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084da:	4b1d      	ldr	r3, [pc, #116]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f023 0219 	bic.w	r2, r3, #25
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	491a      	ldr	r1, [pc, #104]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ec:	f7fe fb60 	bl	8006bb0 <HAL_GetTick>
 80084f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084f4:	f7fe fb5c 	bl	8006bb0 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e332      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008506:	4b12      	ldr	r3, [pc, #72]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0f0      	beq.n	80084f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008512:	f7fe fb59 	bl	8006bc8 <HAL_GetREVID>
 8008516:	4603      	mov	r3, r0
 8008518:	f241 0203 	movw	r2, #4099	@ 0x1003
 800851c:	4293      	cmp	r3, r2
 800851e:	d819      	bhi.n	8008554 <HAL_RCC_OscConfig+0x28c>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b40      	cmp	r3, #64	@ 0x40
 8008526:	d108      	bne.n	800853a <HAL_RCC_OscConfig+0x272>
 8008528:	4b09      	ldr	r3, [pc, #36]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008530:	4a07      	ldr	r2, [pc, #28]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 8008532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008536:	6053      	str	r3, [r2, #4]
 8008538:	e030      	b.n	800859c <HAL_RCC_OscConfig+0x2d4>
 800853a:	4b05      	ldr	r3, [pc, #20]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	031b      	lsls	r3, r3, #12
 8008548:	4901      	ldr	r1, [pc, #4]	@ (8008550 <HAL_RCC_OscConfig+0x288>)
 800854a:	4313      	orrs	r3, r2
 800854c:	604b      	str	r3, [r1, #4]
 800854e:	e025      	b.n	800859c <HAL_RCC_OscConfig+0x2d4>
 8008550:	58024400 	.word	0x58024400
 8008554:	4b9a      	ldr	r3, [pc, #616]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	061b      	lsls	r3, r3, #24
 8008562:	4997      	ldr	r1, [pc, #604]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008564:	4313      	orrs	r3, r2
 8008566:	604b      	str	r3, [r1, #4]
 8008568:	e018      	b.n	800859c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800856a:	4b95      	ldr	r3, [pc, #596]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a94      	ldr	r2, [pc, #592]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008570:	f023 0301 	bic.w	r3, r3, #1
 8008574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008576:	f7fe fb1b 	bl	8006bb0 <HAL_GetTick>
 800857a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800857c:	e008      	b.n	8008590 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800857e:	f7fe fb17 	bl	8006bb0 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d901      	bls.n	8008590 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e2ed      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008590:	4b8b      	ldr	r3, [pc, #556]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f0      	bne.n	800857e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0310 	and.w	r3, r3, #16
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 80a9 	beq.w	80086fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085aa:	4b85      	ldr	r3, [pc, #532]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085b4:	4b82      	ldr	r3, [pc, #520]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80085b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d007      	beq.n	80085d0 <HAL_RCC_OscConfig+0x308>
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b18      	cmp	r3, #24
 80085c4:	d13a      	bne.n	800863c <HAL_RCC_OscConfig+0x374>
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f003 0303 	and.w	r3, r3, #3
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d135      	bne.n	800863c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085d0:	4b7b      	ldr	r3, [pc, #492]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d005      	beq.n	80085e8 <HAL_RCC_OscConfig+0x320>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	2b80      	cmp	r3, #128	@ 0x80
 80085e2:	d001      	beq.n	80085e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e2c1      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085e8:	f7fe faee 	bl	8006bc8 <HAL_GetREVID>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f241 0203 	movw	r2, #4099	@ 0x1003
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d817      	bhi.n	8008626 <HAL_RCC_OscConfig+0x35e>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d108      	bne.n	8008610 <HAL_RCC_OscConfig+0x348>
 80085fe:	4b70      	ldr	r3, [pc, #448]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008606:	4a6e      	ldr	r2, [pc, #440]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008608:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800860c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800860e:	e075      	b.n	80086fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008610:	4b6b      	ldr	r3, [pc, #428]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	069b      	lsls	r3, r3, #26
 800861e:	4968      	ldr	r1, [pc, #416]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008620:	4313      	orrs	r3, r2
 8008622:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008624:	e06a      	b.n	80086fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008626:	4b66      	ldr	r3, [pc, #408]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	061b      	lsls	r3, r3, #24
 8008634:	4962      	ldr	r1, [pc, #392]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008636:	4313      	orrs	r3, r2
 8008638:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800863a:	e05f      	b.n	80086fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d042      	beq.n	80086ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008644:	4b5e      	ldr	r3, [pc, #376]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a5d      	ldr	r2, [pc, #372]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 800864a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800864e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008650:	f7fe faae 	bl	8006bb0 <HAL_GetTick>
 8008654:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008656:	e008      	b.n	800866a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008658:	f7fe faaa 	bl	8006bb0 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e280      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800866a:	4b55      	ldr	r3, [pc, #340]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0f0      	beq.n	8008658 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008676:	f7fe faa7 	bl	8006bc8 <HAL_GetREVID>
 800867a:	4603      	mov	r3, r0
 800867c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008680:	4293      	cmp	r3, r2
 8008682:	d817      	bhi.n	80086b4 <HAL_RCC_OscConfig+0x3ec>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	2b20      	cmp	r3, #32
 800868a:	d108      	bne.n	800869e <HAL_RCC_OscConfig+0x3d6>
 800868c:	4b4c      	ldr	r3, [pc, #304]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008694:	4a4a      	ldr	r2, [pc, #296]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008696:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800869a:	6053      	str	r3, [r2, #4]
 800869c:	e02e      	b.n	80086fc <HAL_RCC_OscConfig+0x434>
 800869e:	4b48      	ldr	r3, [pc, #288]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	069b      	lsls	r3, r3, #26
 80086ac:	4944      	ldr	r1, [pc, #272]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	604b      	str	r3, [r1, #4]
 80086b2:	e023      	b.n	80086fc <HAL_RCC_OscConfig+0x434>
 80086b4:	4b42      	ldr	r3, [pc, #264]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	061b      	lsls	r3, r3, #24
 80086c2:	493f      	ldr	r1, [pc, #252]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60cb      	str	r3, [r1, #12]
 80086c8:	e018      	b.n	80086fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80086ca:	4b3d      	ldr	r3, [pc, #244]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a3c      	ldr	r2, [pc, #240]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80086d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d6:	f7fe fa6b 	bl	8006bb0 <HAL_GetTick>
 80086da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086dc:	e008      	b.n	80086f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086de:	f7fe fa67 	bl	8006bb0 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e23d      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086f0:	4b33      	ldr	r3, [pc, #204]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1f0      	bne.n	80086de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0308 	and.w	r3, r3, #8
 8008704:	2b00      	cmp	r3, #0
 8008706:	d036      	beq.n	8008776 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d019      	beq.n	8008744 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008710:	4b2b      	ldr	r3, [pc, #172]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008714:	4a2a      	ldr	r2, [pc, #168]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008716:	f043 0301 	orr.w	r3, r3, #1
 800871a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800871c:	f7fe fa48 	bl	8006bb0 <HAL_GetTick>
 8008720:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008722:	e008      	b.n	8008736 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008724:	f7fe fa44 	bl	8006bb0 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b02      	cmp	r3, #2
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e21a      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008736:	4b22      	ldr	r3, [pc, #136]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0f0      	beq.n	8008724 <HAL_RCC_OscConfig+0x45c>
 8008742:	e018      	b.n	8008776 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008744:	4b1e      	ldr	r3, [pc, #120]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008748:	4a1d      	ldr	r2, [pc, #116]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 800874a:	f023 0301 	bic.w	r3, r3, #1
 800874e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008750:	f7fe fa2e 	bl	8006bb0 <HAL_GetTick>
 8008754:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008758:	f7fe fa2a 	bl	8006bb0 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e200      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800876a:	4b15      	ldr	r3, [pc, #84]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 800876c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1f0      	bne.n	8008758 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d039      	beq.n	80087f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d01c      	beq.n	80087c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800878a:	4b0d      	ldr	r3, [pc, #52]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a0c      	ldr	r2, [pc, #48]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 8008790:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008794:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008796:	f7fe fa0b 	bl	8006bb0 <HAL_GetTick>
 800879a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800879c:	e008      	b.n	80087b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800879e:	f7fe fa07 	bl	8006bb0 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e1dd      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087b0:	4b03      	ldr	r3, [pc, #12]	@ (80087c0 <HAL_RCC_OscConfig+0x4f8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0f0      	beq.n	800879e <HAL_RCC_OscConfig+0x4d6>
 80087bc:	e01b      	b.n	80087f6 <HAL_RCC_OscConfig+0x52e>
 80087be:	bf00      	nop
 80087c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087c4:	4b9b      	ldr	r3, [pc, #620]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a9a      	ldr	r2, [pc, #616]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80087ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087d0:	f7fe f9ee 	bl	8006bb0 <HAL_GetTick>
 80087d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087d6:	e008      	b.n	80087ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087d8:	f7fe f9ea 	bl	8006bb0 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d901      	bls.n	80087ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e1c0      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087ea:	4b92      	ldr	r3, [pc, #584]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f0      	bne.n	80087d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0304 	and.w	r3, r3, #4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 8081 	beq.w	8008906 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008804:	4b8c      	ldr	r3, [pc, #560]	@ (8008a38 <HAL_RCC_OscConfig+0x770>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a8b      	ldr	r2, [pc, #556]	@ (8008a38 <HAL_RCC_OscConfig+0x770>)
 800880a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800880e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008810:	f7fe f9ce 	bl	8006bb0 <HAL_GetTick>
 8008814:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008816:	e008      	b.n	800882a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008818:	f7fe f9ca 	bl	8006bb0 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b64      	cmp	r3, #100	@ 0x64
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e1a0      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800882a:	4b83      	ldr	r3, [pc, #524]	@ (8008a38 <HAL_RCC_OscConfig+0x770>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0f0      	beq.n	8008818 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d106      	bne.n	800884c <HAL_RCC_OscConfig+0x584>
 800883e:	4b7d      	ldr	r3, [pc, #500]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008842:	4a7c      	ldr	r2, [pc, #496]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008844:	f043 0301 	orr.w	r3, r3, #1
 8008848:	6713      	str	r3, [r2, #112]	@ 0x70
 800884a:	e02d      	b.n	80088a8 <HAL_RCC_OscConfig+0x5e0>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10c      	bne.n	800886e <HAL_RCC_OscConfig+0x5a6>
 8008854:	4b77      	ldr	r3, [pc, #476]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008858:	4a76      	ldr	r2, [pc, #472]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 800885a:	f023 0301 	bic.w	r3, r3, #1
 800885e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008860:	4b74      	ldr	r3, [pc, #464]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008864:	4a73      	ldr	r2, [pc, #460]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008866:	f023 0304 	bic.w	r3, r3, #4
 800886a:	6713      	str	r3, [r2, #112]	@ 0x70
 800886c:	e01c      	b.n	80088a8 <HAL_RCC_OscConfig+0x5e0>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b05      	cmp	r3, #5
 8008874:	d10c      	bne.n	8008890 <HAL_RCC_OscConfig+0x5c8>
 8008876:	4b6f      	ldr	r3, [pc, #444]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800887a:	4a6e      	ldr	r2, [pc, #440]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 800887c:	f043 0304 	orr.w	r3, r3, #4
 8008880:	6713      	str	r3, [r2, #112]	@ 0x70
 8008882:	4b6c      	ldr	r3, [pc, #432]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008886:	4a6b      	ldr	r2, [pc, #428]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008888:	f043 0301 	orr.w	r3, r3, #1
 800888c:	6713      	str	r3, [r2, #112]	@ 0x70
 800888e:	e00b      	b.n	80088a8 <HAL_RCC_OscConfig+0x5e0>
 8008890:	4b68      	ldr	r3, [pc, #416]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008894:	4a67      	ldr	r2, [pc, #412]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008896:	f023 0301 	bic.w	r3, r3, #1
 800889a:	6713      	str	r3, [r2, #112]	@ 0x70
 800889c:	4b65      	ldr	r3, [pc, #404]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 800889e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088a0:	4a64      	ldr	r2, [pc, #400]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80088a2:	f023 0304 	bic.w	r3, r3, #4
 80088a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d015      	beq.n	80088dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b0:	f7fe f97e 	bl	8006bb0 <HAL_GetTick>
 80088b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088b6:	e00a      	b.n	80088ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088b8:	f7fe f97a 	bl	8006bb0 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e14e      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088ce:	4b59      	ldr	r3, [pc, #356]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80088d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0ee      	beq.n	80088b8 <HAL_RCC_OscConfig+0x5f0>
 80088da:	e014      	b.n	8008906 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088dc:	f7fe f968 	bl	8006bb0 <HAL_GetTick>
 80088e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088e2:	e00a      	b.n	80088fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088e4:	f7fe f964 	bl	8006bb0 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e138      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088fa:	4b4e      	ldr	r3, [pc, #312]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1ee      	bne.n	80088e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 812d 	beq.w	8008b6a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008910:	4b48      	ldr	r3, [pc, #288]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008918:	2b18      	cmp	r3, #24
 800891a:	f000 80bd 	beq.w	8008a98 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008922:	2b02      	cmp	r3, #2
 8008924:	f040 809e 	bne.w	8008a64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008928:	4b42      	ldr	r3, [pc, #264]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a41      	ldr	r2, [pc, #260]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 800892e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008934:	f7fe f93c 	bl	8006bb0 <HAL_GetTick>
 8008938:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800893c:	f7fe f938 	bl	8006bb0 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e10e      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800894e:	4b39      	ldr	r3, [pc, #228]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1f0      	bne.n	800893c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800895a:	4b36      	ldr	r3, [pc, #216]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 800895c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800895e:	4b37      	ldr	r3, [pc, #220]	@ (8008a3c <HAL_RCC_OscConfig+0x774>)
 8008960:	4013      	ands	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800896a:	0112      	lsls	r2, r2, #4
 800896c:	430a      	orrs	r2, r1
 800896e:	4931      	ldr	r1, [pc, #196]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008970:	4313      	orrs	r3, r2
 8008972:	628b      	str	r3, [r1, #40]	@ 0x28
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008978:	3b01      	subs	r3, #1
 800897a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008982:	3b01      	subs	r3, #1
 8008984:	025b      	lsls	r3, r3, #9
 8008986:	b29b      	uxth	r3, r3
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898e:	3b01      	subs	r3, #1
 8008990:	041b      	lsls	r3, r3, #16
 8008992:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008996:	431a      	orrs	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800899c:	3b01      	subs	r3, #1
 800899e:	061b      	lsls	r3, r3, #24
 80089a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80089a4:	4923      	ldr	r1, [pc, #140]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80089aa:	4b22      	ldr	r3, [pc, #136]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ae:	4a21      	ldr	r2, [pc, #132]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089b0:	f023 0301 	bic.w	r3, r3, #1
 80089b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089b6:	4b1f      	ldr	r3, [pc, #124]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ba:	4b21      	ldr	r3, [pc, #132]	@ (8008a40 <HAL_RCC_OscConfig+0x778>)
 80089bc:	4013      	ands	r3, r2
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80089c2:	00d2      	lsls	r2, r2, #3
 80089c4:	491b      	ldr	r1, [pc, #108]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80089ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ce:	f023 020c 	bic.w	r2, r3, #12
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d6:	4917      	ldr	r1, [pc, #92]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80089dc:	4b15      	ldr	r3, [pc, #84]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e0:	f023 0202 	bic.w	r2, r3, #2
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e8:	4912      	ldr	r1, [pc, #72]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089ee:	4b11      	ldr	r3, [pc, #68]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f2:	4a10      	ldr	r2, [pc, #64]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 80089fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fe:	4a0d      	ldr	r2, [pc, #52]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a06:	4b0b      	ldr	r3, [pc, #44]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a12:	4b08      	ldr	r3, [pc, #32]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a16:	4a07      	ldr	r2, [pc, #28]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008a18:	f043 0301 	orr.w	r3, r3, #1
 8008a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a1e:	4b05      	ldr	r3, [pc, #20]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a04      	ldr	r2, [pc, #16]	@ (8008a34 <HAL_RCC_OscConfig+0x76c>)
 8008a24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2a:	f7fe f8c1 	bl	8006bb0 <HAL_GetTick>
 8008a2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a30:	e011      	b.n	8008a56 <HAL_RCC_OscConfig+0x78e>
 8008a32:	bf00      	nop
 8008a34:	58024400 	.word	0x58024400
 8008a38:	58024800 	.word	0x58024800
 8008a3c:	fffffc0c 	.word	0xfffffc0c
 8008a40:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a44:	f7fe f8b4 	bl	8006bb0 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e08a      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a56:	4b47      	ldr	r3, [pc, #284]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0f0      	beq.n	8008a44 <HAL_RCC_OscConfig+0x77c>
 8008a62:	e082      	b.n	8008b6a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a64:	4b43      	ldr	r3, [pc, #268]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a42      	ldr	r2, [pc, #264]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008a6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a70:	f7fe f89e 	bl	8006bb0 <HAL_GetTick>
 8008a74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a76:	e008      	b.n	8008a8a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a78:	f7fe f89a 	bl	8006bb0 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d901      	bls.n	8008a8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e070      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1f0      	bne.n	8008a78 <HAL_RCC_OscConfig+0x7b0>
 8008a96:	e068      	b.n	8008b6a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a98:	4b36      	ldr	r3, [pc, #216]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a9e:	4b35      	ldr	r3, [pc, #212]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d031      	beq.n	8008b10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f003 0203 	and.w	r2, r3, #3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d12a      	bne.n	8008b10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	091b      	lsrs	r3, r3, #4
 8008abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d122      	bne.n	8008b10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d11a      	bne.n	8008b10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	0a5b      	lsrs	r3, r3, #9
 8008ade:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ae6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d111      	bne.n	8008b10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	0c1b      	lsrs	r3, r3, #16
 8008af0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d108      	bne.n	8008b10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	0e1b      	lsrs	r3, r3, #24
 8008b02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d001      	beq.n	8008b14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e02b      	b.n	8008b6c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b14:	4b17      	ldr	r3, [pc, #92]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b18:	08db      	lsrs	r3, r3, #3
 8008b1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d01f      	beq.n	8008b6a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b2a:	4b12      	ldr	r3, [pc, #72]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2e:	4a11      	ldr	r2, [pc, #68]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008b30:	f023 0301 	bic.w	r3, r3, #1
 8008b34:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b36:	f7fe f83b 	bl	8006bb0 <HAL_GetTick>
 8008b3a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008b3c:	bf00      	nop
 8008b3e:	f7fe f837 	bl	8006bb0 <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d0f9      	beq.n	8008b3e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b78 <HAL_RCC_OscConfig+0x8b0>)
 8008b50:	4013      	ands	r3, r2
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008b56:	00d2      	lsls	r2, r2, #3
 8008b58:	4906      	ldr	r1, [pc, #24]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008b5e:	4b05      	ldr	r3, [pc, #20]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b62:	4a04      	ldr	r2, [pc, #16]	@ (8008b74 <HAL_RCC_OscConfig+0x8ac>)
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3730      	adds	r7, #48	@ 0x30
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	58024400 	.word	0x58024400
 8008b78:	ffff0007 	.word	0xffff0007

08008b7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e19c      	b.n	8008eca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b90:	4b8a      	ldr	r3, [pc, #552]	@ (8008dbc <HAL_RCC_ClockConfig+0x240>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 030f 	and.w	r3, r3, #15
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d910      	bls.n	8008bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b9e:	4b87      	ldr	r3, [pc, #540]	@ (8008dbc <HAL_RCC_ClockConfig+0x240>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f023 020f 	bic.w	r2, r3, #15
 8008ba6:	4985      	ldr	r1, [pc, #532]	@ (8008dbc <HAL_RCC_ClockConfig+0x240>)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bae:	4b83      	ldr	r3, [pc, #524]	@ (8008dbc <HAL_RCC_ClockConfig+0x240>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d001      	beq.n	8008bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e184      	b.n	8008eca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d010      	beq.n	8008bee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691a      	ldr	r2, [r3, #16]
 8008bd0:	4b7b      	ldr	r3, [pc, #492]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d908      	bls.n	8008bee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bdc:	4b78      	ldr	r3, [pc, #480]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	4975      	ldr	r1, [pc, #468]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d010      	beq.n	8008c1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	695a      	ldr	r2, [r3, #20]
 8008bfe:	4b70      	ldr	r3, [pc, #448]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d908      	bls.n	8008c1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	496a      	ldr	r1, [pc, #424]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d010      	beq.n	8008c4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	699a      	ldr	r2, [r3, #24]
 8008c2c:	4b64      	ldr	r3, [pc, #400]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d908      	bls.n	8008c4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c38:	4b61      	ldr	r3, [pc, #388]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	495e      	ldr	r1, [pc, #376]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d010      	beq.n	8008c78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	69da      	ldr	r2, [r3, #28]
 8008c5a:	4b59      	ldr	r3, [pc, #356]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d908      	bls.n	8008c78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c66:	4b56      	ldr	r3, [pc, #344]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	4953      	ldr	r1, [pc, #332]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d010      	beq.n	8008ca6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	4b4d      	ldr	r3, [pc, #308]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d908      	bls.n	8008ca6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c94:	4b4a      	ldr	r3, [pc, #296]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	f023 020f 	bic.w	r2, r3, #15
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	4947      	ldr	r1, [pc, #284]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d055      	beq.n	8008d5e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008cb2:	4b43      	ldr	r3, [pc, #268]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	4940      	ldr	r1, [pc, #256]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d107      	bne.n	8008cdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d121      	bne.n	8008d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e0f6      	b.n	8008eca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d107      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ce4:	4b36      	ldr	r3, [pc, #216]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d115      	bne.n	8008d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e0ea      	b.n	8008eca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d107      	bne.n	8008d0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008cfc:	4b30      	ldr	r3, [pc, #192]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d109      	bne.n	8008d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e0de      	b.n	8008eca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e0d6      	b.n	8008eca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d1c:	4b28      	ldr	r3, [pc, #160]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	f023 0207 	bic.w	r2, r3, #7
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	4925      	ldr	r1, [pc, #148]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d2e:	f7fd ff3f 	bl	8006bb0 <HAL_GetTick>
 8008d32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d34:	e00a      	b.n	8008d4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d36:	f7fd ff3b 	bl	8006bb0 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d901      	bls.n	8008d4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e0be      	b.n	8008eca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d1eb      	bne.n	8008d36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d010      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	4b14      	ldr	r3, [pc, #80]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d208      	bcs.n	8008d8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d7a:	4b11      	ldr	r3, [pc, #68]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f023 020f 	bic.w	r2, r3, #15
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	490e      	ldr	r1, [pc, #56]	@ (8008dc0 <HAL_RCC_ClockConfig+0x244>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008dbc <HAL_RCC_ClockConfig+0x240>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d214      	bcs.n	8008dc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d9a:	4b08      	ldr	r3, [pc, #32]	@ (8008dbc <HAL_RCC_ClockConfig+0x240>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f023 020f 	bic.w	r2, r3, #15
 8008da2:	4906      	ldr	r1, [pc, #24]	@ (8008dbc <HAL_RCC_ClockConfig+0x240>)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008daa:	4b04      	ldr	r3, [pc, #16]	@ (8008dbc <HAL_RCC_ClockConfig+0x240>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 030f 	and.w	r3, r3, #15
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d005      	beq.n	8008dc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e086      	b.n	8008eca <HAL_RCC_ClockConfig+0x34e>
 8008dbc:	52002000 	.word	0x52002000
 8008dc0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0304 	and.w	r3, r3, #4
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d010      	beq.n	8008df2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691a      	ldr	r2, [r3, #16]
 8008dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d208      	bcs.n	8008df2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008de0:	4b3c      	ldr	r3, [pc, #240]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	4939      	ldr	r1, [pc, #228]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d010      	beq.n	8008e20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	695a      	ldr	r2, [r3, #20]
 8008e02:	4b34      	ldr	r3, [pc, #208]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d208      	bcs.n	8008e20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e0e:	4b31      	ldr	r3, [pc, #196]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	492e      	ldr	r1, [pc, #184]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0310 	and.w	r3, r3, #16
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d010      	beq.n	8008e4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	699a      	ldr	r2, [r3, #24]
 8008e30:	4b28      	ldr	r3, [pc, #160]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d208      	bcs.n	8008e4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e3c:	4b25      	ldr	r3, [pc, #148]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	4922      	ldr	r1, [pc, #136]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0320 	and.w	r3, r3, #32
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d010      	beq.n	8008e7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69da      	ldr	r2, [r3, #28]
 8008e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d208      	bcs.n	8008e7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	4917      	ldr	r1, [pc, #92]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e7c:	f000 f834 	bl	8008ee8 <HAL_RCC_GetSysClockFreq>
 8008e80:	4602      	mov	r2, r0
 8008e82:	4b14      	ldr	r3, [pc, #80]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	0a1b      	lsrs	r3, r3, #8
 8008e88:	f003 030f 	and.w	r3, r3, #15
 8008e8c:	4912      	ldr	r1, [pc, #72]	@ (8008ed8 <HAL_RCC_ClockConfig+0x35c>)
 8008e8e:	5ccb      	ldrb	r3, [r1, r3]
 8008e90:	f003 031f 	and.w	r3, r3, #31
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
 8008e98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed4 <HAL_RCC_ClockConfig+0x358>)
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	f003 030f 	and.w	r3, r3, #15
 8008ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8008ed8 <HAL_RCC_ClockConfig+0x35c>)
 8008ea4:	5cd3      	ldrb	r3, [r2, r3]
 8008ea6:	f003 031f 	and.w	r3, r3, #31
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8008edc <HAL_RCC_ClockConfig+0x360>)
 8008eb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8008ee0 <HAL_RCC_ClockConfig+0x364>)
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008eba:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee4 <HAL_RCC_ClockConfig+0x368>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fd fe2c 	bl	8006b1c <HAL_InitTick>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3718      	adds	r7, #24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	58024400 	.word	0x58024400
 8008ed8:	08011e48 	.word	0x08011e48
 8008edc:	24000004 	.word	0x24000004
 8008ee0:	24000000 	.word	0x24000000
 8008ee4:	24000014 	.word	0x24000014

08008ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b089      	sub	sp, #36	@ 0x24
 8008eec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008eee:	4bb3      	ldr	r3, [pc, #716]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ef6:	2b18      	cmp	r3, #24
 8008ef8:	f200 8155 	bhi.w	80091a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8008efc:	a201      	add	r2, pc, #4	@ (adr r2, 8008f04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f02:	bf00      	nop
 8008f04:	08008f69 	.word	0x08008f69
 8008f08:	080091a7 	.word	0x080091a7
 8008f0c:	080091a7 	.word	0x080091a7
 8008f10:	080091a7 	.word	0x080091a7
 8008f14:	080091a7 	.word	0x080091a7
 8008f18:	080091a7 	.word	0x080091a7
 8008f1c:	080091a7 	.word	0x080091a7
 8008f20:	080091a7 	.word	0x080091a7
 8008f24:	08008f8f 	.word	0x08008f8f
 8008f28:	080091a7 	.word	0x080091a7
 8008f2c:	080091a7 	.word	0x080091a7
 8008f30:	080091a7 	.word	0x080091a7
 8008f34:	080091a7 	.word	0x080091a7
 8008f38:	080091a7 	.word	0x080091a7
 8008f3c:	080091a7 	.word	0x080091a7
 8008f40:	080091a7 	.word	0x080091a7
 8008f44:	08008f95 	.word	0x08008f95
 8008f48:	080091a7 	.word	0x080091a7
 8008f4c:	080091a7 	.word	0x080091a7
 8008f50:	080091a7 	.word	0x080091a7
 8008f54:	080091a7 	.word	0x080091a7
 8008f58:	080091a7 	.word	0x080091a7
 8008f5c:	080091a7 	.word	0x080091a7
 8008f60:	080091a7 	.word	0x080091a7
 8008f64:	08008f9b 	.word	0x08008f9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f68:	4b94      	ldr	r3, [pc, #592]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0320 	and.w	r3, r3, #32
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d009      	beq.n	8008f88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f74:	4b91      	ldr	r3, [pc, #580]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	08db      	lsrs	r3, r3, #3
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	4a90      	ldr	r2, [pc, #576]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
 8008f84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008f86:	e111      	b.n	80091ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f88:	4b8d      	ldr	r3, [pc, #564]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f8a:	61bb      	str	r3, [r7, #24]
      break;
 8008f8c:	e10e      	b.n	80091ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f90:	61bb      	str	r3, [r7, #24]
      break;
 8008f92:	e10b      	b.n	80091ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008f94:	4b8c      	ldr	r3, [pc, #560]	@ (80091c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008f96:	61bb      	str	r3, [r7, #24]
      break;
 8008f98:	e108      	b.n	80091ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f9a:	4b88      	ldr	r3, [pc, #544]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008fa4:	4b85      	ldr	r3, [pc, #532]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa8:	091b      	lsrs	r3, r3, #4
 8008faa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008fb0:	4b82      	ldr	r3, [pc, #520]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008fba:	4b80      	ldr	r3, [pc, #512]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fbe:	08db      	lsrs	r3, r3, #3
 8008fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	fb02 f303 	mul.w	r3, r2, r3
 8008fca:	ee07 3a90 	vmov	s15, r3
 8008fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 80e1 	beq.w	80091a0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	f000 8083 	beq.w	80090ec <HAL_RCC_GetSysClockFreq+0x204>
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	f200 80a1 	bhi.w	8009130 <HAL_RCC_GetSysClockFreq+0x248>
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d003      	beq.n	8008ffc <HAL_RCC_GetSysClockFreq+0x114>
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d056      	beq.n	80090a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008ffa:	e099      	b.n	8009130 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b00      	cmp	r3, #0
 8009006:	d02d      	beq.n	8009064 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009008:	4b6c      	ldr	r3, [pc, #432]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	08db      	lsrs	r3, r3, #3
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	4a6b      	ldr	r2, [pc, #428]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009014:	fa22 f303 	lsr.w	r3, r2, r3
 8009018:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	ee07 3a90 	vmov	s15, r3
 8009020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	ee07 3a90 	vmov	s15, r3
 800902a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009032:	4b62      	ldr	r3, [pc, #392]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009042:	ed97 6a02 	vldr	s12, [r7, #8]
 8009046:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80091cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800904a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800904e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800905a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800905e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009062:	e087      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80091d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009076:	4b51      	ldr	r3, [pc, #324]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009086:	ed97 6a02 	vldr	s12, [r7, #8]
 800908a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80091cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800908e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800909a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800909e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090a6:	e065      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80091d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ba:	4b40      	ldr	r3, [pc, #256]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80091cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80090d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090ea:	e043      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80091d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80090fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090fe:	4b2f      	ldr	r3, [pc, #188]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009106:	ee07 3a90 	vmov	s15, r3
 800910a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800910e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009112:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80091cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800911a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800911e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800912e:	e021      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80091d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800913e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009142:	4b1e      	ldr	r3, [pc, #120]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914a:	ee07 3a90 	vmov	s15, r3
 800914e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009152:	ed97 6a02 	vldr	s12, [r7, #8]
 8009156:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80091cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800915a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009172:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009174:	4b11      	ldr	r3, [pc, #68]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009178:	0a5b      	lsrs	r3, r3, #9
 800917a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800917e:	3301      	adds	r3, #1
 8009180:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	ee07 3a90 	vmov	s15, r3
 8009188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800918c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009198:	ee17 3a90 	vmov	r3, s15
 800919c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800919e:	e005      	b.n	80091ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	61bb      	str	r3, [r7, #24]
      break;
 80091a4:	e002      	b.n	80091ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80091a6:	4b07      	ldr	r3, [pc, #28]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091a8:	61bb      	str	r3, [r7, #24]
      break;
 80091aa:	bf00      	nop
  }

  return sysclockfreq;
 80091ac:	69bb      	ldr	r3, [r7, #24]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3724      	adds	r7, #36	@ 0x24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	58024400 	.word	0x58024400
 80091c0:	03d09000 	.word	0x03d09000
 80091c4:	003d0900 	.word	0x003d0900
 80091c8:	007a1200 	.word	0x007a1200
 80091cc:	46000000 	.word	0x46000000
 80091d0:	4c742400 	.word	0x4c742400
 80091d4:	4a742400 	.word	0x4a742400
 80091d8:	4af42400 	.word	0x4af42400

080091dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80091e2:	f7ff fe81 	bl	8008ee8 <HAL_RCC_GetSysClockFreq>
 80091e6:	4602      	mov	r2, r0
 80091e8:	4b10      	ldr	r3, [pc, #64]	@ (800922c <HAL_RCC_GetHCLKFreq+0x50>)
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	0a1b      	lsrs	r3, r3, #8
 80091ee:	f003 030f 	and.w	r3, r3, #15
 80091f2:	490f      	ldr	r1, [pc, #60]	@ (8009230 <HAL_RCC_GetHCLKFreq+0x54>)
 80091f4:	5ccb      	ldrb	r3, [r1, r3]
 80091f6:	f003 031f 	and.w	r3, r3, #31
 80091fa:	fa22 f303 	lsr.w	r3, r2, r3
 80091fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009200:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <HAL_RCC_GetHCLKFreq+0x50>)
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f003 030f 	and.w	r3, r3, #15
 8009208:	4a09      	ldr	r2, [pc, #36]	@ (8009230 <HAL_RCC_GetHCLKFreq+0x54>)
 800920a:	5cd3      	ldrb	r3, [r2, r3]
 800920c:	f003 031f 	and.w	r3, r3, #31
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	fa22 f303 	lsr.w	r3, r2, r3
 8009216:	4a07      	ldr	r2, [pc, #28]	@ (8009234 <HAL_RCC_GetHCLKFreq+0x58>)
 8009218:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800921a:	4a07      	ldr	r2, [pc, #28]	@ (8009238 <HAL_RCC_GetHCLKFreq+0x5c>)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009220:	4b04      	ldr	r3, [pc, #16]	@ (8009234 <HAL_RCC_GetHCLKFreq+0x58>)
 8009222:	681b      	ldr	r3, [r3, #0]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	58024400 	.word	0x58024400
 8009230:	08011e48 	.word	0x08011e48
 8009234:	24000004 	.word	0x24000004
 8009238:	24000000 	.word	0x24000000

0800923c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009240:	f7ff ffcc 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 8009244:	4602      	mov	r2, r0
 8009246:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	091b      	lsrs	r3, r3, #4
 800924c:	f003 0307 	and.w	r3, r3, #7
 8009250:	4904      	ldr	r1, [pc, #16]	@ (8009264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009252:	5ccb      	ldrb	r3, [r1, r3]
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800925c:	4618      	mov	r0, r3
 800925e:	bd80      	pop	{r7, pc}
 8009260:	58024400 	.word	0x58024400
 8009264:	08011e48 	.word	0x08011e48

08009268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800926c:	f7ff ffb6 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 8009270:	4602      	mov	r2, r0
 8009272:	4b06      	ldr	r3, [pc, #24]	@ (800928c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	f003 0307 	and.w	r3, r3, #7
 800927c:	4904      	ldr	r1, [pc, #16]	@ (8009290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800927e:	5ccb      	ldrb	r3, [r1, r3]
 8009280:	f003 031f 	and.w	r3, r3, #31
 8009284:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009288:	4618      	mov	r0, r3
 800928a:	bd80      	pop	{r7, pc}
 800928c:	58024400 	.word	0x58024400
 8009290:	08011e48 	.word	0x08011e48

08009294 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009298:	b0ca      	sub	sp, #296	@ 0x128
 800929a:	af00      	add	r7, sp, #0
 800929c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092a0:	2300      	movs	r3, #0
 80092a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092a6:	2300      	movs	r3, #0
 80092a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80092b8:	2500      	movs	r5, #0
 80092ba:	ea54 0305 	orrs.w	r3, r4, r5
 80092be:	d049      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80092c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092ca:	d02f      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80092cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092d0:	d828      	bhi.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80092d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092d6:	d01a      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80092d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092dc:	d822      	bhi.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80092e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092e6:	d007      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80092e8:	e01c      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ea:	4bb8      	ldr	r3, [pc, #736]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ee:	4ab7      	ldr	r2, [pc, #732]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80092f6:	e01a      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fc:	3308      	adds	r3, #8
 80092fe:	2102      	movs	r1, #2
 8009300:	4618      	mov	r0, r3
 8009302:	f002 fb61 	bl	800b9c8 <RCCEx_PLL2_Config>
 8009306:	4603      	mov	r3, r0
 8009308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800930c:	e00f      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800930e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009312:	3328      	adds	r3, #40	@ 0x28
 8009314:	2102      	movs	r1, #2
 8009316:	4618      	mov	r0, r3
 8009318:	f002 fc08 	bl	800bb2c <RCCEx_PLL3_Config>
 800931c:	4603      	mov	r3, r0
 800931e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009322:	e004      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800932a:	e000      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800932c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800932e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10a      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009336:	4ba5      	ldr	r3, [pc, #660]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800933a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800933e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009342:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009344:	4aa1      	ldr	r2, [pc, #644]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009346:	430b      	orrs	r3, r1
 8009348:	6513      	str	r3, [r2, #80]	@ 0x50
 800934a:	e003      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800934c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009350:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009360:	f04f 0900 	mov.w	r9, #0
 8009364:	ea58 0309 	orrs.w	r3, r8, r9
 8009368:	d047      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800936a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009370:	2b04      	cmp	r3, #4
 8009372:	d82a      	bhi.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009374:	a201      	add	r2, pc, #4	@ (adr r2, 800937c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937a:	bf00      	nop
 800937c:	08009391 	.word	0x08009391
 8009380:	0800939f 	.word	0x0800939f
 8009384:	080093b5 	.word	0x080093b5
 8009388:	080093d3 	.word	0x080093d3
 800938c:	080093d3 	.word	0x080093d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009390:	4b8e      	ldr	r3, [pc, #568]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009394:	4a8d      	ldr	r2, [pc, #564]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800939a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800939c:	e01a      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800939e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a2:	3308      	adds	r3, #8
 80093a4:	2100      	movs	r1, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	f002 fb0e 	bl	800b9c8 <RCCEx_PLL2_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093b2:	e00f      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b8:	3328      	adds	r3, #40	@ 0x28
 80093ba:	2100      	movs	r1, #0
 80093bc:	4618      	mov	r0, r3
 80093be:	f002 fbb5 	bl	800bb2c <RCCEx_PLL3_Config>
 80093c2:	4603      	mov	r3, r0
 80093c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093c8:	e004      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093d0:	e000      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80093d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093dc:	4b7b      	ldr	r3, [pc, #492]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e0:	f023 0107 	bic.w	r1, r3, #7
 80093e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ea:	4a78      	ldr	r2, [pc, #480]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093ec:	430b      	orrs	r3, r1
 80093ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80093f0:	e003      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009406:	f04f 0b00 	mov.w	fp, #0
 800940a:	ea5a 030b 	orrs.w	r3, sl, fp
 800940e:	d04c      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800941a:	d030      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800941c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009420:	d829      	bhi.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009422:	2bc0      	cmp	r3, #192	@ 0xc0
 8009424:	d02d      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009426:	2bc0      	cmp	r3, #192	@ 0xc0
 8009428:	d825      	bhi.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800942a:	2b80      	cmp	r3, #128	@ 0x80
 800942c:	d018      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800942e:	2b80      	cmp	r3, #128	@ 0x80
 8009430:	d821      	bhi.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009436:	2b40      	cmp	r3, #64	@ 0x40
 8009438:	d007      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800943a:	e01c      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800943c:	4b63      	ldr	r3, [pc, #396]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800943e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009440:	4a62      	ldr	r2, [pc, #392]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009448:	e01c      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800944a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800944e:	3308      	adds	r3, #8
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f002 fab8 	bl	800b9c8 <RCCEx_PLL2_Config>
 8009458:	4603      	mov	r3, r0
 800945a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800945e:	e011      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009464:	3328      	adds	r3, #40	@ 0x28
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f002 fb5f 	bl	800bb2c <RCCEx_PLL3_Config>
 800946e:	4603      	mov	r3, r0
 8009470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009474:	e006      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800947c:	e002      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800947e:	bf00      	nop
 8009480:	e000      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800948c:	4b4f      	ldr	r3, [pc, #316]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800948e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009490:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800949a:	4a4c      	ldr	r2, [pc, #304]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800949c:	430b      	orrs	r3, r1
 800949e:	6513      	str	r3, [r2, #80]	@ 0x50
 80094a0:	e003      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80094aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80094b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80094ba:	2300      	movs	r3, #0
 80094bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80094c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80094c4:	460b      	mov	r3, r1
 80094c6:	4313      	orrs	r3, r2
 80094c8:	d053      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80094ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80094d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80094d6:	d035      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80094d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80094dc:	d82e      	bhi.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80094de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80094e2:	d031      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80094e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80094e8:	d828      	bhi.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80094ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094ee:	d01a      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80094f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094f4:	d822      	bhi.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80094fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094fe:	d007      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009500:	e01c      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009502:	4b32      	ldr	r3, [pc, #200]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009506:	4a31      	ldr	r2, [pc, #196]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800950c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800950e:	e01c      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009514:	3308      	adds	r3, #8
 8009516:	2100      	movs	r1, #0
 8009518:	4618      	mov	r0, r3
 800951a:	f002 fa55 	bl	800b9c8 <RCCEx_PLL2_Config>
 800951e:	4603      	mov	r3, r0
 8009520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009524:	e011      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800952a:	3328      	adds	r3, #40	@ 0x28
 800952c:	2100      	movs	r1, #0
 800952e:	4618      	mov	r0, r3
 8009530:	f002 fafc 	bl	800bb2c <RCCEx_PLL3_Config>
 8009534:	4603      	mov	r3, r0
 8009536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800953a:	e006      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009542:	e002      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009544:	bf00      	nop
 8009546:	e000      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800954a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10b      	bne.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009552:	4b1e      	ldr	r3, [pc, #120]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009556:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009562:	4a1a      	ldr	r2, [pc, #104]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009564:	430b      	orrs	r3, r1
 8009566:	6593      	str	r3, [r2, #88]	@ 0x58
 8009568:	e003      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800956a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800956e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800957e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009582:	2300      	movs	r3, #0
 8009584:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009588:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800958c:	460b      	mov	r3, r1
 800958e:	4313      	orrs	r3, r2
 8009590:	d056      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009596:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800959a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800959e:	d038      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80095a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095a4:	d831      	bhi.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80095aa:	d034      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80095ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80095b0:	d82b      	bhi.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095b6:	d01d      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80095b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095bc:	d825      	bhi.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d006      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80095c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095c6:	d00a      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80095c8:	e01f      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095ca:	bf00      	nop
 80095cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095d0:	4ba2      	ldr	r3, [pc, #648]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d4:	4aa1      	ldr	r2, [pc, #644]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095dc:	e01c      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e2:	3308      	adds	r3, #8
 80095e4:	2100      	movs	r1, #0
 80095e6:	4618      	mov	r0, r3
 80095e8:	f002 f9ee 	bl	800b9c8 <RCCEx_PLL2_Config>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80095f2:	e011      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f8:	3328      	adds	r3, #40	@ 0x28
 80095fa:	2100      	movs	r1, #0
 80095fc:	4618      	mov	r0, r3
 80095fe:	f002 fa95 	bl	800bb2c <RCCEx_PLL3_Config>
 8009602:	4603      	mov	r3, r0
 8009604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009608:	e006      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009610:	e002      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009612:	bf00      	nop
 8009614:	e000      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009620:	4b8e      	ldr	r3, [pc, #568]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009624:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009630:	4a8a      	ldr	r2, [pc, #552]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009632:	430b      	orrs	r3, r1
 8009634:	6593      	str	r3, [r2, #88]	@ 0x58
 8009636:	e003      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800963c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800964c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009650:	2300      	movs	r3, #0
 8009652:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009656:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800965a:	460b      	mov	r3, r1
 800965c:	4313      	orrs	r3, r2
 800965e:	d03a      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009666:	2b30      	cmp	r3, #48	@ 0x30
 8009668:	d01f      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800966a:	2b30      	cmp	r3, #48	@ 0x30
 800966c:	d819      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800966e:	2b20      	cmp	r3, #32
 8009670:	d00c      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009672:	2b20      	cmp	r3, #32
 8009674:	d815      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d019      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800967a:	2b10      	cmp	r3, #16
 800967c:	d111      	bne.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800967e:	4b77      	ldr	r3, [pc, #476]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009682:	4a76      	ldr	r2, [pc, #472]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009688:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800968a:	e011      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800968c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009690:	3308      	adds	r3, #8
 8009692:	2102      	movs	r1, #2
 8009694:	4618      	mov	r0, r3
 8009696:	f002 f997 	bl	800b9c8 <RCCEx_PLL2_Config>
 800969a:	4603      	mov	r3, r0
 800969c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80096a0:	e006      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096a8:	e002      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80096aa:	bf00      	nop
 80096ac:	e000      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80096ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096b8:	4b68      	ldr	r3, [pc, #416]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80096c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096c6:	4a65      	ldr	r2, [pc, #404]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096c8:	430b      	orrs	r3, r1
 80096ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096cc:	e003      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80096d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80096e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80096e6:	2300      	movs	r3, #0
 80096e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80096ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80096f0:	460b      	mov	r3, r1
 80096f2:	4313      	orrs	r3, r2
 80096f4:	d051      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80096f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009700:	d035      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009706:	d82e      	bhi.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009708:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800970c:	d031      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800970e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009712:	d828      	bhi.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009718:	d01a      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800971a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800971e:	d822      	bhi.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009720:	2b00      	cmp	r3, #0
 8009722:	d003      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009728:	d007      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800972a:	e01c      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800972c:	4b4b      	ldr	r3, [pc, #300]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009730:	4a4a      	ldr	r2, [pc, #296]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009738:	e01c      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800973a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800973e:	3308      	adds	r3, #8
 8009740:	2100      	movs	r1, #0
 8009742:	4618      	mov	r0, r3
 8009744:	f002 f940 	bl	800b9c8 <RCCEx_PLL2_Config>
 8009748:	4603      	mov	r3, r0
 800974a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800974e:	e011      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009754:	3328      	adds	r3, #40	@ 0x28
 8009756:	2100      	movs	r1, #0
 8009758:	4618      	mov	r0, r3
 800975a:	f002 f9e7 	bl	800bb2c <RCCEx_PLL3_Config>
 800975e:	4603      	mov	r3, r0
 8009760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009764:	e006      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800976c:	e002      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800976e:	bf00      	nop
 8009770:	e000      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10a      	bne.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800977c:	4b37      	ldr	r3, [pc, #220]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800977e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009780:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800978a:	4a34      	ldr	r2, [pc, #208]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800978c:	430b      	orrs	r3, r1
 800978e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009790:	e003      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009796:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800979a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80097a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80097aa:	2300      	movs	r3, #0
 80097ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80097b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80097b4:	460b      	mov	r3, r1
 80097b6:	4313      	orrs	r3, r2
 80097b8:	d056      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80097ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097c4:	d033      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80097c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097ca:	d82c      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097d0:	d02f      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80097d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097d6:	d826      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097dc:	d02b      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80097de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097e2:	d820      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097e8:	d012      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80097ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ee:	d81a      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d022      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80097f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097f8:	d115      	bne.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fe:	3308      	adds	r3, #8
 8009800:	2101      	movs	r1, #1
 8009802:	4618      	mov	r0, r3
 8009804:	f002 f8e0 	bl	800b9c8 <RCCEx_PLL2_Config>
 8009808:	4603      	mov	r3, r0
 800980a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800980e:	e015      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009814:	3328      	adds	r3, #40	@ 0x28
 8009816:	2101      	movs	r1, #1
 8009818:	4618      	mov	r0, r3
 800981a:	f002 f987 	bl	800bb2c <RCCEx_PLL3_Config>
 800981e:	4603      	mov	r3, r0
 8009820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009824:	e00a      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800982c:	e006      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800982e:	bf00      	nop
 8009830:	e004      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009832:	bf00      	nop
 8009834:	e002      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009836:	bf00      	nop
 8009838:	e000      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800983a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800983c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10d      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009844:	4b05      	ldr	r3, [pc, #20]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009848:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800984c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009852:	4a02      	ldr	r2, [pc, #8]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009854:	430b      	orrs	r3, r1
 8009856:	6513      	str	r3, [r2, #80]	@ 0x50
 8009858:	e006      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800985a:	bf00      	nop
 800985c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009878:	2300      	movs	r3, #0
 800987a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800987e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009882:	460b      	mov	r3, r1
 8009884:	4313      	orrs	r3, r2
 8009886:	d055      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800988c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009894:	d033      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009896:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800989a:	d82c      	bhi.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800989c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098a0:	d02f      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80098a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098a6:	d826      	bhi.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098ac:	d02b      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80098ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098b2:	d820      	bhi.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098b8:	d012      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80098ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098be:	d81a      	bhi.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d022      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80098c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098c8:	d115      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ce:	3308      	adds	r3, #8
 80098d0:	2101      	movs	r1, #1
 80098d2:	4618      	mov	r0, r3
 80098d4:	f002 f878 	bl	800b9c8 <RCCEx_PLL2_Config>
 80098d8:	4603      	mov	r3, r0
 80098da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80098de:	e015      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e4:	3328      	adds	r3, #40	@ 0x28
 80098e6:	2101      	movs	r1, #1
 80098e8:	4618      	mov	r0, r3
 80098ea:	f002 f91f 	bl	800bb2c <RCCEx_PLL3_Config>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80098f4:	e00a      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098fc:	e006      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80098fe:	bf00      	nop
 8009900:	e004      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009902:	bf00      	nop
 8009904:	e002      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009906:	bf00      	nop
 8009908:	e000      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800990a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800990c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10b      	bne.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009914:	4ba3      	ldr	r3, [pc, #652]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009918:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800991c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009924:	4a9f      	ldr	r2, [pc, #636]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009926:	430b      	orrs	r3, r1
 8009928:	6593      	str	r3, [r2, #88]	@ 0x58
 800992a:	e003      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009940:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009944:	2300      	movs	r3, #0
 8009946:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800994a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800994e:	460b      	mov	r3, r1
 8009950:	4313      	orrs	r3, r2
 8009952:	d037      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800995a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800995e:	d00e      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009964:	d816      	bhi.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009966:	2b00      	cmp	r3, #0
 8009968:	d018      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800996a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800996e:	d111      	bne.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009970:	4b8c      	ldr	r3, [pc, #560]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009974:	4a8b      	ldr	r2, [pc, #556]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800997a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800997c:	e00f      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800997e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009982:	3308      	adds	r3, #8
 8009984:	2101      	movs	r1, #1
 8009986:	4618      	mov	r0, r3
 8009988:	f002 f81e 	bl	800b9c8 <RCCEx_PLL2_Config>
 800998c:	4603      	mov	r3, r0
 800998e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009992:	e004      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800999a:	e000      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800999c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800999e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10a      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80099a6:	4b7f      	ldr	r3, [pc, #508]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80099ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099b4:	4a7b      	ldr	r2, [pc, #492]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099b6:	430b      	orrs	r3, r1
 80099b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80099ba:	e003      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80099c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80099d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099d4:	2300      	movs	r3, #0
 80099d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80099da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80099de:	460b      	mov	r3, r1
 80099e0:	4313      	orrs	r3, r2
 80099e2:	d039      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80099e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d81c      	bhi.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80099ee:	a201      	add	r2, pc, #4	@ (adr r2, 80099f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f4:	08009a31 	.word	0x08009a31
 80099f8:	08009a05 	.word	0x08009a05
 80099fc:	08009a13 	.word	0x08009a13
 8009a00:	08009a31 	.word	0x08009a31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a04:	4b67      	ldr	r3, [pc, #412]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a08:	4a66      	ldr	r2, [pc, #408]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a10:	e00f      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a16:	3308      	adds	r3, #8
 8009a18:	2102      	movs	r1, #2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f001 ffd4 	bl	800b9c8 <RCCEx_PLL2_Config>
 8009a20:	4603      	mov	r3, r0
 8009a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a26:	e004      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a2e:	e000      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10a      	bne.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a3e:	f023 0103 	bic.w	r1, r3, #3
 8009a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a48:	4a56      	ldr	r2, [pc, #344]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a4a:	430b      	orrs	r3, r1
 8009a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a4e:	e003      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009a64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009a72:	460b      	mov	r3, r1
 8009a74:	4313      	orrs	r3, r2
 8009a76:	f000 809f 	beq.w	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a4a      	ldr	r2, [pc, #296]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a86:	f7fd f893 	bl	8006bb0 <HAL_GetTick>
 8009a8a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a8e:	e00b      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a90:	f7fd f88e 	bl	8006bb0 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b64      	cmp	r3, #100	@ 0x64
 8009a9e:	d903      	bls.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aa6:	e005      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d0ed      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d179      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009abc:	4b39      	ldr	r3, [pc, #228]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009abe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009ac8:	4053      	eors	r3, r2
 8009aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d015      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ad2:	4b34      	ldr	r3, [pc, #208]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ada:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ade:	4b31      	ldr	r3, [pc, #196]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ae2:	4a30      	ldr	r2, [pc, #192]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ae8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009aea:	4b2e      	ldr	r3, [pc, #184]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aee:	4a2d      	ldr	r2, [pc, #180]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009af4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009af6:	4a2b      	ldr	r2, [pc, #172]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009af8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009afc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b0a:	d118      	bne.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b0c:	f7fd f850 	bl	8006bb0 <HAL_GetTick>
 8009b10:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b14:	e00d      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b16:	f7fd f84b 	bl	8006bb0 <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009b20:	1ad2      	subs	r2, r2, r3
 8009b22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d903      	bls.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009b30:	e005      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b32:	4b1c      	ldr	r3, [pc, #112]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b36:	f003 0302 	and.w	r3, r3, #2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d0eb      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d129      	bne.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b56:	d10e      	bne.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009b58:	4b12      	ldr	r3, [pc, #72]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b68:	091a      	lsrs	r2, r3, #4
 8009b6a:	4b10      	ldr	r3, [pc, #64]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b70:	430b      	orrs	r3, r1
 8009b72:	6113      	str	r3, [r2, #16]
 8009b74:	e005      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009b76:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b7c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b80:	6113      	str	r3, [r2, #16]
 8009b82:	4b08      	ldr	r3, [pc, #32]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b84:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b92:	4a04      	ldr	r2, [pc, #16]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b94:	430b      	orrs	r3, r1
 8009b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b98:	e00e      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009ba2:	e009      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009ba4:	58024400 	.word	0x58024400
 8009ba8:	58024800 	.word	0x58024800
 8009bac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f002 0301 	and.w	r3, r2, #1
 8009bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009bce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	f000 8089 	beq.w	8009cec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009be0:	2b28      	cmp	r3, #40	@ 0x28
 8009be2:	d86b      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009be4:	a201      	add	r2, pc, #4	@ (adr r2, 8009bec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bea:	bf00      	nop
 8009bec:	08009cc5 	.word	0x08009cc5
 8009bf0:	08009cbd 	.word	0x08009cbd
 8009bf4:	08009cbd 	.word	0x08009cbd
 8009bf8:	08009cbd 	.word	0x08009cbd
 8009bfc:	08009cbd 	.word	0x08009cbd
 8009c00:	08009cbd 	.word	0x08009cbd
 8009c04:	08009cbd 	.word	0x08009cbd
 8009c08:	08009cbd 	.word	0x08009cbd
 8009c0c:	08009c91 	.word	0x08009c91
 8009c10:	08009cbd 	.word	0x08009cbd
 8009c14:	08009cbd 	.word	0x08009cbd
 8009c18:	08009cbd 	.word	0x08009cbd
 8009c1c:	08009cbd 	.word	0x08009cbd
 8009c20:	08009cbd 	.word	0x08009cbd
 8009c24:	08009cbd 	.word	0x08009cbd
 8009c28:	08009cbd 	.word	0x08009cbd
 8009c2c:	08009ca7 	.word	0x08009ca7
 8009c30:	08009cbd 	.word	0x08009cbd
 8009c34:	08009cbd 	.word	0x08009cbd
 8009c38:	08009cbd 	.word	0x08009cbd
 8009c3c:	08009cbd 	.word	0x08009cbd
 8009c40:	08009cbd 	.word	0x08009cbd
 8009c44:	08009cbd 	.word	0x08009cbd
 8009c48:	08009cbd 	.word	0x08009cbd
 8009c4c:	08009cc5 	.word	0x08009cc5
 8009c50:	08009cbd 	.word	0x08009cbd
 8009c54:	08009cbd 	.word	0x08009cbd
 8009c58:	08009cbd 	.word	0x08009cbd
 8009c5c:	08009cbd 	.word	0x08009cbd
 8009c60:	08009cbd 	.word	0x08009cbd
 8009c64:	08009cbd 	.word	0x08009cbd
 8009c68:	08009cbd 	.word	0x08009cbd
 8009c6c:	08009cc5 	.word	0x08009cc5
 8009c70:	08009cbd 	.word	0x08009cbd
 8009c74:	08009cbd 	.word	0x08009cbd
 8009c78:	08009cbd 	.word	0x08009cbd
 8009c7c:	08009cbd 	.word	0x08009cbd
 8009c80:	08009cbd 	.word	0x08009cbd
 8009c84:	08009cbd 	.word	0x08009cbd
 8009c88:	08009cbd 	.word	0x08009cbd
 8009c8c:	08009cc5 	.word	0x08009cc5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c94:	3308      	adds	r3, #8
 8009c96:	2101      	movs	r1, #1
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f001 fe95 	bl	800b9c8 <RCCEx_PLL2_Config>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009ca4:	e00f      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009caa:	3328      	adds	r3, #40	@ 0x28
 8009cac:	2101      	movs	r1, #1
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 ff3c 	bl	800bb2c <RCCEx_PLL3_Config>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009cba:	e004      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cc2:	e000      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10a      	bne.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009cce:	4bbf      	ldr	r3, [pc, #764]	@ (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cd2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cdc:	4abb      	ldr	r2, [pc, #748]	@ (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cde:	430b      	orrs	r3, r1
 8009ce0:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ce2:	e003      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f002 0302 	and.w	r3, r2, #2
 8009cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009d02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009d06:	460b      	mov	r3, r1
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	d041      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	d824      	bhi.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009d16:	a201      	add	r2, pc, #4	@ (adr r2, 8009d1c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d69 	.word	0x08009d69
 8009d20:	08009d35 	.word	0x08009d35
 8009d24:	08009d4b 	.word	0x08009d4b
 8009d28:	08009d69 	.word	0x08009d69
 8009d2c:	08009d69 	.word	0x08009d69
 8009d30:	08009d69 	.word	0x08009d69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d38:	3308      	adds	r3, #8
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f001 fe43 	bl	800b9c8 <RCCEx_PLL2_Config>
 8009d42:	4603      	mov	r3, r0
 8009d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d48:	e00f      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d4e:	3328      	adds	r3, #40	@ 0x28
 8009d50:	2101      	movs	r1, #1
 8009d52:	4618      	mov	r0, r3
 8009d54:	f001 feea 	bl	800bb2c <RCCEx_PLL3_Config>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d5e:	e004      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d66:	e000      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10a      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009d72:	4b96      	ldr	r3, [pc, #600]	@ (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d76:	f023 0107 	bic.w	r1, r3, #7
 8009d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d80:	4a92      	ldr	r2, [pc, #584]	@ (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d82:	430b      	orrs	r3, r1
 8009d84:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d86:	e003      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	f002 0304 	and.w	r3, r2, #4
 8009d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009da0:	2300      	movs	r3, #0
 8009da2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009da6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4313      	orrs	r3, r2
 8009dae:	d044      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009db8:	2b05      	cmp	r3, #5
 8009dba:	d825      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc2:	bf00      	nop
 8009dc4:	08009e11 	.word	0x08009e11
 8009dc8:	08009ddd 	.word	0x08009ddd
 8009dcc:	08009df3 	.word	0x08009df3
 8009dd0:	08009e11 	.word	0x08009e11
 8009dd4:	08009e11 	.word	0x08009e11
 8009dd8:	08009e11 	.word	0x08009e11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de0:	3308      	adds	r3, #8
 8009de2:	2101      	movs	r1, #1
 8009de4:	4618      	mov	r0, r3
 8009de6:	f001 fdef 	bl	800b9c8 <RCCEx_PLL2_Config>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009df0:	e00f      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df6:	3328      	adds	r3, #40	@ 0x28
 8009df8:	2101      	movs	r1, #1
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 fe96 	bl	800bb2c <RCCEx_PLL3_Config>
 8009e00:	4603      	mov	r3, r0
 8009e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e06:	e004      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e0e:	e000      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10b      	bne.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e1a:	4b6c      	ldr	r3, [pc, #432]	@ (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e1e:	f023 0107 	bic.w	r1, r3, #7
 8009e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e2a:	4a68      	ldr	r2, [pc, #416]	@ (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e2c:	430b      	orrs	r3, r1
 8009e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e30:	e003      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f002 0320 	and.w	r3, r2, #32
 8009e46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e54:	460b      	mov	r3, r1
 8009e56:	4313      	orrs	r3, r2
 8009e58:	d055      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e66:	d033      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e6c:	d82c      	bhi.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e72:	d02f      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e78:	d826      	bhi.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e7e:	d02b      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009e80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e84:	d820      	bhi.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e8a:	d012      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e90:	d81a      	bhi.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d022      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e9a:	d115      	bne.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f001 fd8f 	bl	800b9c8 <RCCEx_PLL2_Config>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009eb0:	e015      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb6:	3328      	adds	r3, #40	@ 0x28
 8009eb8:	2102      	movs	r1, #2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 fe36 	bl	800bb2c <RCCEx_PLL3_Config>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ec6:	e00a      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ece:	e006      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ed0:	bf00      	nop
 8009ed2:	e004      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ed4:	bf00      	nop
 8009ed6:	e002      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ed8:	bf00      	nop
 8009eda:	e000      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10b      	bne.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ee6:	4b39      	ldr	r3, [pc, #228]	@ (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ef6:	4a35      	ldr	r2, [pc, #212]	@ (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ef8:	430b      	orrs	r3, r1
 8009efa:	6553      	str	r3, [r2, #84]	@ 0x54
 8009efc:	e003      	b.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f16:	2300      	movs	r3, #0
 8009f18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009f1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4313      	orrs	r3, r2
 8009f24:	d058      	beq.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f2e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009f32:	d033      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009f34:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009f38:	d82c      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f3e:	d02f      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009f40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f44:	d826      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f4a:	d02b      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009f4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f50:	d820      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f56:	d012      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f5c:	d81a      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d022      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f66:	d115      	bne.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	2100      	movs	r1, #0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 fd29 	bl	800b9c8 <RCCEx_PLL2_Config>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f7c:	e015      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f82:	3328      	adds	r3, #40	@ 0x28
 8009f84:	2102      	movs	r1, #2
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 fdd0 	bl	800bb2c <RCCEx_PLL3_Config>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f92:	e00a      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f9a:	e006      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f9c:	bf00      	nop
 8009f9e:	e004      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fa0:	bf00      	nop
 8009fa2:	e002      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fa4:	bf00      	nop
 8009fa6:	e000      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10e      	bne.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009fb2:	4b06      	ldr	r3, [pc, #24]	@ (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fb6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009fc2:	4a02      	ldr	r2, [pc, #8]	@ (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fc8:	e006      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009fca:	bf00      	nop
 8009fcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009fe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009fee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	d055      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a000:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a004:	d033      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a006:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a00a:	d82c      	bhi.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a00c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a010:	d02f      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a016:	d826      	bhi.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a018:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a01c:	d02b      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a01e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a022:	d820      	bhi.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a024:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a028:	d012      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a02a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a02e:	d81a      	bhi.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a030:	2b00      	cmp	r3, #0
 800a032:	d022      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a038:	d115      	bne.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a03e:	3308      	adds	r3, #8
 800a040:	2100      	movs	r1, #0
 800a042:	4618      	mov	r0, r3
 800a044:	f001 fcc0 	bl	800b9c8 <RCCEx_PLL2_Config>
 800a048:	4603      	mov	r3, r0
 800a04a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a04e:	e015      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a054:	3328      	adds	r3, #40	@ 0x28
 800a056:	2102      	movs	r1, #2
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 fd67 	bl	800bb2c <RCCEx_PLL3_Config>
 800a05e:	4603      	mov	r3, r0
 800a060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a064:	e00a      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a06c:	e006      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a06e:	bf00      	nop
 800a070:	e004      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a072:	bf00      	nop
 800a074:	e002      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a076:	bf00      	nop
 800a078:	e000      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a07a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a07c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10b      	bne.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a084:	4ba1      	ldr	r3, [pc, #644]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a088:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a094:	4a9d      	ldr	r2, [pc, #628]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a096:	430b      	orrs	r3, r1
 800a098:	6593      	str	r3, [r2, #88]	@ 0x58
 800a09a:	e003      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f002 0308 	and.w	r3, r2, #8
 800a0b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a0ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	d01e      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0d0:	d10c      	bne.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d6:	3328      	adds	r3, #40	@ 0x28
 800a0d8:	2102      	movs	r1, #2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f001 fd26 	bl	800bb2c <RCCEx_PLL3_Config>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a0ec:	4b87      	ldr	r3, [pc, #540]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0fc:	4a83      	ldr	r2, [pc, #524]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0fe:	430b      	orrs	r3, r1
 800a100:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f002 0310 	and.w	r3, r2, #16
 800a10e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a112:	2300      	movs	r3, #0
 800a114:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a118:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a11c:	460b      	mov	r3, r1
 800a11e:	4313      	orrs	r3, r2
 800a120:	d01e      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a126:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a12a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a12e:	d10c      	bne.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a134:	3328      	adds	r3, #40	@ 0x28
 800a136:	2102      	movs	r1, #2
 800a138:	4618      	mov	r0, r3
 800a13a:	f001 fcf7 	bl	800bb2c <RCCEx_PLL3_Config>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a14a:	4b70      	ldr	r3, [pc, #448]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a14c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a14e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a156:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a15a:	4a6c      	ldr	r2, [pc, #432]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a15c:	430b      	orrs	r3, r1
 800a15e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a16c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a170:	2300      	movs	r3, #0
 800a172:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a176:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a17a:	460b      	mov	r3, r1
 800a17c:	4313      	orrs	r3, r2
 800a17e:	d03e      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a184:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a18c:	d022      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a18e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a192:	d81b      	bhi.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a194:	2b00      	cmp	r3, #0
 800a196:	d003      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a19c:	d00b      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a19e:	e015      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f001 fc0d 	bl	800b9c8 <RCCEx_PLL2_Config>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a1b4:	e00f      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ba:	3328      	adds	r3, #40	@ 0x28
 800a1bc:	2102      	movs	r1, #2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f001 fcb4 	bl	800bb2c <RCCEx_PLL3_Config>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a1ca:	e004      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1d2:	e000      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a1d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10b      	bne.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a1de:	4b4b      	ldr	r3, [pc, #300]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1ee:	4a47      	ldr	r2, [pc, #284]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1f4:	e003      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a20a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a20c:	2300      	movs	r3, #0
 800a20e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a210:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a214:	460b      	mov	r3, r1
 800a216:	4313      	orrs	r3, r2
 800a218:	d03b      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a222:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a226:	d01f      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a228:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a22c:	d818      	bhi.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a22e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a232:	d003      	beq.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a234:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a238:	d007      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a23a:	e011      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a23c:	4b33      	ldr	r3, [pc, #204]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a240:	4a32      	ldr	r2, [pc, #200]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a248:	e00f      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a24e:	3328      	adds	r3, #40	@ 0x28
 800a250:	2101      	movs	r1, #1
 800a252:	4618      	mov	r0, r3
 800a254:	f001 fc6a 	bl	800bb2c <RCCEx_PLL3_Config>
 800a258:	4603      	mov	r3, r0
 800a25a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a25e:	e004      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a266:	e000      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a26a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a272:	4b26      	ldr	r3, [pc, #152]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a276:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a282:	4a22      	ldr	r2, [pc, #136]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a284:	430b      	orrs	r3, r1
 800a286:	6553      	str	r3, [r2, #84]	@ 0x54
 800a288:	e003      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a28a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a28e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a29e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a2a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	d034      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d003      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a2b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2bc:	d007      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a2be:	e011      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2c0:	4b12      	ldr	r3, [pc, #72]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c4:	4a11      	ldr	r2, [pc, #68]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a2cc:	e00e      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	2102      	movs	r1, #2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f001 fb76 	bl	800b9c8 <RCCEx_PLL2_Config>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a2e2:	e003      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10d      	bne.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a2f4:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a302:	4a02      	ldr	r2, [pc, #8]	@ (800a30c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a304:	430b      	orrs	r3, r1
 800a306:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a308:	e006      	b.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a30a:	bf00      	nop
 800a30c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a324:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a326:	2300      	movs	r3, #0
 800a328:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a32a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a32e:	460b      	mov	r3, r1
 800a330:	4313      	orrs	r3, r2
 800a332:	d00c      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a338:	3328      	adds	r3, #40	@ 0x28
 800a33a:	2102      	movs	r1, #2
 800a33c:	4618      	mov	r0, r3
 800a33e:	f001 fbf5 	bl	800bb2c <RCCEx_PLL3_Config>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a35a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a35c:	2300      	movs	r3, #0
 800a35e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a360:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a364:	460b      	mov	r3, r1
 800a366:	4313      	orrs	r3, r2
 800a368:	d038      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a372:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a376:	d018      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a378:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a37c:	d811      	bhi.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a37e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a382:	d014      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a388:	d80b      	bhi.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d011      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a38e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a392:	d106      	bne.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a394:	4bc3      	ldr	r3, [pc, #780]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a398:	4ac2      	ldr	r2, [pc, #776]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a39a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a39e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a3a0:	e008      	b.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3a8:	e004      	b.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a3aa:	bf00      	nop
 800a3ac:	e002      	b.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a3ae:	bf00      	nop
 800a3b0:	e000      	b.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a3b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10b      	bne.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3bc:	4bb9      	ldr	r3, [pc, #740]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3cc:	4ab5      	ldr	r2, [pc, #724]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3d2:	e003      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a3e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	d009      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3f8:	4baa      	ldr	r3, [pc, #680]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a406:	4aa7      	ldr	r2, [pc, #668]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a408:	430b      	orrs	r3, r1
 800a40a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a418:	653b      	str	r3, [r7, #80]	@ 0x50
 800a41a:	2300      	movs	r3, #0
 800a41c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a41e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a422:	460b      	mov	r3, r1
 800a424:	4313      	orrs	r3, r2
 800a426:	d00a      	beq.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a428:	4b9e      	ldr	r3, [pc, #632]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a434:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a438:	4a9a      	ldr	r2, [pc, #616]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a43a:	430b      	orrs	r3, r1
 800a43c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a44a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a44c:	2300      	movs	r3, #0
 800a44e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a450:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a454:	460b      	mov	r3, r1
 800a456:	4313      	orrs	r3, r2
 800a458:	d009      	beq.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a45a:	4b92      	ldr	r3, [pc, #584]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a45c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a45e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a468:	4a8e      	ldr	r2, [pc, #568]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a46a:	430b      	orrs	r3, r1
 800a46c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a47a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a47c:	2300      	movs	r3, #0
 800a47e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a480:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a484:	460b      	mov	r3, r1
 800a486:	4313      	orrs	r3, r2
 800a488:	d00e      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a48a:	4b86      	ldr	r3, [pc, #536]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	4a85      	ldr	r2, [pc, #532]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a490:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a494:	6113      	str	r3, [r2, #16]
 800a496:	4b83      	ldr	r3, [pc, #524]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a498:	6919      	ldr	r1, [r3, #16]
 800a49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a49e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a4a2:	4a80      	ldr	r2, [pc, #512]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4a4:	430b      	orrs	r3, r1
 800a4a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a4a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a4b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	d009      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a4c4:	4b77      	ldr	r3, [pc, #476]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4c8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d2:	4a74      	ldr	r2, [pc, #464]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4d4:	430b      	orrs	r3, r1
 800a4d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a4e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	d00a      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a4f4:	4b6b      	ldr	r3, [pc, #428]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4f8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a504:	4a67      	ldr	r2, [pc, #412]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a506:	430b      	orrs	r3, r1
 800a508:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	2100      	movs	r1, #0
 800a514:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a51c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a520:	460b      	mov	r3, r1
 800a522:	4313      	orrs	r3, r2
 800a524:	d011      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a52a:	3308      	adds	r3, #8
 800a52c:	2100      	movs	r1, #0
 800a52e:	4618      	mov	r0, r3
 800a530:	f001 fa4a 	bl	800b9c8 <RCCEx_PLL2_Config>
 800a534:	4603      	mov	r3, r0
 800a536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a53a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a552:	2100      	movs	r1, #0
 800a554:	6239      	str	r1, [r7, #32]
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a55c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a560:	460b      	mov	r3, r1
 800a562:	4313      	orrs	r3, r2
 800a564:	d011      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a56a:	3308      	adds	r3, #8
 800a56c:	2101      	movs	r1, #1
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 fa2a 	bl	800b9c8 <RCCEx_PLL2_Config>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a57a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d003      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	2100      	movs	r1, #0
 800a594:	61b9      	str	r1, [r7, #24]
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	61fb      	str	r3, [r7, #28]
 800a59c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	d011      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	2102      	movs	r1, #2
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f001 fa0a 	bl	800b9c8 <RCCEx_PLL2_Config>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d003      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	6139      	str	r1, [r7, #16]
 800a5d6:	f003 0308 	and.w	r3, r3, #8
 800a5da:	617b      	str	r3, [r7, #20]
 800a5dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	d011      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ea:	3328      	adds	r3, #40	@ 0x28
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f001 fa9c 	bl	800bb2c <RCCEx_PLL3_Config>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	2100      	movs	r1, #0
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	f003 0310 	and.w	r3, r3, #16
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a620:	460b      	mov	r3, r1
 800a622:	4313      	orrs	r3, r2
 800a624:	d011      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a62a:	3328      	adds	r3, #40	@ 0x28
 800a62c:	2101      	movs	r1, #1
 800a62e:	4618      	mov	r0, r3
 800a630:	f001 fa7c 	bl	800bb2c <RCCEx_PLL3_Config>
 800a634:	4603      	mov	r3, r0
 800a636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a63a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d003      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a652:	2100      	movs	r1, #0
 800a654:	6039      	str	r1, [r7, #0]
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	607b      	str	r3, [r7, #4]
 800a65c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a660:	460b      	mov	r3, r1
 800a662:	4313      	orrs	r3, r2
 800a664:	d011      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a66a:	3328      	adds	r3, #40	@ 0x28
 800a66c:	2102      	movs	r1, #2
 800a66e:	4618      	mov	r0, r3
 800a670:	f001 fa5c 	bl	800bb2c <RCCEx_PLL3_Config>
 800a674:	4603      	mov	r3, r0
 800a676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a67a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d003      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a68a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	e000      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
}
 800a698:	4618      	mov	r0, r3
 800a69a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6a4:	58024400 	.word	0x58024400

0800a6a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b090      	sub	sp, #64	@ 0x40
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a6b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6b6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a6ba:	430b      	orrs	r3, r1
 800a6bc:	f040 8094 	bne.w	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a6c0:	4b9e      	ldr	r3, [pc, #632]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	f200 8087 	bhi.w	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a6ed 	.word	0x0800a6ed
 800a6dc:	0800a715 	.word	0x0800a715
 800a6e0:	0800a73d 	.word	0x0800a73d
 800a6e4:	0800a7d9 	.word	0x0800a7d9
 800a6e8:	0800a765 	.word	0x0800a765
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6ec:	4b93      	ldr	r3, [pc, #588]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6f8:	d108      	bne.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6fe:	4618      	mov	r0, r3
 800a700:	f001 f810 	bl	800b724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a708:	f000 bd45 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a710:	f000 bd41 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a714:	4b89      	ldr	r3, [pc, #548]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a71c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a720:	d108      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a722:	f107 0318 	add.w	r3, r7, #24
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fd54 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a730:	f000 bd31 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a734:	2300      	movs	r3, #0
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a738:	f000 bd2d 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a73c:	4b7f      	ldr	r3, [pc, #508]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a748:	d108      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a74a:	f107 030c 	add.w	r3, r7, #12
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fe94 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a758:	f000 bd1d 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a760:	f000 bd19 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a764:	4b75      	ldr	r3, [pc, #468]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a768:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a76c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a76e:	4b73      	ldr	r3, [pc, #460]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0304 	and.w	r3, r3, #4
 800a776:	2b04      	cmp	r3, #4
 800a778:	d10c      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d109      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a780:	4b6e      	ldr	r3, [pc, #440]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	08db      	lsrs	r3, r3, #3
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	4a6d      	ldr	r2, [pc, #436]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a78c:	fa22 f303 	lsr.w	r3, r2, r3
 800a790:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a792:	e01f      	b.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a794:	4b69      	ldr	r3, [pc, #420]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a79c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7a0:	d106      	bne.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7a8:	d102      	bne.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7aa:	4b66      	ldr	r3, [pc, #408]	@ (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7ae:	e011      	b.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7b0:	4b62      	ldr	r3, [pc, #392]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7bc:	d106      	bne.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7c4:	d102      	bne.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7c6:	4b60      	ldr	r3, [pc, #384]	@ (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7ca:	e003      	b.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7d0:	f000 bce1 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7d4:	f000 bcdf 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7d8:	4b5c      	ldr	r3, [pc, #368]	@ (800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7dc:	f000 bcdb 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e4:	f000 bcd7 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a7e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7ec:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a7f0:	430b      	orrs	r3, r1
 800a7f2:	f040 80ad 	bne.w	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a7f6:	4b51      	ldr	r3, [pc, #324]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7fa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a7fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a806:	d056      	beq.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a80e:	f200 8090 	bhi.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a814:	2bc0      	cmp	r3, #192	@ 0xc0
 800a816:	f000 8088 	beq.w	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a81e:	f200 8088 	bhi.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	2b80      	cmp	r3, #128	@ 0x80
 800a826:	d032      	beq.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82a:	2b80      	cmp	r3, #128	@ 0x80
 800a82c:	f200 8081 	bhi.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a838:	2b40      	cmp	r3, #64	@ 0x40
 800a83a:	d014      	beq.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a83c:	e079      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a83e:	4b3f      	ldr	r3, [pc, #252]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a84a:	d108      	bne.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a84c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a850:	4618      	mov	r0, r3
 800a852:	f000 ff67 	bl	800b724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a85a:	f000 bc9c 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a862:	f000 bc98 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a866:	4b35      	ldr	r3, [pc, #212]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a86e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a872:	d108      	bne.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a874:	f107 0318 	add.w	r3, r7, #24
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fcab 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a882:	f000 bc88 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a88a:	f000 bc84 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a88e:	4b2b      	ldr	r3, [pc, #172]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a89a:	d108      	bne.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a89c:	f107 030c 	add.w	r3, r7, #12
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fdeb 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8aa:	f000 bc74 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b2:	f000 bc70 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8b6:	4b21      	ldr	r3, [pc, #132]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8c0:	4b1e      	ldr	r3, [pc, #120]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 0304 	and.w	r3, r3, #4
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	d10c      	bne.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d109      	bne.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8d2:	4b1a      	ldr	r3, [pc, #104]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	08db      	lsrs	r3, r3, #3
 800a8d8:	f003 0303 	and.w	r3, r3, #3
 800a8dc:	4a18      	ldr	r2, [pc, #96]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a8de:	fa22 f303 	lsr.w	r3, r2, r3
 800a8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8e4:	e01f      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8e6:	4b15      	ldr	r3, [pc, #84]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8f2:	d106      	bne.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8fa:	d102      	bne.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8fc:	4b11      	ldr	r3, [pc, #68]	@ (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a900:	e011      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a902:	4b0e      	ldr	r3, [pc, #56]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a90a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a90e:	d106      	bne.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a916:	d102      	bne.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a918:	4b0b      	ldr	r3, [pc, #44]	@ (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a91c:	e003      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a922:	f000 bc38 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a926:	f000 bc36 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a92a:	4b08      	ldr	r3, [pc, #32]	@ (800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a92e:	f000 bc32 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a936:	f000 bc2e 	b.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a93a:	bf00      	nop
 800a93c:	58024400 	.word	0x58024400
 800a940:	03d09000 	.word	0x03d09000
 800a944:	003d0900 	.word	0x003d0900
 800a948:	007a1200 	.word	0x007a1200
 800a94c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a950:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a954:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a958:	430b      	orrs	r3, r1
 800a95a:	f040 809c 	bne.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a95e:	4b9e      	ldr	r3, [pc, #632]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a962:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a966:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a96e:	d054      	beq.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a972:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a976:	f200 808b 	bhi.w	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a980:	f000 8083 	beq.w	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a986:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a98a:	f200 8081 	bhi.w	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a994:	d02f      	beq.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a99c:	d878      	bhi.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9aa:	d012      	beq.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a9ac:	e070      	b.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9ae:	4b8a      	ldr	r3, [pc, #552]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9ba:	d107      	bne.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 feaf 	bl	800b724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ca:	e3e4      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d0:	e3e1      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9d2:	4b81      	ldr	r3, [pc, #516]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9de:	d107      	bne.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9e0:	f107 0318 	add.w	r3, r7, #24
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f000 fbf5 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ee:	e3d2      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f4:	e3cf      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9f6:	4b78      	ldr	r3, [pc, #480]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa02:	d107      	bne.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa04:	f107 030c 	add.w	r3, r7, #12
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fd37 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa12:	e3c0      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa18:	e3bd      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa1a:	4b6f      	ldr	r3, [pc, #444]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa24:	4b6c      	ldr	r3, [pc, #432]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 0304 	and.w	r3, r3, #4
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d10c      	bne.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aa30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d109      	bne.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa36:	4b68      	ldr	r3, [pc, #416]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	08db      	lsrs	r3, r3, #3
 800aa3c:	f003 0303 	and.w	r3, r3, #3
 800aa40:	4a66      	ldr	r2, [pc, #408]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aa42:	fa22 f303 	lsr.w	r3, r2, r3
 800aa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa48:	e01e      	b.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa4a:	4b63      	ldr	r3, [pc, #396]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa56:	d106      	bne.n	800aa66 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aa58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa5e:	d102      	bne.n	800aa66 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa60:	4b5f      	ldr	r3, [pc, #380]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aa62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa64:	e010      	b.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa66:	4b5c      	ldr	r3, [pc, #368]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa72:	d106      	bne.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aa74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa7a:	d102      	bne.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa7c:	4b59      	ldr	r3, [pc, #356]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa80:	e002      	b.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa86:	e386      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa88:	e385      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa8a:	4b57      	ldr	r3, [pc, #348]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aa8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8e:	e382      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa94:	e37f      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aa96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa9a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800aa9e:	430b      	orrs	r3, r1
 800aaa0:	f040 80a7 	bne.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aaa4:	4b4c      	ldr	r3, [pc, #304]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaa8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800aaac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aab4:	d055      	beq.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800aab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aabc:	f200 8096 	bhi.w	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aac6:	f000 8084 	beq.w	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800aaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aacc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aad0:	f200 808c 	bhi.w	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aada:	d030      	beq.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aae2:	f200 8083 	bhi.w	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d004      	beq.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800aaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaf2:	d012      	beq.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800aaf4:	e07a      	b.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaf6:	4b38      	ldr	r3, [pc, #224]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aafe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab02:	d107      	bne.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 fe0b 	bl	800b724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab12:	e340      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab18:	e33d      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab1a:	4b2f      	ldr	r3, [pc, #188]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab26:	d107      	bne.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab28:	f107 0318 	add.w	r3, r7, #24
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fb51 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab36:	e32e      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab3c:	e32b      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab3e:	4b26      	ldr	r3, [pc, #152]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab4a:	d107      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab4c:	f107 030c 	add.w	r3, r7, #12
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 fc93 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab5a:	e31c      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab60:	e319      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab62:	4b1d      	ldr	r3, [pc, #116]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab6c:	4b1a      	ldr	r3, [pc, #104]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b04      	cmp	r3, #4
 800ab76:	d10c      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ab78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d109      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab7e:	4b16      	ldr	r3, [pc, #88]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	08db      	lsrs	r3, r3, #3
 800ab84:	f003 0303 	and.w	r3, r3, #3
 800ab88:	4a14      	ldr	r2, [pc, #80]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ab8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab90:	e01e      	b.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab92:	4b11      	ldr	r3, [pc, #68]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab9e:	d106      	bne.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800aba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aba6:	d102      	bne.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aba8:	4b0d      	ldr	r3, [pc, #52]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800abaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abac:	e010      	b.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abae:	4b0a      	ldr	r3, [pc, #40]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abba:	d106      	bne.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800abbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abc2:	d102      	bne.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abc4:	4b07      	ldr	r3, [pc, #28]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800abc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abc8:	e002      	b.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800abce:	e2e2      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abd0:	e2e1      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abd2:	4b05      	ldr	r3, [pc, #20]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800abd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd6:	e2de      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abd8:	58024400 	.word	0x58024400
 800abdc:	03d09000 	.word	0x03d09000
 800abe0:	003d0900 	.word	0x003d0900
 800abe4:	007a1200 	.word	0x007a1200
 800abe8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf0:	e2d1      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800abf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abf6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800abfa:	430b      	orrs	r3, r1
 800abfc:	f040 809c 	bne.w	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ac00:	4b93      	ldr	r3, [pc, #588]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac04:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ac08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac10:	d054      	beq.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ac12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac18:	f200 808b 	bhi.w	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac22:	f000 8083 	beq.w	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ac26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac2c:	f200 8081 	bhi.w	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac36:	d02f      	beq.n	800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ac38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac3e:	d878      	bhi.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d004      	beq.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ac46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac4c:	d012      	beq.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ac4e:	e070      	b.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac50:	4b7f      	ldr	r3, [pc, #508]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac5c:	d107      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 fd5e 	bl	800b724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac6c:	e293      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac72:	e290      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac74:	4b76      	ldr	r3, [pc, #472]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac80:	d107      	bne.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac82:	f107 0318 	add.w	r3, r7, #24
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 faa4 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac90:	e281      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac96:	e27e      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac98:	4b6d      	ldr	r3, [pc, #436]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aca4:	d107      	bne.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aca6:	f107 030c 	add.w	r3, r7, #12
 800acaa:	4618      	mov	r0, r3
 800acac:	f000 fbe6 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acb4:	e26f      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acba:	e26c      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acbc:	4b64      	ldr	r3, [pc, #400]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acc4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acc6:	4b62      	ldr	r3, [pc, #392]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 0304 	and.w	r3, r3, #4
 800acce:	2b04      	cmp	r3, #4
 800acd0:	d10c      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800acd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d109      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acd8:	4b5d      	ldr	r3, [pc, #372]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	08db      	lsrs	r3, r3, #3
 800acde:	f003 0303 	and.w	r3, r3, #3
 800ace2:	4a5c      	ldr	r2, [pc, #368]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ace4:	fa22 f303 	lsr.w	r3, r2, r3
 800ace8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acea:	e01e      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acec:	4b58      	ldr	r3, [pc, #352]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acf8:	d106      	bne.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800acfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad00:	d102      	bne.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad02:	4b55      	ldr	r3, [pc, #340]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad06:	e010      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad08:	4b51      	ldr	r3, [pc, #324]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad14:	d106      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ad16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad1c:	d102      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad1e:	4b4f      	ldr	r3, [pc, #316]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad22:	e002      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad28:	e235      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad2a:	e234      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad2c:	4b4c      	ldr	r3, [pc, #304]	@ (800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ad2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad30:	e231      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad36:	e22e      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ad38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad3c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ad40:	430b      	orrs	r3, r1
 800ad42:	f040 808f 	bne.w	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ad46:	4b42      	ldr	r3, [pc, #264]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad4a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ad4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ad50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad56:	d06b      	beq.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ad58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad5e:	d874      	bhi.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad66:	d056      	beq.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ad68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad6e:	d86c      	bhi.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad76:	d03b      	beq.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ad78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad7e:	d864      	bhi.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad86:	d021      	beq.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ad88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad8e:	d85c      	bhi.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d004      	beq.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ad96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad9c:	d004      	beq.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ad9e:	e054      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ada0:	f7fe fa4c 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800ada4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ada6:	e1f6      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ada8:	4b29      	ldr	r3, [pc, #164]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adb4:	d107      	bne.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adb6:	f107 0318 	add.w	r3, r7, #24
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 fa0a 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adc4:	e1e7      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adca:	e1e4      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adcc:	4b20      	ldr	r3, [pc, #128]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800add4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800add8:	d107      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adda:	f107 030c 	add.w	r3, r7, #12
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 fb4c 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade8:	e1d5      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adee:	e1d2      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adf0:	4b17      	ldr	r3, [pc, #92]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b04      	cmp	r3, #4
 800adfa:	d109      	bne.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adfc:	4b14      	ldr	r3, [pc, #80]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	08db      	lsrs	r3, r3, #3
 800ae02:	f003 0303 	and.w	r3, r3, #3
 800ae06:	4a13      	ldr	r2, [pc, #76]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ae08:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae0e:	e1c2      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae14:	e1bf      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae16:	4b0e      	ldr	r3, [pc, #56]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae22:	d102      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ae24:	4b0c      	ldr	r3, [pc, #48]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae28:	e1b5      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae2e:	e1b2      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae30:	4b07      	ldr	r3, [pc, #28]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae3c:	d102      	bne.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ae3e:	4b07      	ldr	r3, [pc, #28]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ae40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae42:	e1a8      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae48:	e1a5      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae4e:	e1a2      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae50:	58024400 	.word	0x58024400
 800ae54:	03d09000 	.word	0x03d09000
 800ae58:	003d0900 	.word	0x003d0900
 800ae5c:	007a1200 	.word	0x007a1200
 800ae60:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ae64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae68:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	d173      	bne.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ae70:	4b9c      	ldr	r3, [pc, #624]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ae78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae80:	d02f      	beq.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ae82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae88:	d863      	bhi.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d004      	beq.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ae90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae96:	d012      	beq.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ae98:	e05b      	b.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae9a:	4b92      	ldr	r3, [pc, #584]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aea6:	d107      	bne.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aea8:	f107 0318 	add.w	r3, r7, #24
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 f991 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb6:	e16e      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aebc:	e16b      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aebe:	4b89      	ldr	r3, [pc, #548]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aeca:	d107      	bne.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aecc:	f107 030c 	add.w	r3, r7, #12
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 fad3 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeda:	e15c      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee0:	e159      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aee2:	4b80      	ldr	r3, [pc, #512]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aee6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aeea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aeec:	4b7d      	ldr	r3, [pc, #500]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	d10c      	bne.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d109      	bne.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aefe:	4b79      	ldr	r3, [pc, #484]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	08db      	lsrs	r3, r3, #3
 800af04:	f003 0303 	and.w	r3, r3, #3
 800af08:	4a77      	ldr	r2, [pc, #476]	@ (800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800af0a:	fa22 f303 	lsr.w	r3, r2, r3
 800af0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af10:	e01e      	b.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af12:	4b74      	ldr	r3, [pc, #464]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af1e:	d106      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800af20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af26:	d102      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af28:	4b70      	ldr	r3, [pc, #448]	@ (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800af2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af2c:	e010      	b.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af2e:	4b6d      	ldr	r3, [pc, #436]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af3a:	d106      	bne.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800af3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af42:	d102      	bne.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af44:	4b6a      	ldr	r3, [pc, #424]	@ (800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800af46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af48:	e002      	b.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800af4e:	e122      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af50:	e121      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af56:	e11e      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800af58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af5c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800af60:	430b      	orrs	r3, r1
 800af62:	d133      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800af64:	4b5f      	ldr	r3, [pc, #380]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af70:	2b00      	cmp	r3, #0
 800af72:	d004      	beq.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800af74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af7a:	d012      	beq.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800af7c:	e023      	b.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af7e:	4b59      	ldr	r3, [pc, #356]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af8a:	d107      	bne.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af90:	4618      	mov	r0, r3
 800af92:	f000 fbc7 	bl	800b724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af9a:	e0fc      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa0:	e0f9      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afa2:	4b50      	ldr	r3, [pc, #320]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afae:	d107      	bne.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afb0:	f107 0318 	add.w	r3, r7, #24
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 f90d 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afbe:	e0ea      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afc0:	2300      	movs	r3, #0
 800afc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afc4:	e0e7      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afca:	e0e4      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800afcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afd0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800afd4:	430b      	orrs	r3, r1
 800afd6:	f040 808d 	bne.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800afda:	4b42      	ldr	r3, [pc, #264]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afde:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800afe2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800afe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afea:	d06b      	beq.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800afec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aff2:	d874      	bhi.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800affa:	d056      	beq.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800affc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b002:	d86c      	bhi.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b006:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b00a:	d03b      	beq.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b012:	d864      	bhi.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b01a:	d021      	beq.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b022:	d85c      	bhi.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b026:	2b00      	cmp	r3, #0
 800b028:	d004      	beq.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b030:	d004      	beq.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b032:	e054      	b.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b034:	f000 f8b8 	bl	800b1a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b038:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b03a:	e0ac      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b03c:	4b29      	ldr	r3, [pc, #164]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b044:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b048:	d107      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b04a:	f107 0318 	add.w	r3, r7, #24
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 f8c0 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b058:	e09d      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b05e:	e09a      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b060:	4b20      	ldr	r3, [pc, #128]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b06c:	d107      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b06e:	f107 030c 	add.w	r3, r7, #12
 800b072:	4618      	mov	r0, r3
 800b074:	f000 fa02 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b07c:	e08b      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b082:	e088      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b084:	4b17      	ldr	r3, [pc, #92]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 0304 	and.w	r3, r3, #4
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	d109      	bne.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b090:	4b14      	ldr	r3, [pc, #80]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	08db      	lsrs	r3, r3, #3
 800b096:	f003 0303 	and.w	r3, r3, #3
 800b09a:	4a13      	ldr	r2, [pc, #76]	@ (800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b09c:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0a2:	e078      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a8:	e075      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b0aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0b6:	d102      	bne.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b0b8:	4b0c      	ldr	r3, [pc, #48]	@ (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0bc:	e06b      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c2:	e068      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0c4:	4b07      	ldr	r3, [pc, #28]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0d0:	d102      	bne.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b0d2:	4b07      	ldr	r3, [pc, #28]	@ (800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d6:	e05e      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0dc:	e05b      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e2:	e058      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0e4:	58024400 	.word	0x58024400
 800b0e8:	03d09000 	.word	0x03d09000
 800b0ec:	003d0900 	.word	0x003d0900
 800b0f0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b0f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0f8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	d148      	bne.n	800b192 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b100:	4b27      	ldr	r3, [pc, #156]	@ (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b104:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b108:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b110:	d02a      	beq.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b118:	d838      	bhi.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d004      	beq.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b126:	d00d      	beq.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b128:	e030      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b12a:	4b1d      	ldr	r3, [pc, #116]	@ (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b136:	d102      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b138:	4b1a      	ldr	r3, [pc, #104]	@ (800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b13c:	e02b      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b142:	e028      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b144:	4b16      	ldr	r3, [pc, #88]	@ (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b14c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b150:	d107      	bne.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b156:	4618      	mov	r0, r3
 800b158:	f000 fae4 	bl	800b724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b160:	e019      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b166:	e016      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b168:	4b0d      	ldr	r3, [pc, #52]	@ (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b174:	d107      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b176:	f107 0318 	add.w	r3, r7, #24
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 f82a 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b184:	e007      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b18a:	e004      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b190:	e001      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3740      	adds	r7, #64	@ 0x40
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	58024400 	.word	0x58024400
 800b1a4:	007a1200 	.word	0x007a1200

0800b1a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b1ac:	f7fe f816 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	4b06      	ldr	r3, [pc, #24]	@ (800b1cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	091b      	lsrs	r3, r3, #4
 800b1b8:	f003 0307 	and.w	r3, r3, #7
 800b1bc:	4904      	ldr	r1, [pc, #16]	@ (800b1d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b1be:	5ccb      	ldrb	r3, [r1, r3]
 800b1c0:	f003 031f 	and.w	r3, r3, #31
 800b1c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	58024400 	.word	0x58024400
 800b1d0:	08011e48 	.word	0x08011e48

0800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b089      	sub	sp, #36	@ 0x24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1dc:	4ba1      	ldr	r3, [pc, #644]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e0:	f003 0303 	and.w	r3, r3, #3
 800b1e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b1e6:	4b9f      	ldr	r3, [pc, #636]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ea:	0b1b      	lsrs	r3, r3, #12
 800b1ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b1f2:	4b9c      	ldr	r3, [pc, #624]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f6:	091b      	lsrs	r3, r3, #4
 800b1f8:	f003 0301 	and.w	r3, r3, #1
 800b1fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b1fe:	4b99      	ldr	r3, [pc, #612]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b202:	08db      	lsrs	r3, r3, #3
 800b204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	fb02 f303 	mul.w	r3, r2, r3
 800b20e:	ee07 3a90 	vmov	s15, r3
 800b212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 8111 	beq.w	800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	2b02      	cmp	r3, #2
 800b226:	f000 8083 	beq.w	800b330 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	f200 80a1 	bhi.w	800b374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d056      	beq.n	800b2ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b23e:	e099      	b.n	800b374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b240:	4b88      	ldr	r3, [pc, #544]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0320 	and.w	r3, r3, #32
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d02d      	beq.n	800b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b24c:	4b85      	ldr	r3, [pc, #532]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	08db      	lsrs	r3, r3, #3
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	4a84      	ldr	r2, [pc, #528]	@ (800b468 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b258:	fa22 f303 	lsr.w	r3, r2, r3
 800b25c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	ee07 3a90 	vmov	s15, r3
 800b264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b276:	4b7b      	ldr	r3, [pc, #492]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b286:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b2a6:	e087      	b.n	800b3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	ee07 3a90 	vmov	s15, r3
 800b2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b470 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ba:	4b6a      	ldr	r3, [pc, #424]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2ea:	e065      	b.n	800b3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	ee07 3a90 	vmov	s15, r3
 800b2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2fe:	4b59      	ldr	r3, [pc, #356]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b30e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b312:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b31e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b32e:	e043      	b.n	800b3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b342:	4b48      	ldr	r3, [pc, #288]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34a:	ee07 3a90 	vmov	s15, r3
 800b34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b352:	ed97 6a03 	vldr	s12, [r7, #12]
 800b356:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b372:	e021      	b.n	800b3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b386:	4b37      	ldr	r3, [pc, #220]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b396:	ed97 6a03 	vldr	s12, [r7, #12]
 800b39a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b3b8:	4b2a      	ldr	r3, [pc, #168]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3bc:	0a5b      	lsrs	r3, r3, #9
 800b3be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3de:	ee17 2a90 	vmov	r2, s15
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b3e6:	4b1f      	ldr	r3, [pc, #124]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ea:	0c1b      	lsrs	r3, r3, #16
 800b3ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3f0:	ee07 3a90 	vmov	s15, r3
 800b3f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b400:	edd7 6a07 	vldr	s13, [r7, #28]
 800b404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b40c:	ee17 2a90 	vmov	r2, s15
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b414:	4b13      	ldr	r3, [pc, #76]	@ (800b464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b418:	0e1b      	lsrs	r3, r3, #24
 800b41a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b42a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b42e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b43a:	ee17 2a90 	vmov	r2, s15
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b442:	e008      	b.n	800b456 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	609a      	str	r2, [r3, #8]
}
 800b456:	bf00      	nop
 800b458:	3724      	adds	r7, #36	@ 0x24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	58024400 	.word	0x58024400
 800b468:	03d09000 	.word	0x03d09000
 800b46c:	46000000 	.word	0x46000000
 800b470:	4c742400 	.word	0x4c742400
 800b474:	4a742400 	.word	0x4a742400
 800b478:	4af42400 	.word	0x4af42400

0800b47c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b089      	sub	sp, #36	@ 0x24
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b484:	4ba1      	ldr	r3, [pc, #644]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b488:	f003 0303 	and.w	r3, r3, #3
 800b48c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b48e:	4b9f      	ldr	r3, [pc, #636]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b492:	0d1b      	lsrs	r3, r3, #20
 800b494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b498:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b49a:	4b9c      	ldr	r3, [pc, #624]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b49e:	0a1b      	lsrs	r3, r3, #8
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b4a6:	4b99      	ldr	r3, [pc, #612]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4aa:	08db      	lsrs	r3, r3, #3
 800b4ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	fb02 f303 	mul.w	r3, r2, r3
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 8111 	beq.w	800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	f000 8083 	beq.w	800b5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	f200 80a1 	bhi.w	800b61c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d056      	beq.n	800b594 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b4e6:	e099      	b.n	800b61c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4e8:	4b88      	ldr	r3, [pc, #544]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 0320 	and.w	r3, r3, #32
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d02d      	beq.n	800b550 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f4:	4b85      	ldr	r3, [pc, #532]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	08db      	lsrs	r3, r3, #3
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	4a84      	ldr	r2, [pc, #528]	@ (800b710 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b500:	fa22 f303 	lsr.w	r3, r2, r3
 800b504:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	ee07 3a90 	vmov	s15, r3
 800b50c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	ee07 3a90 	vmov	s15, r3
 800b516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b51e:	4b7b      	ldr	r3, [pc, #492]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b532:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b53e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b54e:	e087      	b.n	800b660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	ee07 3a90 	vmov	s15, r3
 800b556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b718 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b562:	4b6a      	ldr	r3, [pc, #424]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b572:	ed97 6a03 	vldr	s12, [r7, #12]
 800b576:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b592:	e065      	b.n	800b660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	ee07 3a90 	vmov	s15, r3
 800b59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b59e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b71c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a6:	4b59      	ldr	r3, [pc, #356]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ae:	ee07 3a90 	vmov	s15, r3
 800b5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5d6:	e043      	b.n	800b660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	ee07 3a90 	vmov	s15, r3
 800b5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ea:	4b48      	ldr	r3, [pc, #288]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f2:	ee07 3a90 	vmov	s15, r3
 800b5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b61a:	e021      	b.n	800b660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	ee07 3a90 	vmov	s15, r3
 800b622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b626:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b71c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62e:	4b37      	ldr	r3, [pc, #220]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b636:	ee07 3a90 	vmov	s15, r3
 800b63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b642:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b65e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b660:	4b2a      	ldr	r3, [pc, #168]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b664:	0a5b      	lsrs	r3, r3, #9
 800b666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b67a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b67e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b686:	ee17 2a90 	vmov	r2, s15
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b68e:	4b1f      	ldr	r3, [pc, #124]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b692:	0c1b      	lsrs	r3, r3, #16
 800b694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b698:	ee07 3a90 	vmov	s15, r3
 800b69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6b4:	ee17 2a90 	vmov	r2, s15
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b6bc:	4b13      	ldr	r3, [pc, #76]	@ (800b70c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6c0:	0e1b      	lsrs	r3, r3, #24
 800b6c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e2:	ee17 2a90 	vmov	r2, s15
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b6ea:	e008      	b.n	800b6fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	609a      	str	r2, [r3, #8]
}
 800b6fe:	bf00      	nop
 800b700:	3724      	adds	r7, #36	@ 0x24
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	58024400 	.word	0x58024400
 800b710:	03d09000 	.word	0x03d09000
 800b714:	46000000 	.word	0x46000000
 800b718:	4c742400 	.word	0x4c742400
 800b71c:	4a742400 	.word	0x4a742400
 800b720:	4af42400 	.word	0x4af42400

0800b724 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b724:	b480      	push	{r7}
 800b726:	b089      	sub	sp, #36	@ 0x24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b72c:	4ba0      	ldr	r3, [pc, #640]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b730:	f003 0303 	and.w	r3, r3, #3
 800b734:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b736:	4b9e      	ldr	r3, [pc, #632]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b73a:	091b      	lsrs	r3, r3, #4
 800b73c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b740:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b742:	4b9b      	ldr	r3, [pc, #620]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b746:	f003 0301 	and.w	r3, r3, #1
 800b74a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b74c:	4b98      	ldr	r3, [pc, #608]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b74e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b750:	08db      	lsrs	r3, r3, #3
 800b752:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	fb02 f303 	mul.w	r3, r2, r3
 800b75c:	ee07 3a90 	vmov	s15, r3
 800b760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b764:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 8111 	beq.w	800b992 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	2b02      	cmp	r3, #2
 800b774:	f000 8083 	beq.w	800b87e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	f200 80a1 	bhi.w	800b8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d003      	beq.n	800b78e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d056      	beq.n	800b83a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b78c:	e099      	b.n	800b8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b78e:	4b88      	ldr	r3, [pc, #544]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 0320 	and.w	r3, r3, #32
 800b796:	2b00      	cmp	r3, #0
 800b798:	d02d      	beq.n	800b7f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b79a:	4b85      	ldr	r3, [pc, #532]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	08db      	lsrs	r3, r3, #3
 800b7a0:	f003 0303 	and.w	r3, r3, #3
 800b7a4:	4a83      	ldr	r2, [pc, #524]	@ (800b9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7aa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	ee07 3a90 	vmov	s15, r3
 800b7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	ee07 3a90 	vmov	s15, r3
 800b7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7c4:	4b7a      	ldr	r3, [pc, #488]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7cc:	ee07 3a90 	vmov	s15, r3
 800b7d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7d8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b7f4:	e087      	b.n	800b906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	ee07 3a90 	vmov	s15, r3
 800b7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b800:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b9bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b808:	4b69      	ldr	r3, [pc, #420]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b80a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b810:	ee07 3a90 	vmov	s15, r3
 800b814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b818:	ed97 6a03 	vldr	s12, [r7, #12]
 800b81c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b828:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b82c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b834:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b838:	e065      	b.n	800b906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	ee07 3a90 	vmov	s15, r3
 800b840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b844:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b84c:	4b58      	ldr	r3, [pc, #352]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b84e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b854:	ee07 3a90 	vmov	s15, r3
 800b858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b85c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b860:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b86c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b874:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b878:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b87c:	e043      	b.n	800b906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	ee07 3a90 	vmov	s15, r3
 800b884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b888:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b88c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b890:	4b47      	ldr	r3, [pc, #284]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b898:	ee07 3a90 	vmov	s15, r3
 800b89c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8a4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8c0:	e021      	b.n	800b906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	ee07 3a90 	vmov	s15, r3
 800b8c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8cc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b9bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b8d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8d4:	4b36      	ldr	r3, [pc, #216]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8dc:	ee07 3a90 	vmov	s15, r3
 800b8e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8e8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b904:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b906:	4b2a      	ldr	r3, [pc, #168]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b90a:	0a5b      	lsrs	r3, r3, #9
 800b90c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b910:	ee07 3a90 	vmov	s15, r3
 800b914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b918:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b91c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b920:	edd7 6a07 	vldr	s13, [r7, #28]
 800b924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b92c:	ee17 2a90 	vmov	r2, s15
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b934:	4b1e      	ldr	r3, [pc, #120]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b938:	0c1b      	lsrs	r3, r3, #16
 800b93a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b93e:	ee07 3a90 	vmov	s15, r3
 800b942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b946:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b94a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b94e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b95a:	ee17 2a90 	vmov	r2, s15
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b962:	4b13      	ldr	r3, [pc, #76]	@ (800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b966:	0e1b      	lsrs	r3, r3, #24
 800b968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b96c:	ee07 3a90 	vmov	s15, r3
 800b970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b974:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b978:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b97c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b988:	ee17 2a90 	vmov	r2, s15
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b990:	e008      	b.n	800b9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	609a      	str	r2, [r3, #8]
}
 800b9a4:	bf00      	nop
 800b9a6:	3724      	adds	r7, #36	@ 0x24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	58024400 	.word	0x58024400
 800b9b4:	03d09000 	.word	0x03d09000
 800b9b8:	46000000 	.word	0x46000000
 800b9bc:	4c742400 	.word	0x4c742400
 800b9c0:	4a742400 	.word	0x4a742400
 800b9c4:	4af42400 	.word	0x4af42400

0800b9c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b9d6:	4b53      	ldr	r3, [pc, #332]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800b9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9da:	f003 0303 	and.w	r3, r3, #3
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d101      	bne.n	800b9e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e099      	b.n	800bb1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b9e6:	4b4f      	ldr	r3, [pc, #316]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a4e      	ldr	r2, [pc, #312]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800b9ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b9f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9f2:	f7fb f8dd 	bl	8006bb0 <HAL_GetTick>
 800b9f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9f8:	e008      	b.n	800ba0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9fa:	f7fb f8d9 	bl	8006bb0 <HAL_GetTick>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d901      	bls.n	800ba0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	e086      	b.n	800bb1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba0c:	4b45      	ldr	r3, [pc, #276]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1f0      	bne.n	800b9fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ba18:	4b42      	ldr	r3, [pc, #264]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba1c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	031b      	lsls	r3, r3, #12
 800ba26:	493f      	ldr	r1, [pc, #252]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	628b      	str	r3, [r1, #40]	@ 0x28
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	3b01      	subs	r3, #1
 800ba32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	025b      	lsls	r3, r3, #9
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	431a      	orrs	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	041b      	lsls	r3, r3, #16
 800ba4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	3b01      	subs	r3, #1
 800ba56:	061b      	lsls	r3, r3, #24
 800ba58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ba5c:	4931      	ldr	r1, [pc, #196]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ba62:	4b30      	ldr	r3, [pc, #192]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	492d      	ldr	r1, [pc, #180]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba70:	4313      	orrs	r3, r2
 800ba72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ba74:	4b2b      	ldr	r3, [pc, #172]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba78:	f023 0220 	bic.w	r2, r3, #32
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	4928      	ldr	r1, [pc, #160]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba82:	4313      	orrs	r3, r2
 800ba84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ba86:	4b27      	ldr	r3, [pc, #156]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8a:	4a26      	ldr	r2, [pc, #152]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba8c:	f023 0310 	bic.w	r3, r3, #16
 800ba90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ba92:	4b24      	ldr	r3, [pc, #144]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800ba94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba96:	4b24      	ldr	r3, [pc, #144]	@ (800bb28 <RCCEx_PLL2_Config+0x160>)
 800ba98:	4013      	ands	r3, r2
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	69d2      	ldr	r2, [r2, #28]
 800ba9e:	00d2      	lsls	r2, r2, #3
 800baa0:	4920      	ldr	r1, [pc, #128]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800baa2:	4313      	orrs	r3, r2
 800baa4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800baa6:	4b1f      	ldr	r3, [pc, #124]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800baa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baaa:	4a1e      	ldr	r2, [pc, #120]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800baac:	f043 0310 	orr.w	r3, r3, #16
 800bab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d106      	bne.n	800bac6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bab8:	4b1a      	ldr	r3, [pc, #104]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800baba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800babc:	4a19      	ldr	r2, [pc, #100]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800babe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bac2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bac4:	e00f      	b.n	800bae6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d106      	bne.n	800bada <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bacc:	4b15      	ldr	r3, [pc, #84]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800bace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad0:	4a14      	ldr	r2, [pc, #80]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800bad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bad8:	e005      	b.n	800bae6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bada:	4b12      	ldr	r3, [pc, #72]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800badc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bade:	4a11      	ldr	r2, [pc, #68]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800bae0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bae4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bae6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a0e      	ldr	r2, [pc, #56]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800baec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800baf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baf2:	f7fb f85d 	bl	8006bb0 <HAL_GetTick>
 800baf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800baf8:	e008      	b.n	800bb0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bafa:	f7fb f859 	bl	8006bb0 <HAL_GetTick>
 800bafe:	4602      	mov	r2, r0
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d901      	bls.n	800bb0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	e006      	b.n	800bb1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb0c:	4b05      	ldr	r3, [pc, #20]	@ (800bb24 <RCCEx_PLL2_Config+0x15c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d0f0      	beq.n	800bafa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	58024400 	.word	0x58024400
 800bb28:	ffff0007 	.word	0xffff0007

0800bb2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb3a:	4b53      	ldr	r3, [pc, #332]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bb3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb3e:	f003 0303 	and.w	r3, r3, #3
 800bb42:	2b03      	cmp	r3, #3
 800bb44:	d101      	bne.n	800bb4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e099      	b.n	800bc7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bb4a:	4b4f      	ldr	r3, [pc, #316]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a4e      	ldr	r2, [pc, #312]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bb50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb56:	f7fb f82b 	bl	8006bb0 <HAL_GetTick>
 800bb5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb5c:	e008      	b.n	800bb70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb5e:	f7fb f827 	bl	8006bb0 <HAL_GetTick>
 800bb62:	4602      	mov	r2, r0
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	1ad3      	subs	r3, r2, r3
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d901      	bls.n	800bb70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb6c:	2303      	movs	r3, #3
 800bb6e:	e086      	b.n	800bc7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb70:	4b45      	ldr	r3, [pc, #276]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1f0      	bne.n	800bb5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bb7c:	4b42      	ldr	r3, [pc, #264]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bb7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb80:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	051b      	lsls	r3, r3, #20
 800bb8a:	493f      	ldr	r1, [pc, #252]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	628b      	str	r3, [r1, #40]	@ 0x28
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	025b      	lsls	r3, r3, #9
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	431a      	orrs	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	041b      	lsls	r3, r3, #16
 800bbae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	061b      	lsls	r3, r3, #24
 800bbbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bbc0:	4931      	ldr	r1, [pc, #196]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bbc6:	4b30      	ldr	r3, [pc, #192]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bbc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	695b      	ldr	r3, [r3, #20]
 800bbd2:	492d      	ldr	r1, [pc, #180]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bbd8:	4b2b      	ldr	r3, [pc, #172]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbdc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	4928      	ldr	r1, [pc, #160]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bbea:	4b27      	ldr	r3, [pc, #156]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bbec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbee:	4a26      	ldr	r2, [pc, #152]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bbf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bbf6:	4b24      	ldr	r3, [pc, #144]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bbf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbfa:	4b24      	ldr	r3, [pc, #144]	@ (800bc8c <RCCEx_PLL3_Config+0x160>)
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	69d2      	ldr	r2, [r2, #28]
 800bc02:	00d2      	lsls	r2, r2, #3
 800bc04:	4920      	ldr	r1, [pc, #128]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bc0a:	4b1f      	ldr	r3, [pc, #124]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0e:	4a1e      	ldr	r2, [pc, #120]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d106      	bne.n	800bc2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bc1c:	4b1a      	ldr	r3, [pc, #104]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc20:	4a19      	ldr	r2, [pc, #100]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bc26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc28:	e00f      	b.n	800bc4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d106      	bne.n	800bc3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bc30:	4b15      	ldr	r3, [pc, #84]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc34:	4a14      	ldr	r2, [pc, #80]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bc3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc3c:	e005      	b.n	800bc4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bc3e:	4b12      	ldr	r3, [pc, #72]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc42:	4a11      	ldr	r2, [pc, #68]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a0e      	ldr	r2, [pc, #56]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc56:	f7fa ffab 	bl	8006bb0 <HAL_GetTick>
 800bc5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc5c:	e008      	b.n	800bc70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc5e:	f7fa ffa7 	bl	8006bb0 <HAL_GetTick>
 800bc62:	4602      	mov	r2, r0
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d901      	bls.n	800bc70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	e006      	b.n	800bc7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc70:	4b05      	ldr	r3, [pc, #20]	@ (800bc88 <RCCEx_PLL3_Config+0x15c>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0f0      	beq.n	800bc5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	58024400 	.word	0x58024400
 800bc8c:	ffff0007 	.word	0xffff0007

0800bc90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e049      	b.n	800bd36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d106      	bne.n	800bcbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f7fa fb84 	bl	80063c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	3304      	adds	r3, #4
 800bccc:	4619      	mov	r1, r3
 800bcce:	4610      	mov	r0, r2
 800bcd0:	f000 fcee 	bl	800c6b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b082      	sub	sp, #8
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d101      	bne.n	800bd50 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e049      	b.n	800bde4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d106      	bne.n	800bd6a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f841 	bl	800bdec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	3304      	adds	r3, #4
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	f000 fc97 	bl	800c6b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2201      	movs	r2, #1
 800bda6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2201      	movs	r2, #1
 800bdae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d104      	bne.n	800be1e <HAL_TIM_IC_Start_IT+0x1e>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	e023      	b.n	800be66 <HAL_TIM_IC_Start_IT+0x66>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2b04      	cmp	r3, #4
 800be22:	d104      	bne.n	800be2e <HAL_TIM_IC_Start_IT+0x2e>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	e01b      	b.n	800be66 <HAL_TIM_IC_Start_IT+0x66>
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b08      	cmp	r3, #8
 800be32:	d104      	bne.n	800be3e <HAL_TIM_IC_Start_IT+0x3e>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	e013      	b.n	800be66 <HAL_TIM_IC_Start_IT+0x66>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	2b0c      	cmp	r3, #12
 800be42:	d104      	bne.n	800be4e <HAL_TIM_IC_Start_IT+0x4e>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	e00b      	b.n	800be66 <HAL_TIM_IC_Start_IT+0x66>
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b10      	cmp	r3, #16
 800be52:	d104      	bne.n	800be5e <HAL_TIM_IC_Start_IT+0x5e>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	e003      	b.n	800be66 <HAL_TIM_IC_Start_IT+0x66>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800be64:	b2db      	uxtb	r3, r3
 800be66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d104      	bne.n	800be78 <HAL_TIM_IC_Start_IT+0x78>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be74:	b2db      	uxtb	r3, r3
 800be76:	e013      	b.n	800bea0 <HAL_TIM_IC_Start_IT+0xa0>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b04      	cmp	r3, #4
 800be7c:	d104      	bne.n	800be88 <HAL_TIM_IC_Start_IT+0x88>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be84:	b2db      	uxtb	r3, r3
 800be86:	e00b      	b.n	800bea0 <HAL_TIM_IC_Start_IT+0xa0>
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	2b08      	cmp	r3, #8
 800be8c:	d104      	bne.n	800be98 <HAL_TIM_IC_Start_IT+0x98>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800be94:	b2db      	uxtb	r3, r3
 800be96:	e003      	b.n	800bea0 <HAL_TIM_IC_Start_IT+0xa0>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d102      	bne.n	800beae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800bea8:	7b7b      	ldrb	r3, [r7, #13]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d001      	beq.n	800beb2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e0e2      	b.n	800c078 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d104      	bne.n	800bec2 <HAL_TIM_IC_Start_IT+0xc2>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2202      	movs	r2, #2
 800bebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bec0:	e023      	b.n	800bf0a <HAL_TIM_IC_Start_IT+0x10a>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b04      	cmp	r3, #4
 800bec6:	d104      	bne.n	800bed2 <HAL_TIM_IC_Start_IT+0xd2>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2202      	movs	r2, #2
 800becc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bed0:	e01b      	b.n	800bf0a <HAL_TIM_IC_Start_IT+0x10a>
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b08      	cmp	r3, #8
 800bed6:	d104      	bne.n	800bee2 <HAL_TIM_IC_Start_IT+0xe2>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bee0:	e013      	b.n	800bf0a <HAL_TIM_IC_Start_IT+0x10a>
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b0c      	cmp	r3, #12
 800bee6:	d104      	bne.n	800bef2 <HAL_TIM_IC_Start_IT+0xf2>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2202      	movs	r2, #2
 800beec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bef0:	e00b      	b.n	800bf0a <HAL_TIM_IC_Start_IT+0x10a>
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	2b10      	cmp	r3, #16
 800bef6:	d104      	bne.n	800bf02 <HAL_TIM_IC_Start_IT+0x102>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2202      	movs	r2, #2
 800befc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf00:	e003      	b.n	800bf0a <HAL_TIM_IC_Start_IT+0x10a>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2202      	movs	r2, #2
 800bf06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d104      	bne.n	800bf1a <HAL_TIM_IC_Start_IT+0x11a>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2202      	movs	r2, #2
 800bf14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf18:	e013      	b.n	800bf42 <HAL_TIM_IC_Start_IT+0x142>
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b04      	cmp	r3, #4
 800bf1e:	d104      	bne.n	800bf2a <HAL_TIM_IC_Start_IT+0x12a>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2202      	movs	r2, #2
 800bf24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf28:	e00b      	b.n	800bf42 <HAL_TIM_IC_Start_IT+0x142>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b08      	cmp	r3, #8
 800bf2e:	d104      	bne.n	800bf3a <HAL_TIM_IC_Start_IT+0x13a>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2202      	movs	r2, #2
 800bf34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bf38:	e003      	b.n	800bf42 <HAL_TIM_IC_Start_IT+0x142>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	2b0c      	cmp	r3, #12
 800bf46:	d841      	bhi.n	800bfcc <HAL_TIM_IC_Start_IT+0x1cc>
 800bf48:	a201      	add	r2, pc, #4	@ (adr r2, 800bf50 <HAL_TIM_IC_Start_IT+0x150>)
 800bf4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4e:	bf00      	nop
 800bf50:	0800bf85 	.word	0x0800bf85
 800bf54:	0800bfcd 	.word	0x0800bfcd
 800bf58:	0800bfcd 	.word	0x0800bfcd
 800bf5c:	0800bfcd 	.word	0x0800bfcd
 800bf60:	0800bf97 	.word	0x0800bf97
 800bf64:	0800bfcd 	.word	0x0800bfcd
 800bf68:	0800bfcd 	.word	0x0800bfcd
 800bf6c:	0800bfcd 	.word	0x0800bfcd
 800bf70:	0800bfa9 	.word	0x0800bfa9
 800bf74:	0800bfcd 	.word	0x0800bfcd
 800bf78:	0800bfcd 	.word	0x0800bfcd
 800bf7c:	0800bfcd 	.word	0x0800bfcd
 800bf80:	0800bfbb 	.word	0x0800bfbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68da      	ldr	r2, [r3, #12]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f042 0202 	orr.w	r2, r2, #2
 800bf92:	60da      	str	r2, [r3, #12]
      break;
 800bf94:	e01d      	b.n	800bfd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f042 0204 	orr.w	r2, r2, #4
 800bfa4:	60da      	str	r2, [r3, #12]
      break;
 800bfa6:	e014      	b.n	800bfd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68da      	ldr	r2, [r3, #12]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f042 0208 	orr.w	r2, r2, #8
 800bfb6:	60da      	str	r2, [r3, #12]
      break;
 800bfb8:	e00b      	b.n	800bfd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68da      	ldr	r2, [r3, #12]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f042 0210 	orr.w	r2, r2, #16
 800bfc8:	60da      	str	r2, [r3, #12]
      break;
 800bfca:	e002      	b.n	800bfd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	73fb      	strb	r3, [r7, #15]
      break;
 800bfd0:	bf00      	nop
  }

  if (status == HAL_OK)
 800bfd2:	7bfb      	ldrb	r3, [r7, #15]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d14e      	bne.n	800c076 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 fdcd 	bl	800cb80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a25      	ldr	r2, [pc, #148]	@ (800c080 <HAL_TIM_IC_Start_IT+0x280>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d022      	beq.n	800c036 <HAL_TIM_IC_Start_IT+0x236>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bff8:	d01d      	beq.n	800c036 <HAL_TIM_IC_Start_IT+0x236>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a21      	ldr	r2, [pc, #132]	@ (800c084 <HAL_TIM_IC_Start_IT+0x284>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d018      	beq.n	800c036 <HAL_TIM_IC_Start_IT+0x236>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a1f      	ldr	r2, [pc, #124]	@ (800c088 <HAL_TIM_IC_Start_IT+0x288>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d013      	beq.n	800c036 <HAL_TIM_IC_Start_IT+0x236>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a1e      	ldr	r2, [pc, #120]	@ (800c08c <HAL_TIM_IC_Start_IT+0x28c>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d00e      	beq.n	800c036 <HAL_TIM_IC_Start_IT+0x236>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a1c      	ldr	r2, [pc, #112]	@ (800c090 <HAL_TIM_IC_Start_IT+0x290>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d009      	beq.n	800c036 <HAL_TIM_IC_Start_IT+0x236>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a1b      	ldr	r2, [pc, #108]	@ (800c094 <HAL_TIM_IC_Start_IT+0x294>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d004      	beq.n	800c036 <HAL_TIM_IC_Start_IT+0x236>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a19      	ldr	r2, [pc, #100]	@ (800c098 <HAL_TIM_IC_Start_IT+0x298>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d115      	bne.n	800c062 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	689a      	ldr	r2, [r3, #8]
 800c03c:	4b17      	ldr	r3, [pc, #92]	@ (800c09c <HAL_TIM_IC_Start_IT+0x29c>)
 800c03e:	4013      	ands	r3, r2
 800c040:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b06      	cmp	r3, #6
 800c046:	d015      	beq.n	800c074 <HAL_TIM_IC_Start_IT+0x274>
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c04e:	d011      	beq.n	800c074 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f042 0201 	orr.w	r2, r2, #1
 800c05e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c060:	e008      	b.n	800c074 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f042 0201 	orr.w	r2, r2, #1
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	e000      	b.n	800c076 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c074:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c076:	7bfb      	ldrb	r3, [r7, #15]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	40010000 	.word	0x40010000
 800c084:	40000400 	.word	0x40000400
 800c088:	40000800 	.word	0x40000800
 800c08c:	40000c00 	.word	0x40000c00
 800c090:	40010400 	.word	0x40010400
 800c094:	40001800 	.word	0x40001800
 800c098:	40014000 	.word	0x40014000
 800c09c:	00010007 	.word	0x00010007

0800c0a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	f003 0302 	and.w	r3, r3, #2
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d020      	beq.n	800c104 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d01b      	beq.n	800c104 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f06f 0202 	mvn.w	r2, #2
 800c0d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	699b      	ldr	r3, [r3, #24]
 800c0e2:	f003 0303 	and.w	r3, r3, #3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d003      	beq.n	800c0f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7f4 fb3c 	bl	8000768 <HAL_TIM_IC_CaptureCallback>
 800c0f0:	e005      	b.n	800c0fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fabe 	bl	800c674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fac5 	bl	800c688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	f003 0304 	and.w	r3, r3, #4
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d020      	beq.n	800c150 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f003 0304 	and.w	r3, r3, #4
 800c114:	2b00      	cmp	r3, #0
 800c116:	d01b      	beq.n	800c150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f06f 0204 	mvn.w	r2, #4
 800c120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2202      	movs	r2, #2
 800c126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7f4 fb16 	bl	8000768 <HAL_TIM_IC_CaptureCallback>
 800c13c:	e005      	b.n	800c14a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 fa98 	bl	800c674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fa9f 	bl	800c688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f003 0308 	and.w	r3, r3, #8
 800c156:	2b00      	cmp	r3, #0
 800c158:	d020      	beq.n	800c19c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f003 0308 	and.w	r3, r3, #8
 800c160:	2b00      	cmp	r3, #0
 800c162:	d01b      	beq.n	800c19c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f06f 0208 	mvn.w	r2, #8
 800c16c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2204      	movs	r2, #4
 800c172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	69db      	ldr	r3, [r3, #28]
 800c17a:	f003 0303 	and.w	r3, r3, #3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d003      	beq.n	800c18a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7f4 faf0 	bl	8000768 <HAL_TIM_IC_CaptureCallback>
 800c188:	e005      	b.n	800c196 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fa72 	bl	800c674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fa79 	bl	800c688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	f003 0310 	and.w	r3, r3, #16
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d020      	beq.n	800c1e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f003 0310 	and.w	r3, r3, #16
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d01b      	beq.n	800c1e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f06f 0210 	mvn.w	r2, #16
 800c1b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2208      	movs	r2, #8
 800c1be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	69db      	ldr	r3, [r3, #28]
 800c1c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7f4 faca 	bl	8000768 <HAL_TIM_IC_CaptureCallback>
 800c1d4:	e005      	b.n	800c1e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 fa4c 	bl	800c674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fa53 	bl	800c688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	f003 0301 	and.w	r3, r3, #1
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00c      	beq.n	800c20c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f003 0301 	and.w	r3, r3, #1
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d007      	beq.n	800c20c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f06f 0201 	mvn.w	r2, #1
 800c204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fa2a 	bl	800c660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c212:	2b00      	cmp	r3, #0
 800c214:	d104      	bne.n	800c220 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00c      	beq.n	800c23a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c226:	2b00      	cmp	r3, #0
 800c228:	d007      	beq.n	800c23a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fd61 	bl	800ccfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00c      	beq.n	800c25e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d007      	beq.n	800c25e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fd59 	bl	800cd10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00c      	beq.n	800c282 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d007      	beq.n	800c282 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c27a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fa0d 	bl	800c69c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	f003 0320 	and.w	r3, r3, #32
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00c      	beq.n	800c2a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f003 0320 	and.w	r3, r3, #32
 800c292:	2b00      	cmp	r3, #0
 800c294:	d007      	beq.n	800c2a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f06f 0220 	mvn.w	r2, #32
 800c29e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 fd21 	bl	800cce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2a6:	bf00      	nop
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b086      	sub	sp, #24
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	60f8      	str	r0, [r7, #12]
 800c2b6:	60b9      	str	r1, [r7, #8]
 800c2b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d101      	bne.n	800c2cc <HAL_TIM_IC_ConfigChannel+0x1e>
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	e088      	b.n	800c3de <HAL_TIM_IC_ConfigChannel+0x130>
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d11b      	bne.n	800c312 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c2ea:	f000 fa81 	bl	800c7f0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	699a      	ldr	r2, [r3, #24]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f022 020c 	bic.w	r2, r2, #12
 800c2fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	6999      	ldr	r1, [r3, #24]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	689a      	ldr	r2, [r3, #8]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	430a      	orrs	r2, r1
 800c30e:	619a      	str	r2, [r3, #24]
 800c310:	e060      	b.n	800c3d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b04      	cmp	r3, #4
 800c316:	d11c      	bne.n	800c352 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c328:	f000 fb05 	bl	800c936 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	699a      	ldr	r2, [r3, #24]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800c33a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6999      	ldr	r1, [r3, #24]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	021a      	lsls	r2, r3, #8
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	430a      	orrs	r2, r1
 800c34e:	619a      	str	r2, [r3, #24]
 800c350:	e040      	b.n	800c3d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b08      	cmp	r3, #8
 800c356:	d11b      	bne.n	800c390 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800c368:	f000 fb52 	bl	800ca10 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	69da      	ldr	r2, [r3, #28]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f022 020c 	bic.w	r2, r2, #12
 800c37a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	69d9      	ldr	r1, [r3, #28]
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	689a      	ldr	r2, [r3, #8]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	430a      	orrs	r2, r1
 800c38c:	61da      	str	r2, [r3, #28]
 800c38e:	e021      	b.n	800c3d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b0c      	cmp	r3, #12
 800c394:	d11c      	bne.n	800c3d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800c3a6:	f000 fb6f 	bl	800ca88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	69da      	ldr	r2, [r3, #28]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800c3b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	69d9      	ldr	r1, [r3, #28]
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	021a      	lsls	r2, r3, #8
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	61da      	str	r2, [r3, #28]
 800c3ce:	e001      	b.n	800c3d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3718      	adds	r7, #24
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
	...

0800c3e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d101      	bne.n	800c404 <HAL_TIM_ConfigClockSource+0x1c>
 800c400:	2302      	movs	r3, #2
 800c402:	e0dc      	b.n	800c5be <HAL_TIM_ConfigClockSource+0x1d6>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2202      	movs	r2, #2
 800c410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	4b6a      	ldr	r3, [pc, #424]	@ (800c5c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c420:	4013      	ands	r3, r2
 800c422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c42a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a64      	ldr	r2, [pc, #400]	@ (800c5cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	f000 80a9 	beq.w	800c592 <HAL_TIM_ConfigClockSource+0x1aa>
 800c440:	4a62      	ldr	r2, [pc, #392]	@ (800c5cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800c442:	4293      	cmp	r3, r2
 800c444:	f200 80ae 	bhi.w	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c448:	4a61      	ldr	r2, [pc, #388]	@ (800c5d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	f000 80a1 	beq.w	800c592 <HAL_TIM_ConfigClockSource+0x1aa>
 800c450:	4a5f      	ldr	r2, [pc, #380]	@ (800c5d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c452:	4293      	cmp	r3, r2
 800c454:	f200 80a6 	bhi.w	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c458:	4a5e      	ldr	r2, [pc, #376]	@ (800c5d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	f000 8099 	beq.w	800c592 <HAL_TIM_ConfigClockSource+0x1aa>
 800c460:	4a5c      	ldr	r2, [pc, #368]	@ (800c5d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c462:	4293      	cmp	r3, r2
 800c464:	f200 809e 	bhi.w	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c468:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c46c:	f000 8091 	beq.w	800c592 <HAL_TIM_ConfigClockSource+0x1aa>
 800c470:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c474:	f200 8096 	bhi.w	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c478:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c47c:	f000 8089 	beq.w	800c592 <HAL_TIM_ConfigClockSource+0x1aa>
 800c480:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c484:	f200 808e 	bhi.w	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c488:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c48c:	d03e      	beq.n	800c50c <HAL_TIM_ConfigClockSource+0x124>
 800c48e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c492:	f200 8087 	bhi.w	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c49a:	f000 8086 	beq.w	800c5aa <HAL_TIM_ConfigClockSource+0x1c2>
 800c49e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4a2:	d87f      	bhi.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4a4:	2b70      	cmp	r3, #112	@ 0x70
 800c4a6:	d01a      	beq.n	800c4de <HAL_TIM_ConfigClockSource+0xf6>
 800c4a8:	2b70      	cmp	r3, #112	@ 0x70
 800c4aa:	d87b      	bhi.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4ac:	2b60      	cmp	r3, #96	@ 0x60
 800c4ae:	d050      	beq.n	800c552 <HAL_TIM_ConfigClockSource+0x16a>
 800c4b0:	2b60      	cmp	r3, #96	@ 0x60
 800c4b2:	d877      	bhi.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4b4:	2b50      	cmp	r3, #80	@ 0x50
 800c4b6:	d03c      	beq.n	800c532 <HAL_TIM_ConfigClockSource+0x14a>
 800c4b8:	2b50      	cmp	r3, #80	@ 0x50
 800c4ba:	d873      	bhi.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4bc:	2b40      	cmp	r3, #64	@ 0x40
 800c4be:	d058      	beq.n	800c572 <HAL_TIM_ConfigClockSource+0x18a>
 800c4c0:	2b40      	cmp	r3, #64	@ 0x40
 800c4c2:	d86f      	bhi.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4c4:	2b30      	cmp	r3, #48	@ 0x30
 800c4c6:	d064      	beq.n	800c592 <HAL_TIM_ConfigClockSource+0x1aa>
 800c4c8:	2b30      	cmp	r3, #48	@ 0x30
 800c4ca:	d86b      	bhi.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4cc:	2b20      	cmp	r3, #32
 800c4ce:	d060      	beq.n	800c592 <HAL_TIM_ConfigClockSource+0x1aa>
 800c4d0:	2b20      	cmp	r3, #32
 800c4d2:	d867      	bhi.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d05c      	beq.n	800c592 <HAL_TIM_ConfigClockSource+0x1aa>
 800c4d8:	2b10      	cmp	r3, #16
 800c4da:	d05a      	beq.n	800c592 <HAL_TIM_ConfigClockSource+0x1aa>
 800c4dc:	e062      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4ee:	f000 fb27 	bl	800cb40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	609a      	str	r2, [r3, #8]
      break;
 800c50a:	e04f      	b.n	800c5ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c51c:	f000 fb10 	bl	800cb40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	689a      	ldr	r2, [r3, #8]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c52e:	609a      	str	r2, [r3, #8]
      break;
 800c530:	e03c      	b.n	800c5ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c53e:	461a      	mov	r2, r3
 800c540:	f000 f9ca 	bl	800c8d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2150      	movs	r1, #80	@ 0x50
 800c54a:	4618      	mov	r0, r3
 800c54c:	f000 fada 	bl	800cb04 <TIM_ITRx_SetConfig>
      break;
 800c550:	e02c      	b.n	800c5ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c55e:	461a      	mov	r2, r3
 800c560:	f000 fa26 	bl	800c9b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2160      	movs	r1, #96	@ 0x60
 800c56a:	4618      	mov	r0, r3
 800c56c:	f000 faca 	bl	800cb04 <TIM_ITRx_SetConfig>
      break;
 800c570:	e01c      	b.n	800c5ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c57e:	461a      	mov	r2, r3
 800c580:	f000 f9aa 	bl	800c8d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2140      	movs	r1, #64	@ 0x40
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 faba 	bl	800cb04 <TIM_ITRx_SetConfig>
      break;
 800c590:	e00c      	b.n	800c5ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4619      	mov	r1, r3
 800c59c:	4610      	mov	r0, r2
 800c59e:	f000 fab1 	bl	800cb04 <TIM_ITRx_SetConfig>
      break;
 800c5a2:	e003      	b.n	800c5ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5a8:	e000      	b.n	800c5ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c5aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	ffceff88 	.word	0xffceff88
 800c5cc:	00100040 	.word	0x00100040
 800c5d0:	00100030 	.word	0x00100030
 800c5d4:	00100020 	.word	0x00100020

0800c5d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b0c      	cmp	r3, #12
 800c5ea:	d831      	bhi.n	800c650 <HAL_TIM_ReadCapturedValue+0x78>
 800c5ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800c5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f2:	bf00      	nop
 800c5f4:	0800c629 	.word	0x0800c629
 800c5f8:	0800c651 	.word	0x0800c651
 800c5fc:	0800c651 	.word	0x0800c651
 800c600:	0800c651 	.word	0x0800c651
 800c604:	0800c633 	.word	0x0800c633
 800c608:	0800c651 	.word	0x0800c651
 800c60c:	0800c651 	.word	0x0800c651
 800c610:	0800c651 	.word	0x0800c651
 800c614:	0800c63d 	.word	0x0800c63d
 800c618:	0800c651 	.word	0x0800c651
 800c61c:	0800c651 	.word	0x0800c651
 800c620:	0800c651 	.word	0x0800c651
 800c624:	0800c647 	.word	0x0800c647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c62e:	60fb      	str	r3, [r7, #12]

      break;
 800c630:	e00f      	b.n	800c652 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c638:	60fb      	str	r3, [r7, #12]

      break;
 800c63a:	e00a      	b.n	800c652 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c642:	60fb      	str	r3, [r7, #12]

      break;
 800c644:	e005      	b.n	800c652 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c64c:	60fb      	str	r3, [r7, #12]

      break;
 800c64e:	e000      	b.n	800c652 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800c650:	bf00      	nop
  }

  return tmpreg;
 800c652:	68fb      	ldr	r3, [r7, #12]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3714      	adds	r7, #20
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c668:	bf00      	nop
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c67c:	bf00      	nop
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c690:	bf00      	nop
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c6a4:	bf00      	nop
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4a43      	ldr	r2, [pc, #268]	@ (800c7d0 <TIM_Base_SetConfig+0x120>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d013      	beq.n	800c6f0 <TIM_Base_SetConfig+0x40>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ce:	d00f      	beq.n	800c6f0 <TIM_Base_SetConfig+0x40>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4a40      	ldr	r2, [pc, #256]	@ (800c7d4 <TIM_Base_SetConfig+0x124>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d00b      	beq.n	800c6f0 <TIM_Base_SetConfig+0x40>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a3f      	ldr	r2, [pc, #252]	@ (800c7d8 <TIM_Base_SetConfig+0x128>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d007      	beq.n	800c6f0 <TIM_Base_SetConfig+0x40>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a3e      	ldr	r2, [pc, #248]	@ (800c7dc <TIM_Base_SetConfig+0x12c>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d003      	beq.n	800c6f0 <TIM_Base_SetConfig+0x40>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a3d      	ldr	r2, [pc, #244]	@ (800c7e0 <TIM_Base_SetConfig+0x130>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d108      	bne.n	800c702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a32      	ldr	r2, [pc, #200]	@ (800c7d0 <TIM_Base_SetConfig+0x120>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d01f      	beq.n	800c74a <TIM_Base_SetConfig+0x9a>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c710:	d01b      	beq.n	800c74a <TIM_Base_SetConfig+0x9a>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a2f      	ldr	r2, [pc, #188]	@ (800c7d4 <TIM_Base_SetConfig+0x124>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d017      	beq.n	800c74a <TIM_Base_SetConfig+0x9a>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4a2e      	ldr	r2, [pc, #184]	@ (800c7d8 <TIM_Base_SetConfig+0x128>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d013      	beq.n	800c74a <TIM_Base_SetConfig+0x9a>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4a2d      	ldr	r2, [pc, #180]	@ (800c7dc <TIM_Base_SetConfig+0x12c>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d00f      	beq.n	800c74a <TIM_Base_SetConfig+0x9a>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4a2c      	ldr	r2, [pc, #176]	@ (800c7e0 <TIM_Base_SetConfig+0x130>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d00b      	beq.n	800c74a <TIM_Base_SetConfig+0x9a>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4a2b      	ldr	r2, [pc, #172]	@ (800c7e4 <TIM_Base_SetConfig+0x134>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d007      	beq.n	800c74a <TIM_Base_SetConfig+0x9a>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4a2a      	ldr	r2, [pc, #168]	@ (800c7e8 <TIM_Base_SetConfig+0x138>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d003      	beq.n	800c74a <TIM_Base_SetConfig+0x9a>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	4a29      	ldr	r2, [pc, #164]	@ (800c7ec <TIM_Base_SetConfig+0x13c>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d108      	bne.n	800c75c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	4313      	orrs	r3, r2
 800c75a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	695b      	ldr	r3, [r3, #20]
 800c766:	4313      	orrs	r3, r2
 800c768:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	689a      	ldr	r2, [r3, #8]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a14      	ldr	r2, [pc, #80]	@ (800c7d0 <TIM_Base_SetConfig+0x120>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d00f      	beq.n	800c7a2 <TIM_Base_SetConfig+0xf2>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4a16      	ldr	r2, [pc, #88]	@ (800c7e0 <TIM_Base_SetConfig+0x130>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d00b      	beq.n	800c7a2 <TIM_Base_SetConfig+0xf2>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a15      	ldr	r2, [pc, #84]	@ (800c7e4 <TIM_Base_SetConfig+0x134>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d007      	beq.n	800c7a2 <TIM_Base_SetConfig+0xf2>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4a14      	ldr	r2, [pc, #80]	@ (800c7e8 <TIM_Base_SetConfig+0x138>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d003      	beq.n	800c7a2 <TIM_Base_SetConfig+0xf2>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4a13      	ldr	r2, [pc, #76]	@ (800c7ec <TIM_Base_SetConfig+0x13c>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d103      	bne.n	800c7aa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	691a      	ldr	r2, [r3, #16]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f043 0204 	orr.w	r2, r3, #4
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	601a      	str	r2, [r3, #0]
}
 800c7c2:	bf00      	nop
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	40010000 	.word	0x40010000
 800c7d4:	40000400 	.word	0x40000400
 800c7d8:	40000800 	.word	0x40000800
 800c7dc:	40000c00 	.word	0x40000c00
 800c7e0:	40010400 	.word	0x40010400
 800c7e4:	40014000 	.word	0x40014000
 800c7e8:	40014400 	.word	0x40014400
 800c7ec:	40014800 	.word	0x40014800

0800c7f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6a1b      	ldr	r3, [r3, #32]
 800c808:	f023 0201 	bic.w	r2, r3, #1
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	4a28      	ldr	r2, [pc, #160]	@ (800c8bc <TIM_TI1_SetConfig+0xcc>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d01b      	beq.n	800c856 <TIM_TI1_SetConfig+0x66>
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c824:	d017      	beq.n	800c856 <TIM_TI1_SetConfig+0x66>
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	4a25      	ldr	r2, [pc, #148]	@ (800c8c0 <TIM_TI1_SetConfig+0xd0>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d013      	beq.n	800c856 <TIM_TI1_SetConfig+0x66>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	4a24      	ldr	r2, [pc, #144]	@ (800c8c4 <TIM_TI1_SetConfig+0xd4>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d00f      	beq.n	800c856 <TIM_TI1_SetConfig+0x66>
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	4a23      	ldr	r2, [pc, #140]	@ (800c8c8 <TIM_TI1_SetConfig+0xd8>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d00b      	beq.n	800c856 <TIM_TI1_SetConfig+0x66>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	4a22      	ldr	r2, [pc, #136]	@ (800c8cc <TIM_TI1_SetConfig+0xdc>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d007      	beq.n	800c856 <TIM_TI1_SetConfig+0x66>
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	4a21      	ldr	r2, [pc, #132]	@ (800c8d0 <TIM_TI1_SetConfig+0xe0>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d003      	beq.n	800c856 <TIM_TI1_SetConfig+0x66>
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	4a20      	ldr	r2, [pc, #128]	@ (800c8d4 <TIM_TI1_SetConfig+0xe4>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d101      	bne.n	800c85a <TIM_TI1_SetConfig+0x6a>
 800c856:	2301      	movs	r3, #1
 800c858:	e000      	b.n	800c85c <TIM_TI1_SetConfig+0x6c>
 800c85a:	2300      	movs	r3, #0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d008      	beq.n	800c872 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	f023 0303 	bic.w	r3, r3, #3
 800c866:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c868:	697a      	ldr	r2, [r7, #20]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	617b      	str	r3, [r7, #20]
 800c870:	e003      	b.n	800c87a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f043 0301 	orr.w	r3, r3, #1
 800c878:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	011b      	lsls	r3, r3, #4
 800c886:	b2db      	uxtb	r3, r3
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	f023 030a 	bic.w	r3, r3, #10
 800c894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	f003 030a 	and.w	r3, r3, #10
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	621a      	str	r2, [r3, #32]
}
 800c8ae:	bf00      	nop
 800c8b0:	371c      	adds	r7, #28
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	40010000 	.word	0x40010000
 800c8c0:	40000400 	.word	0x40000400
 800c8c4:	40000800 	.word	0x40000800
 800c8c8:	40000c00 	.word	0x40000c00
 800c8cc:	40010400 	.word	0x40010400
 800c8d0:	40001800 	.word	0x40001800
 800c8d4:	40014000 	.word	0x40014000

0800c8d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b087      	sub	sp, #28
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6a1b      	ldr	r3, [r3, #32]
 800c8e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6a1b      	ldr	r3, [r3, #32]
 800c8ee:	f023 0201 	bic.w	r2, r3, #1
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	011b      	lsls	r3, r3, #4
 800c908:	693a      	ldr	r2, [r7, #16]
 800c90a:	4313      	orrs	r3, r2
 800c90c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	f023 030a 	bic.w	r3, r3, #10
 800c914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	693a      	ldr	r2, [r7, #16]
 800c922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	621a      	str	r2, [r3, #32]
}
 800c92a:	bf00      	nop
 800c92c:	371c      	adds	r7, #28
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr

0800c936 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c936:	b480      	push	{r7}
 800c938:	b087      	sub	sp, #28
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	607a      	str	r2, [r7, #4]
 800c942:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6a1b      	ldr	r3, [r3, #32]
 800c948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	f023 0210 	bic.w	r2, r3, #16
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	021b      	lsls	r3, r3, #8
 800c968:	693a      	ldr	r2, [r7, #16]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	031b      	lsls	r3, r3, #12
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	4313      	orrs	r3, r2
 800c980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c988:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	011b      	lsls	r3, r3, #4
 800c98e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c992:	697a      	ldr	r2, [r7, #20]
 800c994:	4313      	orrs	r3, r2
 800c996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	621a      	str	r2, [r3, #32]
}
 800c9a4:	bf00      	nop
 800c9a6:	371c      	adds	r7, #28
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b087      	sub	sp, #28
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6a1b      	ldr	r3, [r3, #32]
 800c9c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	f023 0210 	bic.w	r2, r3, #16
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c9da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	031b      	lsls	r3, r3, #12
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c9ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	011b      	lsls	r3, r3, #4
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	697a      	ldr	r2, [r7, #20]
 800ca02:	621a      	str	r2, [r3, #32]
}
 800ca04:	bf00      	nop
 800ca06:	371c      	adds	r7, #28
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b087      	sub	sp, #28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
 800ca1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6a1b      	ldr	r3, [r3, #32]
 800ca22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6a1b      	ldr	r3, [r3, #32]
 800ca28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	69db      	ldr	r3, [r3, #28]
 800ca34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f023 0303 	bic.w	r3, r3, #3
 800ca3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ca4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	011b      	lsls	r3, r3, #4
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800ca60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	021b      	lsls	r3, r3, #8
 800ca66:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	693a      	ldr	r2, [r7, #16]
 800ca74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	697a      	ldr	r2, [r7, #20]
 800ca7a:	621a      	str	r2, [r3, #32]
}
 800ca7c:	bf00      	nop
 800ca7e:	371c      	adds	r7, #28
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b087      	sub	sp, #28
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
 800ca94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6a1b      	ldr	r3, [r3, #32]
 800caa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	69db      	ldr	r3, [r3, #28]
 800caac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cab4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	021b      	lsls	r3, r3, #8
 800caba:	693a      	ldr	r2, [r7, #16]
 800cabc:	4313      	orrs	r3, r2
 800cabe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cac6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	031b      	lsls	r3, r3, #12
 800cacc:	b29b      	uxth	r3, r3
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800cada:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	031b      	lsls	r3, r3, #12
 800cae0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	697a      	ldr	r2, [r7, #20]
 800caf4:	621a      	str	r2, [r3, #32]
}
 800caf6:	bf00      	nop
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
	...

0800cb04 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	4b09      	ldr	r3, [pc, #36]	@ (800cb3c <TIM_ITRx_SetConfig+0x38>)
 800cb18:	4013      	ands	r3, r2
 800cb1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	f043 0307 	orr.w	r3, r3, #7
 800cb26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	609a      	str	r2, [r3, #8]
}
 800cb2e:	bf00      	nop
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	ffcfff8f 	.word	0xffcfff8f

0800cb40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
 800cb4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	021a      	lsls	r2, r3, #8
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	431a      	orrs	r2, r3
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	609a      	str	r2, [r3, #8]
}
 800cb74:	bf00      	nop
 800cb76:	371c      	adds	r7, #28
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b087      	sub	sp, #28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	f003 031f 	and.w	r3, r3, #31
 800cb92:	2201      	movs	r2, #1
 800cb94:	fa02 f303 	lsl.w	r3, r2, r3
 800cb98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6a1a      	ldr	r2, [r3, #32]
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	43db      	mvns	r3, r3
 800cba2:	401a      	ands	r2, r3
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6a1a      	ldr	r2, [r3, #32]
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	f003 031f 	and.w	r3, r3, #31
 800cbb2:	6879      	ldr	r1, [r7, #4]
 800cbb4:	fa01 f303 	lsl.w	r3, r1, r3
 800cbb8:	431a      	orrs	r2, r3
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	621a      	str	r2, [r3, #32]
}
 800cbbe:	bf00      	nop
 800cbc0:	371c      	adds	r7, #28
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
	...

0800cbcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d101      	bne.n	800cbe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	e06d      	b.n	800ccc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2202      	movs	r2, #2
 800cbf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a30      	ldr	r2, [pc, #192]	@ (800cccc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d004      	beq.n	800cc18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4a2f      	ldr	r2, [pc, #188]	@ (800ccd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d108      	bne.n	800cc2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cc1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a20      	ldr	r2, [pc, #128]	@ (800cccc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d022      	beq.n	800cc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc56:	d01d      	beq.n	800cc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a1d      	ldr	r2, [pc, #116]	@ (800ccd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d018      	beq.n	800cc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a1c      	ldr	r2, [pc, #112]	@ (800ccd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d013      	beq.n	800cc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a1a      	ldr	r2, [pc, #104]	@ (800ccdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d00e      	beq.n	800cc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a15      	ldr	r2, [pc, #84]	@ (800ccd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d009      	beq.n	800cc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a16      	ldr	r2, [pc, #88]	@ (800cce0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d004      	beq.n	800cc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a15      	ldr	r2, [pc, #84]	@ (800cce4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d10c      	bne.n	800ccae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr
 800cccc:	40010000 	.word	0x40010000
 800ccd0:	40010400 	.word	0x40010400
 800ccd4:	40000400 	.word	0x40000400
 800ccd8:	40000800 	.word	0x40000800
 800ccdc:	40000c00 	.word	0x40000c00
 800cce0:	40001800 	.word	0x40001800
 800cce4:	40014000 	.word	0x40014000

0800cce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd18:	bf00      	nop
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	e042      	b.n	800cdbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d106      	bne.n	800cd4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7f9 fbdd 	bl	8006508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2224      	movs	r2, #36	@ 0x24
 800cd52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f022 0201 	bic.w	r2, r2, #1
 800cd64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d002      	beq.n	800cd74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fd90 	bl	800d894 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f825 	bl	800cdc4 <UART_SetConfig>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d101      	bne.n	800cd84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cd80:	2301      	movs	r3, #1
 800cd82:	e01b      	b.n	800cdbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	685a      	ldr	r2, [r3, #4]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	689a      	ldr	r2, [r3, #8]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cda2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f042 0201 	orr.w	r2, r2, #1
 800cdb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fe0f 	bl	800d9d8 <UART_CheckIdleState>
 800cdba:	4603      	mov	r3, r0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdc8:	b092      	sub	sp, #72	@ 0x48
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	689a      	ldr	r2, [r3, #8]
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	431a      	orrs	r2, r3
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	431a      	orrs	r2, r3
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	69db      	ldr	r3, [r3, #28]
 800cde8:	4313      	orrs	r3, r2
 800cdea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	4bbe      	ldr	r3, [pc, #760]	@ (800d0ec <UART_SetConfig+0x328>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	6812      	ldr	r2, [r2, #0]
 800cdfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cdfc:	430b      	orrs	r3, r1
 800cdfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	68da      	ldr	r2, [r3, #12]
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	430a      	orrs	r2, r1
 800ce14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4ab3      	ldr	r2, [pc, #716]	@ (800d0f0 <UART_SetConfig+0x32c>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d004      	beq.n	800ce30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	689a      	ldr	r2, [r3, #8]
 800ce36:	4baf      	ldr	r3, [pc, #700]	@ (800d0f4 <UART_SetConfig+0x330>)
 800ce38:	4013      	ands	r3, r2
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	6812      	ldr	r2, [r2, #0]
 800ce3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce40:	430b      	orrs	r3, r1
 800ce42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce4a:	f023 010f 	bic.w	r1, r3, #15
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	430a      	orrs	r2, r1
 800ce58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4aa6      	ldr	r2, [pc, #664]	@ (800d0f8 <UART_SetConfig+0x334>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d177      	bne.n	800cf54 <UART_SetConfig+0x190>
 800ce64:	4ba5      	ldr	r3, [pc, #660]	@ (800d0fc <UART_SetConfig+0x338>)
 800ce66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce6c:	2b28      	cmp	r3, #40	@ 0x28
 800ce6e:	d86d      	bhi.n	800cf4c <UART_SetConfig+0x188>
 800ce70:	a201      	add	r2, pc, #4	@ (adr r2, 800ce78 <UART_SetConfig+0xb4>)
 800ce72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce76:	bf00      	nop
 800ce78:	0800cf1d 	.word	0x0800cf1d
 800ce7c:	0800cf4d 	.word	0x0800cf4d
 800ce80:	0800cf4d 	.word	0x0800cf4d
 800ce84:	0800cf4d 	.word	0x0800cf4d
 800ce88:	0800cf4d 	.word	0x0800cf4d
 800ce8c:	0800cf4d 	.word	0x0800cf4d
 800ce90:	0800cf4d 	.word	0x0800cf4d
 800ce94:	0800cf4d 	.word	0x0800cf4d
 800ce98:	0800cf25 	.word	0x0800cf25
 800ce9c:	0800cf4d 	.word	0x0800cf4d
 800cea0:	0800cf4d 	.word	0x0800cf4d
 800cea4:	0800cf4d 	.word	0x0800cf4d
 800cea8:	0800cf4d 	.word	0x0800cf4d
 800ceac:	0800cf4d 	.word	0x0800cf4d
 800ceb0:	0800cf4d 	.word	0x0800cf4d
 800ceb4:	0800cf4d 	.word	0x0800cf4d
 800ceb8:	0800cf2d 	.word	0x0800cf2d
 800cebc:	0800cf4d 	.word	0x0800cf4d
 800cec0:	0800cf4d 	.word	0x0800cf4d
 800cec4:	0800cf4d 	.word	0x0800cf4d
 800cec8:	0800cf4d 	.word	0x0800cf4d
 800cecc:	0800cf4d 	.word	0x0800cf4d
 800ced0:	0800cf4d 	.word	0x0800cf4d
 800ced4:	0800cf4d 	.word	0x0800cf4d
 800ced8:	0800cf35 	.word	0x0800cf35
 800cedc:	0800cf4d 	.word	0x0800cf4d
 800cee0:	0800cf4d 	.word	0x0800cf4d
 800cee4:	0800cf4d 	.word	0x0800cf4d
 800cee8:	0800cf4d 	.word	0x0800cf4d
 800ceec:	0800cf4d 	.word	0x0800cf4d
 800cef0:	0800cf4d 	.word	0x0800cf4d
 800cef4:	0800cf4d 	.word	0x0800cf4d
 800cef8:	0800cf3d 	.word	0x0800cf3d
 800cefc:	0800cf4d 	.word	0x0800cf4d
 800cf00:	0800cf4d 	.word	0x0800cf4d
 800cf04:	0800cf4d 	.word	0x0800cf4d
 800cf08:	0800cf4d 	.word	0x0800cf4d
 800cf0c:	0800cf4d 	.word	0x0800cf4d
 800cf10:	0800cf4d 	.word	0x0800cf4d
 800cf14:	0800cf4d 	.word	0x0800cf4d
 800cf18:	0800cf45 	.word	0x0800cf45
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf22:	e222      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cf24:	2304      	movs	r3, #4
 800cf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2a:	e21e      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cf2c:	2308      	movs	r3, #8
 800cf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf32:	e21a      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cf34:	2310      	movs	r3, #16
 800cf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3a:	e216      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cf3c:	2320      	movs	r3, #32
 800cf3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf42:	e212      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cf44:	2340      	movs	r3, #64	@ 0x40
 800cf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf4a:	e20e      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cf4c:	2380      	movs	r3, #128	@ 0x80
 800cf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf52:	e20a      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a69      	ldr	r2, [pc, #420]	@ (800d100 <UART_SetConfig+0x33c>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d130      	bne.n	800cfc0 <UART_SetConfig+0x1fc>
 800cf5e:	4b67      	ldr	r3, [pc, #412]	@ (800d0fc <UART_SetConfig+0x338>)
 800cf60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf62:	f003 0307 	and.w	r3, r3, #7
 800cf66:	2b05      	cmp	r3, #5
 800cf68:	d826      	bhi.n	800cfb8 <UART_SetConfig+0x1f4>
 800cf6a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf70 <UART_SetConfig+0x1ac>)
 800cf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf70:	0800cf89 	.word	0x0800cf89
 800cf74:	0800cf91 	.word	0x0800cf91
 800cf78:	0800cf99 	.word	0x0800cf99
 800cf7c:	0800cfa1 	.word	0x0800cfa1
 800cf80:	0800cfa9 	.word	0x0800cfa9
 800cf84:	0800cfb1 	.word	0x0800cfb1
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8e:	e1ec      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cf90:	2304      	movs	r3, #4
 800cf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf96:	e1e8      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cf98:	2308      	movs	r3, #8
 800cf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9e:	e1e4      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cfa0:	2310      	movs	r3, #16
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa6:	e1e0      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cfa8:	2320      	movs	r3, #32
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfae:	e1dc      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cfb0:	2340      	movs	r3, #64	@ 0x40
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfb6:	e1d8      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cfb8:	2380      	movs	r3, #128	@ 0x80
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfbe:	e1d4      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a4f      	ldr	r2, [pc, #316]	@ (800d104 <UART_SetConfig+0x340>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d130      	bne.n	800d02c <UART_SetConfig+0x268>
 800cfca:	4b4c      	ldr	r3, [pc, #304]	@ (800d0fc <UART_SetConfig+0x338>)
 800cfcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfce:	f003 0307 	and.w	r3, r3, #7
 800cfd2:	2b05      	cmp	r3, #5
 800cfd4:	d826      	bhi.n	800d024 <UART_SetConfig+0x260>
 800cfd6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfdc <UART_SetConfig+0x218>)
 800cfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfdc:	0800cff5 	.word	0x0800cff5
 800cfe0:	0800cffd 	.word	0x0800cffd
 800cfe4:	0800d005 	.word	0x0800d005
 800cfe8:	0800d00d 	.word	0x0800d00d
 800cfec:	0800d015 	.word	0x0800d015
 800cff0:	0800d01d 	.word	0x0800d01d
 800cff4:	2300      	movs	r3, #0
 800cff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cffa:	e1b6      	b.n	800d36a <UART_SetConfig+0x5a6>
 800cffc:	2304      	movs	r3, #4
 800cffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d002:	e1b2      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d004:	2308      	movs	r3, #8
 800d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00a:	e1ae      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d00c:	2310      	movs	r3, #16
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d012:	e1aa      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d014:	2320      	movs	r3, #32
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01a:	e1a6      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d01c:	2340      	movs	r3, #64	@ 0x40
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d022:	e1a2      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d024:	2380      	movs	r3, #128	@ 0x80
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d02a:	e19e      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a35      	ldr	r2, [pc, #212]	@ (800d108 <UART_SetConfig+0x344>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d130      	bne.n	800d098 <UART_SetConfig+0x2d4>
 800d036:	4b31      	ldr	r3, [pc, #196]	@ (800d0fc <UART_SetConfig+0x338>)
 800d038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d03a:	f003 0307 	and.w	r3, r3, #7
 800d03e:	2b05      	cmp	r3, #5
 800d040:	d826      	bhi.n	800d090 <UART_SetConfig+0x2cc>
 800d042:	a201      	add	r2, pc, #4	@ (adr r2, 800d048 <UART_SetConfig+0x284>)
 800d044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d048:	0800d061 	.word	0x0800d061
 800d04c:	0800d069 	.word	0x0800d069
 800d050:	0800d071 	.word	0x0800d071
 800d054:	0800d079 	.word	0x0800d079
 800d058:	0800d081 	.word	0x0800d081
 800d05c:	0800d089 	.word	0x0800d089
 800d060:	2300      	movs	r3, #0
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d066:	e180      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d068:	2304      	movs	r3, #4
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06e:	e17c      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d070:	2308      	movs	r3, #8
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e178      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d078:	2310      	movs	r3, #16
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e174      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d080:	2320      	movs	r3, #32
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d086:	e170      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d088:	2340      	movs	r3, #64	@ 0x40
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d08e:	e16c      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d090:	2380      	movs	r3, #128	@ 0x80
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d096:	e168      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a1b      	ldr	r2, [pc, #108]	@ (800d10c <UART_SetConfig+0x348>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d142      	bne.n	800d128 <UART_SetConfig+0x364>
 800d0a2:	4b16      	ldr	r3, [pc, #88]	@ (800d0fc <UART_SetConfig+0x338>)
 800d0a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0a6:	f003 0307 	and.w	r3, r3, #7
 800d0aa:	2b05      	cmp	r3, #5
 800d0ac:	d838      	bhi.n	800d120 <UART_SetConfig+0x35c>
 800d0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d0b4 <UART_SetConfig+0x2f0>)
 800d0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b4:	0800d0cd 	.word	0x0800d0cd
 800d0b8:	0800d0d5 	.word	0x0800d0d5
 800d0bc:	0800d0dd 	.word	0x0800d0dd
 800d0c0:	0800d0e5 	.word	0x0800d0e5
 800d0c4:	0800d111 	.word	0x0800d111
 800d0c8:	0800d119 	.word	0x0800d119
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0d2:	e14a      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d0d4:	2304      	movs	r3, #4
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0da:	e146      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d0dc:	2308      	movs	r3, #8
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e142      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d0e4:	2310      	movs	r3, #16
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e13e      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d0ec:	cfff69f3 	.word	0xcfff69f3
 800d0f0:	58000c00 	.word	0x58000c00
 800d0f4:	11fff4ff 	.word	0x11fff4ff
 800d0f8:	40011000 	.word	0x40011000
 800d0fc:	58024400 	.word	0x58024400
 800d100:	40004400 	.word	0x40004400
 800d104:	40004800 	.word	0x40004800
 800d108:	40004c00 	.word	0x40004c00
 800d10c:	40005000 	.word	0x40005000
 800d110:	2320      	movs	r3, #32
 800d112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d116:	e128      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d118:	2340      	movs	r3, #64	@ 0x40
 800d11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d11e:	e124      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d120:	2380      	movs	r3, #128	@ 0x80
 800d122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d126:	e120      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4acb      	ldr	r2, [pc, #812]	@ (800d45c <UART_SetConfig+0x698>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d176      	bne.n	800d220 <UART_SetConfig+0x45c>
 800d132:	4bcb      	ldr	r3, [pc, #812]	@ (800d460 <UART_SetConfig+0x69c>)
 800d134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d13a:	2b28      	cmp	r3, #40	@ 0x28
 800d13c:	d86c      	bhi.n	800d218 <UART_SetConfig+0x454>
 800d13e:	a201      	add	r2, pc, #4	@ (adr r2, 800d144 <UART_SetConfig+0x380>)
 800d140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d144:	0800d1e9 	.word	0x0800d1e9
 800d148:	0800d219 	.word	0x0800d219
 800d14c:	0800d219 	.word	0x0800d219
 800d150:	0800d219 	.word	0x0800d219
 800d154:	0800d219 	.word	0x0800d219
 800d158:	0800d219 	.word	0x0800d219
 800d15c:	0800d219 	.word	0x0800d219
 800d160:	0800d219 	.word	0x0800d219
 800d164:	0800d1f1 	.word	0x0800d1f1
 800d168:	0800d219 	.word	0x0800d219
 800d16c:	0800d219 	.word	0x0800d219
 800d170:	0800d219 	.word	0x0800d219
 800d174:	0800d219 	.word	0x0800d219
 800d178:	0800d219 	.word	0x0800d219
 800d17c:	0800d219 	.word	0x0800d219
 800d180:	0800d219 	.word	0x0800d219
 800d184:	0800d1f9 	.word	0x0800d1f9
 800d188:	0800d219 	.word	0x0800d219
 800d18c:	0800d219 	.word	0x0800d219
 800d190:	0800d219 	.word	0x0800d219
 800d194:	0800d219 	.word	0x0800d219
 800d198:	0800d219 	.word	0x0800d219
 800d19c:	0800d219 	.word	0x0800d219
 800d1a0:	0800d219 	.word	0x0800d219
 800d1a4:	0800d201 	.word	0x0800d201
 800d1a8:	0800d219 	.word	0x0800d219
 800d1ac:	0800d219 	.word	0x0800d219
 800d1b0:	0800d219 	.word	0x0800d219
 800d1b4:	0800d219 	.word	0x0800d219
 800d1b8:	0800d219 	.word	0x0800d219
 800d1bc:	0800d219 	.word	0x0800d219
 800d1c0:	0800d219 	.word	0x0800d219
 800d1c4:	0800d209 	.word	0x0800d209
 800d1c8:	0800d219 	.word	0x0800d219
 800d1cc:	0800d219 	.word	0x0800d219
 800d1d0:	0800d219 	.word	0x0800d219
 800d1d4:	0800d219 	.word	0x0800d219
 800d1d8:	0800d219 	.word	0x0800d219
 800d1dc:	0800d219 	.word	0x0800d219
 800d1e0:	0800d219 	.word	0x0800d219
 800d1e4:	0800d211 	.word	0x0800d211
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ee:	e0bc      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d1f0:	2304      	movs	r3, #4
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1f6:	e0b8      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d1f8:	2308      	movs	r3, #8
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fe:	e0b4      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d200:	2310      	movs	r3, #16
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d206:	e0b0      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d208:	2320      	movs	r3, #32
 800d20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20e:	e0ac      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d210:	2340      	movs	r3, #64	@ 0x40
 800d212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d216:	e0a8      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d218:	2380      	movs	r3, #128	@ 0x80
 800d21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21e:	e0a4      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a8f      	ldr	r2, [pc, #572]	@ (800d464 <UART_SetConfig+0x6a0>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d130      	bne.n	800d28c <UART_SetConfig+0x4c8>
 800d22a:	4b8d      	ldr	r3, [pc, #564]	@ (800d460 <UART_SetConfig+0x69c>)
 800d22c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d22e:	f003 0307 	and.w	r3, r3, #7
 800d232:	2b05      	cmp	r3, #5
 800d234:	d826      	bhi.n	800d284 <UART_SetConfig+0x4c0>
 800d236:	a201      	add	r2, pc, #4	@ (adr r2, 800d23c <UART_SetConfig+0x478>)
 800d238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23c:	0800d255 	.word	0x0800d255
 800d240:	0800d25d 	.word	0x0800d25d
 800d244:	0800d265 	.word	0x0800d265
 800d248:	0800d26d 	.word	0x0800d26d
 800d24c:	0800d275 	.word	0x0800d275
 800d250:	0800d27d 	.word	0x0800d27d
 800d254:	2300      	movs	r3, #0
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d25a:	e086      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d25c:	2304      	movs	r3, #4
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d262:	e082      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d264:	2308      	movs	r3, #8
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26a:	e07e      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d26c:	2310      	movs	r3, #16
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d272:	e07a      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d274:	2320      	movs	r3, #32
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27a:	e076      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d27c:	2340      	movs	r3, #64	@ 0x40
 800d27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d282:	e072      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d284:	2380      	movs	r3, #128	@ 0x80
 800d286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d28a:	e06e      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a75      	ldr	r2, [pc, #468]	@ (800d468 <UART_SetConfig+0x6a4>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d130      	bne.n	800d2f8 <UART_SetConfig+0x534>
 800d296:	4b72      	ldr	r3, [pc, #456]	@ (800d460 <UART_SetConfig+0x69c>)
 800d298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d29a:	f003 0307 	and.w	r3, r3, #7
 800d29e:	2b05      	cmp	r3, #5
 800d2a0:	d826      	bhi.n	800d2f0 <UART_SetConfig+0x52c>
 800d2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800d2a8 <UART_SetConfig+0x4e4>)
 800d2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a8:	0800d2c1 	.word	0x0800d2c1
 800d2ac:	0800d2c9 	.word	0x0800d2c9
 800d2b0:	0800d2d1 	.word	0x0800d2d1
 800d2b4:	0800d2d9 	.word	0x0800d2d9
 800d2b8:	0800d2e1 	.word	0x0800d2e1
 800d2bc:	0800d2e9 	.word	0x0800d2e9
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2c6:	e050      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d2c8:	2304      	movs	r3, #4
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ce:	e04c      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d2d0:	2308      	movs	r3, #8
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d6:	e048      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d2d8:	2310      	movs	r3, #16
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2de:	e044      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d2e0:	2320      	movs	r3, #32
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e6:	e040      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d2e8:	2340      	movs	r3, #64	@ 0x40
 800d2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ee:	e03c      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d2f0:	2380      	movs	r3, #128	@ 0x80
 800d2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2f6:	e038      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4a5b      	ldr	r2, [pc, #364]	@ (800d46c <UART_SetConfig+0x6a8>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d130      	bne.n	800d364 <UART_SetConfig+0x5a0>
 800d302:	4b57      	ldr	r3, [pc, #348]	@ (800d460 <UART_SetConfig+0x69c>)
 800d304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d306:	f003 0307 	and.w	r3, r3, #7
 800d30a:	2b05      	cmp	r3, #5
 800d30c:	d826      	bhi.n	800d35c <UART_SetConfig+0x598>
 800d30e:	a201      	add	r2, pc, #4	@ (adr r2, 800d314 <UART_SetConfig+0x550>)
 800d310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d314:	0800d32d 	.word	0x0800d32d
 800d318:	0800d335 	.word	0x0800d335
 800d31c:	0800d33d 	.word	0x0800d33d
 800d320:	0800d345 	.word	0x0800d345
 800d324:	0800d34d 	.word	0x0800d34d
 800d328:	0800d355 	.word	0x0800d355
 800d32c:	2302      	movs	r3, #2
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d332:	e01a      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d334:	2304      	movs	r3, #4
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33a:	e016      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d33c:	2308      	movs	r3, #8
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d342:	e012      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d344:	2310      	movs	r3, #16
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34a:	e00e      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d34c:	2320      	movs	r3, #32
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d352:	e00a      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d354:	2340      	movs	r3, #64	@ 0x40
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35a:	e006      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d35c:	2380      	movs	r3, #128	@ 0x80
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d362:	e002      	b.n	800d36a <UART_SetConfig+0x5a6>
 800d364:	2380      	movs	r3, #128	@ 0x80
 800d366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a3f      	ldr	r2, [pc, #252]	@ (800d46c <UART_SetConfig+0x6a8>)
 800d370:	4293      	cmp	r3, r2
 800d372:	f040 80f8 	bne.w	800d566 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d376:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d37a:	2b20      	cmp	r3, #32
 800d37c:	dc46      	bgt.n	800d40c <UART_SetConfig+0x648>
 800d37e:	2b02      	cmp	r3, #2
 800d380:	f2c0 8082 	blt.w	800d488 <UART_SetConfig+0x6c4>
 800d384:	3b02      	subs	r3, #2
 800d386:	2b1e      	cmp	r3, #30
 800d388:	d87e      	bhi.n	800d488 <UART_SetConfig+0x6c4>
 800d38a:	a201      	add	r2, pc, #4	@ (adr r2, 800d390 <UART_SetConfig+0x5cc>)
 800d38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d390:	0800d413 	.word	0x0800d413
 800d394:	0800d489 	.word	0x0800d489
 800d398:	0800d41b 	.word	0x0800d41b
 800d39c:	0800d489 	.word	0x0800d489
 800d3a0:	0800d489 	.word	0x0800d489
 800d3a4:	0800d489 	.word	0x0800d489
 800d3a8:	0800d42b 	.word	0x0800d42b
 800d3ac:	0800d489 	.word	0x0800d489
 800d3b0:	0800d489 	.word	0x0800d489
 800d3b4:	0800d489 	.word	0x0800d489
 800d3b8:	0800d489 	.word	0x0800d489
 800d3bc:	0800d489 	.word	0x0800d489
 800d3c0:	0800d489 	.word	0x0800d489
 800d3c4:	0800d489 	.word	0x0800d489
 800d3c8:	0800d43b 	.word	0x0800d43b
 800d3cc:	0800d489 	.word	0x0800d489
 800d3d0:	0800d489 	.word	0x0800d489
 800d3d4:	0800d489 	.word	0x0800d489
 800d3d8:	0800d489 	.word	0x0800d489
 800d3dc:	0800d489 	.word	0x0800d489
 800d3e0:	0800d489 	.word	0x0800d489
 800d3e4:	0800d489 	.word	0x0800d489
 800d3e8:	0800d489 	.word	0x0800d489
 800d3ec:	0800d489 	.word	0x0800d489
 800d3f0:	0800d489 	.word	0x0800d489
 800d3f4:	0800d489 	.word	0x0800d489
 800d3f8:	0800d489 	.word	0x0800d489
 800d3fc:	0800d489 	.word	0x0800d489
 800d400:	0800d489 	.word	0x0800d489
 800d404:	0800d489 	.word	0x0800d489
 800d408:	0800d47b 	.word	0x0800d47b
 800d40c:	2b40      	cmp	r3, #64	@ 0x40
 800d40e:	d037      	beq.n	800d480 <UART_SetConfig+0x6bc>
 800d410:	e03a      	b.n	800d488 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d412:	f7fd fec9 	bl	800b1a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d418:	e03c      	b.n	800d494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d41a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fd fed8 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d428:	e034      	b.n	800d494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d42a:	f107 0318 	add.w	r3, r7, #24
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fe f824 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d438:	e02c      	b.n	800d494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d43a:	4b09      	ldr	r3, [pc, #36]	@ (800d460 <UART_SetConfig+0x69c>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f003 0320 	and.w	r3, r3, #32
 800d442:	2b00      	cmp	r3, #0
 800d444:	d016      	beq.n	800d474 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d446:	4b06      	ldr	r3, [pc, #24]	@ (800d460 <UART_SetConfig+0x69c>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	08db      	lsrs	r3, r3, #3
 800d44c:	f003 0303 	and.w	r3, r3, #3
 800d450:	4a07      	ldr	r2, [pc, #28]	@ (800d470 <UART_SetConfig+0x6ac>)
 800d452:	fa22 f303 	lsr.w	r3, r2, r3
 800d456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d458:	e01c      	b.n	800d494 <UART_SetConfig+0x6d0>
 800d45a:	bf00      	nop
 800d45c:	40011400 	.word	0x40011400
 800d460:	58024400 	.word	0x58024400
 800d464:	40007800 	.word	0x40007800
 800d468:	40007c00 	.word	0x40007c00
 800d46c:	58000c00 	.word	0x58000c00
 800d470:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d474:	4b9d      	ldr	r3, [pc, #628]	@ (800d6ec <UART_SetConfig+0x928>)
 800d476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d478:	e00c      	b.n	800d494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d47a:	4b9d      	ldr	r3, [pc, #628]	@ (800d6f0 <UART_SetConfig+0x92c>)
 800d47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d47e:	e009      	b.n	800d494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d486:	e005      	b.n	800d494 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d488:	2300      	movs	r3, #0
 800d48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d492:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 81de 	beq.w	800d858 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4a0:	4a94      	ldr	r2, [pc, #592]	@ (800d6f4 <UART_SetConfig+0x930>)
 800d4a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	4413      	add	r3, r2
 800d4ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d305      	bcc.n	800d4cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d903      	bls.n	800d4d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d4d2:	e1c1      	b.n	800d858 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	60bb      	str	r3, [r7, #8]
 800d4da:	60fa      	str	r2, [r7, #12]
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4e0:	4a84      	ldr	r2, [pc, #528]	@ (800d6f4 <UART_SetConfig+0x930>)
 800d4e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	607a      	str	r2, [r7, #4]
 800d4ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d4f6:	f7f2 ff43 	bl	8000380 <__aeabi_uldivmod>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	4610      	mov	r0, r2
 800d500:	4619      	mov	r1, r3
 800d502:	f04f 0200 	mov.w	r2, #0
 800d506:	f04f 0300 	mov.w	r3, #0
 800d50a:	020b      	lsls	r3, r1, #8
 800d50c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d510:	0202      	lsls	r2, r0, #8
 800d512:	6979      	ldr	r1, [r7, #20]
 800d514:	6849      	ldr	r1, [r1, #4]
 800d516:	0849      	lsrs	r1, r1, #1
 800d518:	2000      	movs	r0, #0
 800d51a:	460c      	mov	r4, r1
 800d51c:	4605      	mov	r5, r0
 800d51e:	eb12 0804 	adds.w	r8, r2, r4
 800d522:	eb43 0905 	adc.w	r9, r3, r5
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	469a      	mov	sl, r3
 800d52e:	4693      	mov	fp, r2
 800d530:	4652      	mov	r2, sl
 800d532:	465b      	mov	r3, fp
 800d534:	4640      	mov	r0, r8
 800d536:	4649      	mov	r1, r9
 800d538:	f7f2 ff22 	bl	8000380 <__aeabi_uldivmod>
 800d53c:	4602      	mov	r2, r0
 800d53e:	460b      	mov	r3, r1
 800d540:	4613      	mov	r3, r2
 800d542:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d546:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d54a:	d308      	bcc.n	800d55e <UART_SetConfig+0x79a>
 800d54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d552:	d204      	bcs.n	800d55e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d55a:	60da      	str	r2, [r3, #12]
 800d55c:	e17c      	b.n	800d858 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d564:	e178      	b.n	800d858 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	69db      	ldr	r3, [r3, #28]
 800d56a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d56e:	f040 80c5 	bne.w	800d6fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d572:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d576:	2b20      	cmp	r3, #32
 800d578:	dc48      	bgt.n	800d60c <UART_SetConfig+0x848>
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	db7b      	blt.n	800d676 <UART_SetConfig+0x8b2>
 800d57e:	2b20      	cmp	r3, #32
 800d580:	d879      	bhi.n	800d676 <UART_SetConfig+0x8b2>
 800d582:	a201      	add	r2, pc, #4	@ (adr r2, 800d588 <UART_SetConfig+0x7c4>)
 800d584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d588:	0800d613 	.word	0x0800d613
 800d58c:	0800d61b 	.word	0x0800d61b
 800d590:	0800d677 	.word	0x0800d677
 800d594:	0800d677 	.word	0x0800d677
 800d598:	0800d623 	.word	0x0800d623
 800d59c:	0800d677 	.word	0x0800d677
 800d5a0:	0800d677 	.word	0x0800d677
 800d5a4:	0800d677 	.word	0x0800d677
 800d5a8:	0800d633 	.word	0x0800d633
 800d5ac:	0800d677 	.word	0x0800d677
 800d5b0:	0800d677 	.word	0x0800d677
 800d5b4:	0800d677 	.word	0x0800d677
 800d5b8:	0800d677 	.word	0x0800d677
 800d5bc:	0800d677 	.word	0x0800d677
 800d5c0:	0800d677 	.word	0x0800d677
 800d5c4:	0800d677 	.word	0x0800d677
 800d5c8:	0800d643 	.word	0x0800d643
 800d5cc:	0800d677 	.word	0x0800d677
 800d5d0:	0800d677 	.word	0x0800d677
 800d5d4:	0800d677 	.word	0x0800d677
 800d5d8:	0800d677 	.word	0x0800d677
 800d5dc:	0800d677 	.word	0x0800d677
 800d5e0:	0800d677 	.word	0x0800d677
 800d5e4:	0800d677 	.word	0x0800d677
 800d5e8:	0800d677 	.word	0x0800d677
 800d5ec:	0800d677 	.word	0x0800d677
 800d5f0:	0800d677 	.word	0x0800d677
 800d5f4:	0800d677 	.word	0x0800d677
 800d5f8:	0800d677 	.word	0x0800d677
 800d5fc:	0800d677 	.word	0x0800d677
 800d600:	0800d677 	.word	0x0800d677
 800d604:	0800d677 	.word	0x0800d677
 800d608:	0800d669 	.word	0x0800d669
 800d60c:	2b40      	cmp	r3, #64	@ 0x40
 800d60e:	d02e      	beq.n	800d66e <UART_SetConfig+0x8aa>
 800d610:	e031      	b.n	800d676 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d612:	f7fb fe13 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800d616:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d618:	e033      	b.n	800d682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d61a:	f7fb fe25 	bl	8009268 <HAL_RCC_GetPCLK2Freq>
 800d61e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d620:	e02f      	b.n	800d682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d626:	4618      	mov	r0, r3
 800d628:	f7fd fdd4 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d630:	e027      	b.n	800d682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d632:	f107 0318 	add.w	r3, r7, #24
 800d636:	4618      	mov	r0, r3
 800d638:	f7fd ff20 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d640:	e01f      	b.n	800d682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d642:	4b2d      	ldr	r3, [pc, #180]	@ (800d6f8 <UART_SetConfig+0x934>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f003 0320 	and.w	r3, r3, #32
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d009      	beq.n	800d662 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d64e:	4b2a      	ldr	r3, [pc, #168]	@ (800d6f8 <UART_SetConfig+0x934>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	08db      	lsrs	r3, r3, #3
 800d654:	f003 0303 	and.w	r3, r3, #3
 800d658:	4a24      	ldr	r2, [pc, #144]	@ (800d6ec <UART_SetConfig+0x928>)
 800d65a:	fa22 f303 	lsr.w	r3, r2, r3
 800d65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d660:	e00f      	b.n	800d682 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d662:	4b22      	ldr	r3, [pc, #136]	@ (800d6ec <UART_SetConfig+0x928>)
 800d664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d666:	e00c      	b.n	800d682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d668:	4b21      	ldr	r3, [pc, #132]	@ (800d6f0 <UART_SetConfig+0x92c>)
 800d66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d66c:	e009      	b.n	800d682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d66e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d674:	e005      	b.n	800d682 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d676:	2300      	movs	r3, #0
 800d678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d67a:	2301      	movs	r3, #1
 800d67c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 80e7 	beq.w	800d858 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d68e:	4a19      	ldr	r2, [pc, #100]	@ (800d6f4 <UART_SetConfig+0x930>)
 800d690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d694:	461a      	mov	r2, r3
 800d696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d698:	fbb3 f3f2 	udiv	r3, r3, r2
 800d69c:	005a      	lsls	r2, r3, #1
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	085b      	lsrs	r3, r3, #1
 800d6a4:	441a      	add	r2, r3
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b2:	2b0f      	cmp	r3, #15
 800d6b4:	d916      	bls.n	800d6e4 <UART_SetConfig+0x920>
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6bc:	d212      	bcs.n	800d6e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	f023 030f 	bic.w	r3, r3, #15
 800d6c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ca:	085b      	lsrs	r3, r3, #1
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	f003 0307 	and.w	r3, r3, #7
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d6e0:	60da      	str	r2, [r3, #12]
 800d6e2:	e0b9      	b.n	800d858 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d6ea:	e0b5      	b.n	800d858 <UART_SetConfig+0xa94>
 800d6ec:	03d09000 	.word	0x03d09000
 800d6f0:	003d0900 	.word	0x003d0900
 800d6f4:	08011e60 	.word	0x08011e60
 800d6f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d700:	2b20      	cmp	r3, #32
 800d702:	dc49      	bgt.n	800d798 <UART_SetConfig+0x9d4>
 800d704:	2b00      	cmp	r3, #0
 800d706:	db7c      	blt.n	800d802 <UART_SetConfig+0xa3e>
 800d708:	2b20      	cmp	r3, #32
 800d70a:	d87a      	bhi.n	800d802 <UART_SetConfig+0xa3e>
 800d70c:	a201      	add	r2, pc, #4	@ (adr r2, 800d714 <UART_SetConfig+0x950>)
 800d70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d712:	bf00      	nop
 800d714:	0800d79f 	.word	0x0800d79f
 800d718:	0800d7a7 	.word	0x0800d7a7
 800d71c:	0800d803 	.word	0x0800d803
 800d720:	0800d803 	.word	0x0800d803
 800d724:	0800d7af 	.word	0x0800d7af
 800d728:	0800d803 	.word	0x0800d803
 800d72c:	0800d803 	.word	0x0800d803
 800d730:	0800d803 	.word	0x0800d803
 800d734:	0800d7bf 	.word	0x0800d7bf
 800d738:	0800d803 	.word	0x0800d803
 800d73c:	0800d803 	.word	0x0800d803
 800d740:	0800d803 	.word	0x0800d803
 800d744:	0800d803 	.word	0x0800d803
 800d748:	0800d803 	.word	0x0800d803
 800d74c:	0800d803 	.word	0x0800d803
 800d750:	0800d803 	.word	0x0800d803
 800d754:	0800d7cf 	.word	0x0800d7cf
 800d758:	0800d803 	.word	0x0800d803
 800d75c:	0800d803 	.word	0x0800d803
 800d760:	0800d803 	.word	0x0800d803
 800d764:	0800d803 	.word	0x0800d803
 800d768:	0800d803 	.word	0x0800d803
 800d76c:	0800d803 	.word	0x0800d803
 800d770:	0800d803 	.word	0x0800d803
 800d774:	0800d803 	.word	0x0800d803
 800d778:	0800d803 	.word	0x0800d803
 800d77c:	0800d803 	.word	0x0800d803
 800d780:	0800d803 	.word	0x0800d803
 800d784:	0800d803 	.word	0x0800d803
 800d788:	0800d803 	.word	0x0800d803
 800d78c:	0800d803 	.word	0x0800d803
 800d790:	0800d803 	.word	0x0800d803
 800d794:	0800d7f5 	.word	0x0800d7f5
 800d798:	2b40      	cmp	r3, #64	@ 0x40
 800d79a:	d02e      	beq.n	800d7fa <UART_SetConfig+0xa36>
 800d79c:	e031      	b.n	800d802 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d79e:	f7fb fd4d 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800d7a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7a4:	e033      	b.n	800d80e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7a6:	f7fb fd5f 	bl	8009268 <HAL_RCC_GetPCLK2Freq>
 800d7aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7ac:	e02f      	b.n	800d80e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fd fd0e 	bl	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7bc:	e027      	b.n	800d80e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7be:	f107 0318 	add.w	r3, r7, #24
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fd fe5a 	bl	800b47c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7cc:	e01f      	b.n	800d80e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7ce:	4b2d      	ldr	r3, [pc, #180]	@ (800d884 <UART_SetConfig+0xac0>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 0320 	and.w	r3, r3, #32
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d009      	beq.n	800d7ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7da:	4b2a      	ldr	r3, [pc, #168]	@ (800d884 <UART_SetConfig+0xac0>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	08db      	lsrs	r3, r3, #3
 800d7e0:	f003 0303 	and.w	r3, r3, #3
 800d7e4:	4a28      	ldr	r2, [pc, #160]	@ (800d888 <UART_SetConfig+0xac4>)
 800d7e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7ec:	e00f      	b.n	800d80e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d7ee:	4b26      	ldr	r3, [pc, #152]	@ (800d888 <UART_SetConfig+0xac4>)
 800d7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7f2:	e00c      	b.n	800d80e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7f4:	4b25      	ldr	r3, [pc, #148]	@ (800d88c <UART_SetConfig+0xac8>)
 800d7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7f8:	e009      	b.n	800d80e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d800:	e005      	b.n	800d80e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d802:	2300      	movs	r3, #0
 800d804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d80c:	bf00      	nop
    }

    if (pclk != 0U)
 800d80e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d021      	beq.n	800d858 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d818:	4a1d      	ldr	r2, [pc, #116]	@ (800d890 <UART_SetConfig+0xacc>)
 800d81a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d81e:	461a      	mov	r2, r3
 800d820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d822:	fbb3 f2f2 	udiv	r2, r3, r2
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	085b      	lsrs	r3, r3, #1
 800d82c:	441a      	add	r2, r3
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	fbb2 f3f3 	udiv	r3, r2, r3
 800d836:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83a:	2b0f      	cmp	r3, #15
 800d83c:	d909      	bls.n	800d852 <UART_SetConfig+0xa8e>
 800d83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d844:	d205      	bcs.n	800d852 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d848:	b29a      	uxth	r2, r3
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	60da      	str	r2, [r3, #12]
 800d850:	e002      	b.n	800d858 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2201      	movs	r2, #1
 800d85c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	2201      	movs	r2, #1
 800d864:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	2200      	movs	r2, #0
 800d86c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	2200      	movs	r2, #0
 800d872:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d874:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3748      	adds	r7, #72	@ 0x48
 800d87c:	46bd      	mov	sp, r7
 800d87e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d882:	bf00      	nop
 800d884:	58024400 	.word	0x58024400
 800d888:	03d09000 	.word	0x03d09000
 800d88c:	003d0900 	.word	0x003d0900
 800d890:	08011e60 	.word	0x08011e60

0800d894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8a0:	f003 0308 	and.w	r3, r3, #8
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00a      	beq.n	800d8be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	430a      	orrs	r2, r1
 800d8bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8c2:	f003 0301 	and.w	r3, r3, #1
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00a      	beq.n	800d8e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	430a      	orrs	r2, r1
 800d8de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8e4:	f003 0302 	and.w	r3, r3, #2
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00a      	beq.n	800d902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	430a      	orrs	r2, r1
 800d900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d906:	f003 0304 	and.w	r3, r3, #4
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00a      	beq.n	800d924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	430a      	orrs	r2, r1
 800d922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d928:	f003 0310 	and.w	r3, r3, #16
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00a      	beq.n	800d946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	430a      	orrs	r2, r1
 800d944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d94a:	f003 0320 	and.w	r3, r3, #32
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00a      	beq.n	800d968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	430a      	orrs	r2, r1
 800d966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d970:	2b00      	cmp	r3, #0
 800d972:	d01a      	beq.n	800d9aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	430a      	orrs	r2, r1
 800d988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d98e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d992:	d10a      	bne.n	800d9aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	430a      	orrs	r2, r1
 800d9a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00a      	beq.n	800d9cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	430a      	orrs	r2, r1
 800d9ca:	605a      	str	r2, [r3, #4]
  }
}
 800d9cc:	bf00      	nop
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b098      	sub	sp, #96	@ 0x60
 800d9dc:	af02      	add	r7, sp, #8
 800d9de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d9e8:	f7f9 f8e2 	bl	8006bb0 <HAL_GetTick>
 800d9ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f003 0308 	and.w	r3, r3, #8
 800d9f8:	2b08      	cmp	r3, #8
 800d9fa:	d12f      	bne.n	800da5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da00:	9300      	str	r3, [sp, #0]
 800da02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da04:	2200      	movs	r2, #0
 800da06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 f88e 	bl	800db2c <UART_WaitOnFlagUntilTimeout>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d022      	beq.n	800da5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da1e:	e853 3f00 	ldrex	r3, [r3]
 800da22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	461a      	mov	r2, r3
 800da32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da34:	647b      	str	r3, [r7, #68]	@ 0x44
 800da36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da3c:	e841 2300 	strex	r3, r2, [r1]
 800da40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1e6      	bne.n	800da16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2220      	movs	r2, #32
 800da4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da58:	2303      	movs	r3, #3
 800da5a:	e063      	b.n	800db24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f003 0304 	and.w	r3, r3, #4
 800da66:	2b04      	cmp	r3, #4
 800da68:	d149      	bne.n	800dafe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da72:	2200      	movs	r2, #0
 800da74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f857 	bl	800db2c <UART_WaitOnFlagUntilTimeout>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d03c      	beq.n	800dafe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da8c:	e853 3f00 	ldrex	r3, [r3]
 800da90:	623b      	str	r3, [r7, #32]
   return(result);
 800da92:	6a3b      	ldr	r3, [r7, #32]
 800da94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	461a      	mov	r2, r3
 800daa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800daa2:	633b      	str	r3, [r7, #48]	@ 0x30
 800daa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800daa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daaa:	e841 2300 	strex	r3, r2, [r1]
 800daae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1e6      	bne.n	800da84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	3308      	adds	r3, #8
 800dabc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	e853 3f00 	ldrex	r3, [r3]
 800dac4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f023 0301 	bic.w	r3, r3, #1
 800dacc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	3308      	adds	r3, #8
 800dad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dad6:	61fa      	str	r2, [r7, #28]
 800dad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dada:	69b9      	ldr	r1, [r7, #24]
 800dadc:	69fa      	ldr	r2, [r7, #28]
 800dade:	e841 2300 	strex	r3, r2, [r1]
 800dae2:	617b      	str	r3, [r7, #20]
   return(result);
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1e5      	bne.n	800dab6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2220      	movs	r2, #32
 800daee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dafa:	2303      	movs	r3, #3
 800dafc:	e012      	b.n	800db24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2220      	movs	r2, #32
 800db02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2220      	movs	r2, #32
 800db0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3758      	adds	r7, #88	@ 0x58
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	603b      	str	r3, [r7, #0]
 800db38:	4613      	mov	r3, r2
 800db3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db3c:	e04f      	b.n	800dbde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db44:	d04b      	beq.n	800dbde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db46:	f7f9 f833 	bl	8006bb0 <HAL_GetTick>
 800db4a:	4602      	mov	r2, r0
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	69ba      	ldr	r2, [r7, #24]
 800db52:	429a      	cmp	r2, r3
 800db54:	d302      	bcc.n	800db5c <UART_WaitOnFlagUntilTimeout+0x30>
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d101      	bne.n	800db60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db5c:	2303      	movs	r3, #3
 800db5e:	e04e      	b.n	800dbfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0304 	and.w	r3, r3, #4
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d037      	beq.n	800dbde <UART_WaitOnFlagUntilTimeout+0xb2>
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	2b80      	cmp	r3, #128	@ 0x80
 800db72:	d034      	beq.n	800dbde <UART_WaitOnFlagUntilTimeout+0xb2>
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2b40      	cmp	r3, #64	@ 0x40
 800db78:	d031      	beq.n	800dbde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	69db      	ldr	r3, [r3, #28]
 800db80:	f003 0308 	and.w	r3, r3, #8
 800db84:	2b08      	cmp	r3, #8
 800db86:	d110      	bne.n	800dbaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2208      	movs	r2, #8
 800db8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f000 f839 	bl	800dc08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2208      	movs	r2, #8
 800db9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e029      	b.n	800dbfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69db      	ldr	r3, [r3, #28]
 800dbb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dbb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dbb8:	d111      	bne.n	800dbde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dbc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f000 f81f 	bl	800dc08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2220      	movs	r2, #32
 800dbce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dbda:	2303      	movs	r3, #3
 800dbdc:	e00f      	b.n	800dbfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	69da      	ldr	r2, [r3, #28]
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	68ba      	ldr	r2, [r7, #8]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	bf0c      	ite	eq
 800dbee:	2301      	moveq	r3, #1
 800dbf0:	2300      	movne	r3, #0
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	79fb      	ldrb	r3, [r7, #7]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d0a0      	beq.n	800db3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
	...

0800dc08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b095      	sub	sp, #84	@ 0x54
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc18:	e853 3f00 	ldrex	r3, [r3]
 800dc1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc36:	e841 2300 	strex	r3, r2, [r1]
 800dc3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1e6      	bne.n	800dc10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3308      	adds	r3, #8
 800dc48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4a:	6a3b      	ldr	r3, [r7, #32]
 800dc4c:	e853 3f00 	ldrex	r3, [r3]
 800dc50:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc52:	69fa      	ldr	r2, [r7, #28]
 800dc54:	4b1e      	ldr	r3, [pc, #120]	@ (800dcd0 <UART_EndRxTransfer+0xc8>)
 800dc56:	4013      	ands	r3, r2
 800dc58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	3308      	adds	r3, #8
 800dc60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc6a:	e841 2300 	strex	r3, r2, [r1]
 800dc6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d1e5      	bne.n	800dc42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d118      	bne.n	800dcb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	e853 3f00 	ldrex	r3, [r3]
 800dc8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	f023 0310 	bic.w	r3, r3, #16
 800dc92:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc9c:	61bb      	str	r3, [r7, #24]
 800dc9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca0:	6979      	ldr	r1, [r7, #20]
 800dca2:	69ba      	ldr	r2, [r7, #24]
 800dca4:	e841 2300 	strex	r3, r2, [r1]
 800dca8:	613b      	str	r3, [r7, #16]
   return(result);
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d1e6      	bne.n	800dc7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2220      	movs	r2, #32
 800dcb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dcc4:	bf00      	nop
 800dcc6:	3754      	adds	r7, #84	@ 0x54
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr
 800dcd0:	effffffe 	.word	0xeffffffe

0800dcd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d101      	bne.n	800dcea <HAL_UARTEx_DisableFifoMode+0x16>
 800dce6:	2302      	movs	r3, #2
 800dce8:	e027      	b.n	800dd3a <HAL_UARTEx_DisableFifoMode+0x66>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2201      	movs	r2, #1
 800dcee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2224      	movs	r2, #36	@ 0x24
 800dcf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f022 0201 	bic.w	r2, r2, #1
 800dd10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dd18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2220      	movs	r2, #32
 800dd2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b084      	sub	sp, #16
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d101      	bne.n	800dd5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	e02d      	b.n	800ddba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2201      	movs	r2, #1
 800dd62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2224      	movs	r2, #36	@ 0x24
 800dd6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f022 0201 	bic.w	r2, r2, #1
 800dd84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	683a      	ldr	r2, [r7, #0]
 800dd96:	430a      	orrs	r2, r1
 800dd98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 f850 	bl	800de40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	68fa      	ldr	r2, [r7, #12]
 800dda6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2220      	movs	r2, #32
 800ddac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b084      	sub	sp, #16
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
 800ddca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d101      	bne.n	800ddda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddd6:	2302      	movs	r3, #2
 800ddd8:	e02d      	b.n	800de36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2201      	movs	r2, #1
 800ddde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2224      	movs	r2, #36	@ 0x24
 800dde6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f022 0201 	bic.w	r2, r2, #1
 800de00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	683a      	ldr	r2, [r7, #0]
 800de12:	430a      	orrs	r2, r1
 800de14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 f812 	bl	800de40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2220      	movs	r2, #32
 800de28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de34:	2300      	movs	r3, #0
}
 800de36:	4618      	mov	r0, r3
 800de38:	3710      	adds	r7, #16
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
	...

0800de40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d108      	bne.n	800de62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de60:	e031      	b.n	800dec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de62:	2310      	movs	r3, #16
 800de64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de66:	2310      	movs	r3, #16
 800de68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	0e5b      	lsrs	r3, r3, #25
 800de72:	b2db      	uxtb	r3, r3
 800de74:	f003 0307 	and.w	r3, r3, #7
 800de78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	0f5b      	lsrs	r3, r3, #29
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f003 0307 	and.w	r3, r3, #7
 800de88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de8a:	7bbb      	ldrb	r3, [r7, #14]
 800de8c:	7b3a      	ldrb	r2, [r7, #12]
 800de8e:	4911      	ldr	r1, [pc, #68]	@ (800ded4 <UARTEx_SetNbDataToProcess+0x94>)
 800de90:	5c8a      	ldrb	r2, [r1, r2]
 800de92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de96:	7b3a      	ldrb	r2, [r7, #12]
 800de98:	490f      	ldr	r1, [pc, #60]	@ (800ded8 <UARTEx_SetNbDataToProcess+0x98>)
 800de9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dea0:	b29a      	uxth	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
 800deaa:	7b7a      	ldrb	r2, [r7, #13]
 800deac:	4909      	ldr	r1, [pc, #36]	@ (800ded4 <UARTEx_SetNbDataToProcess+0x94>)
 800deae:	5c8a      	ldrb	r2, [r1, r2]
 800deb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800deb4:	7b7a      	ldrb	r2, [r7, #13]
 800deb6:	4908      	ldr	r1, [pc, #32]	@ (800ded8 <UARTEx_SetNbDataToProcess+0x98>)
 800deb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800deba:	fb93 f3f2 	sdiv	r3, r3, r2
 800debe:	b29a      	uxth	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dec6:	bf00      	nop
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	08011e78 	.word	0x08011e78
 800ded8:	08011e80 	.word	0x08011e80

0800dedc <acosf>:
 800dedc:	b508      	push	{r3, lr}
 800dede:	ed2d 8b02 	vpush	{d8}
 800dee2:	eeb0 8a40 	vmov.f32	s16, s0
 800dee6:	f000 f929 	bl	800e13c <__ieee754_acosf>
 800deea:	eeb4 8a48 	vcmp.f32	s16, s16
 800deee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def2:	eef0 8a40 	vmov.f32	s17, s0
 800def6:	d615      	bvs.n	800df24 <acosf+0x48>
 800def8:	eeb0 0a48 	vmov.f32	s0, s16
 800defc:	f000 f90c 	bl	800e118 <fabsf>
 800df00:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800df04:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800df08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df0c:	dd0a      	ble.n	800df24 <acosf+0x48>
 800df0e:	f000 fb8f 	bl	800e630 <__errno>
 800df12:	ecbd 8b02 	vpop	{d8}
 800df16:	2321      	movs	r3, #33	@ 0x21
 800df18:	6003      	str	r3, [r0, #0]
 800df1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800df1e:	4804      	ldr	r0, [pc, #16]	@ (800df30 <acosf+0x54>)
 800df20:	f000 b902 	b.w	800e128 <nanf>
 800df24:	eeb0 0a68 	vmov.f32	s0, s17
 800df28:	ecbd 8b02 	vpop	{d8}
 800df2c:	bd08      	pop	{r3, pc}
 800df2e:	bf00      	nop
 800df30:	08011ec3 	.word	0x08011ec3

0800df34 <sqrtf>:
 800df34:	b508      	push	{r3, lr}
 800df36:	ed2d 8b02 	vpush	{d8}
 800df3a:	eeb0 8a40 	vmov.f32	s16, s0
 800df3e:	f000 f8f9 	bl	800e134 <__ieee754_sqrtf>
 800df42:	eeb4 8a48 	vcmp.f32	s16, s16
 800df46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df4a:	d60c      	bvs.n	800df66 <sqrtf+0x32>
 800df4c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800df6c <sqrtf+0x38>
 800df50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800df54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df58:	d505      	bpl.n	800df66 <sqrtf+0x32>
 800df5a:	f000 fb69 	bl	800e630 <__errno>
 800df5e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800df62:	2321      	movs	r3, #33	@ 0x21
 800df64:	6003      	str	r3, [r0, #0]
 800df66:	ecbd 8b02 	vpop	{d8}
 800df6a:	bd08      	pop	{r3, pc}
 800df6c:	00000000 	.word	0x00000000

0800df70 <atanf>:
 800df70:	b538      	push	{r3, r4, r5, lr}
 800df72:	ee10 5a10 	vmov	r5, s0
 800df76:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800df7a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800df7e:	eef0 7a40 	vmov.f32	s15, s0
 800df82:	d30f      	bcc.n	800dfa4 <atanf+0x34>
 800df84:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800df88:	d904      	bls.n	800df94 <atanf+0x24>
 800df8a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800df8e:	eeb0 0a67 	vmov.f32	s0, s15
 800df92:	bd38      	pop	{r3, r4, r5, pc}
 800df94:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e0cc <atanf+0x15c>
 800df98:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e0d0 <atanf+0x160>
 800df9c:	2d00      	cmp	r5, #0
 800df9e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800dfa2:	e7f4      	b.n	800df8e <atanf+0x1e>
 800dfa4:	4b4b      	ldr	r3, [pc, #300]	@ (800e0d4 <atanf+0x164>)
 800dfa6:	429c      	cmp	r4, r3
 800dfa8:	d810      	bhi.n	800dfcc <atanf+0x5c>
 800dfaa:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800dfae:	d20a      	bcs.n	800dfc6 <atanf+0x56>
 800dfb0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e0d8 <atanf+0x168>
 800dfb4:	ee30 7a07 	vadd.f32	s14, s0, s14
 800dfb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfbc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfc4:	dce3      	bgt.n	800df8e <atanf+0x1e>
 800dfc6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfca:	e013      	b.n	800dff4 <atanf+0x84>
 800dfcc:	f000 f8a4 	bl	800e118 <fabsf>
 800dfd0:	4b42      	ldr	r3, [pc, #264]	@ (800e0dc <atanf+0x16c>)
 800dfd2:	429c      	cmp	r4, r3
 800dfd4:	d84f      	bhi.n	800e076 <atanf+0x106>
 800dfd6:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800dfda:	429c      	cmp	r4, r3
 800dfdc:	d841      	bhi.n	800e062 <atanf+0xf2>
 800dfde:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800dfe2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800dfe6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dfea:	2300      	movs	r3, #0
 800dfec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dff0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dff4:	1c5a      	adds	r2, r3, #1
 800dff6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800dffa:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800e0e0 <atanf+0x170>
 800dffe:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800e0e4 <atanf+0x174>
 800e002:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800e0e8 <atanf+0x178>
 800e006:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e00a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e00e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800e0ec <atanf+0x17c>
 800e012:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e016:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800e0f0 <atanf+0x180>
 800e01a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e01e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800e0f4 <atanf+0x184>
 800e022:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e026:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e0f8 <atanf+0x188>
 800e02a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e02e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800e0fc <atanf+0x18c>
 800e032:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e036:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800e100 <atanf+0x190>
 800e03a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e03e:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800e104 <atanf+0x194>
 800e042:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e046:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800e108 <atanf+0x198>
 800e04a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e04e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e052:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e056:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e05a:	d121      	bne.n	800e0a0 <atanf+0x130>
 800e05c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e060:	e795      	b.n	800df8e <atanf+0x1e>
 800e062:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e066:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e06a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e06e:	2301      	movs	r3, #1
 800e070:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e074:	e7be      	b.n	800dff4 <atanf+0x84>
 800e076:	4b25      	ldr	r3, [pc, #148]	@ (800e10c <atanf+0x19c>)
 800e078:	429c      	cmp	r4, r3
 800e07a:	d80b      	bhi.n	800e094 <atanf+0x124>
 800e07c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e080:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e084:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e088:	2302      	movs	r3, #2
 800e08a:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e08e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e092:	e7af      	b.n	800dff4 <atanf+0x84>
 800e094:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e098:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e09c:	2303      	movs	r3, #3
 800e09e:	e7a9      	b.n	800dff4 <atanf+0x84>
 800e0a0:	4a1b      	ldr	r2, [pc, #108]	@ (800e110 <atanf+0x1a0>)
 800e0a2:	491c      	ldr	r1, [pc, #112]	@ (800e114 <atanf+0x1a4>)
 800e0a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e0a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e0ac:	edd3 6a00 	vldr	s13, [r3]
 800e0b0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e0b4:	2d00      	cmp	r5, #0
 800e0b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0ba:	edd2 7a00 	vldr	s15, [r2]
 800e0be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0c2:	bfb8      	it	lt
 800e0c4:	eef1 7a67 	vneglt.f32	s15, s15
 800e0c8:	e761      	b.n	800df8e <atanf+0x1e>
 800e0ca:	bf00      	nop
 800e0cc:	bfc90fdb 	.word	0xbfc90fdb
 800e0d0:	3fc90fdb 	.word	0x3fc90fdb
 800e0d4:	3edfffff 	.word	0x3edfffff
 800e0d8:	7149f2ca 	.word	0x7149f2ca
 800e0dc:	3f97ffff 	.word	0x3f97ffff
 800e0e0:	3c8569d7 	.word	0x3c8569d7
 800e0e4:	3d4bda59 	.word	0x3d4bda59
 800e0e8:	bd6ef16b 	.word	0xbd6ef16b
 800e0ec:	3d886b35 	.word	0x3d886b35
 800e0f0:	3dba2e6e 	.word	0x3dba2e6e
 800e0f4:	3e124925 	.word	0x3e124925
 800e0f8:	3eaaaaab 	.word	0x3eaaaaab
 800e0fc:	bd15a221 	.word	0xbd15a221
 800e100:	bd9d8795 	.word	0xbd9d8795
 800e104:	bde38e38 	.word	0xbde38e38
 800e108:	be4ccccd 	.word	0xbe4ccccd
 800e10c:	401bffff 	.word	0x401bffff
 800e110:	08011f08 	.word	0x08011f08
 800e114:	08011ef8 	.word	0x08011ef8

0800e118 <fabsf>:
 800e118:	ee10 3a10 	vmov	r3, s0
 800e11c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e120:	ee00 3a10 	vmov	s0, r3
 800e124:	4770      	bx	lr
	...

0800e128 <nanf>:
 800e128:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e130 <nanf+0x8>
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	7fc00000 	.word	0x7fc00000

0800e134 <__ieee754_sqrtf>:
 800e134:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e138:	4770      	bx	lr
	...

0800e13c <__ieee754_acosf>:
 800e13c:	b508      	push	{r3, lr}
 800e13e:	ee10 3a10 	vmov	r3, s0
 800e142:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e146:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e14a:	ed2d 8b0c 	vpush	{d8-d13}
 800e14e:	d109      	bne.n	800e164 <__ieee754_acosf+0x28>
 800e150:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 800e2e4 <__ieee754_acosf+0x1a8>
 800e154:	eddf 7a64 	vldr	s15, [pc, #400]	@ 800e2e8 <__ieee754_acosf+0x1ac>
 800e158:	2b00      	cmp	r3, #0
 800e15a:	fe37 0a80 	vselgt.f32	s0, s15, s0
 800e15e:	ecbd 8b0c 	vpop	{d8-d13}
 800e162:	bd08      	pop	{r3, pc}
 800e164:	d904      	bls.n	800e170 <__ieee754_acosf+0x34>
 800e166:	ee30 8a40 	vsub.f32	s16, s0, s0
 800e16a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e16e:	e7f6      	b.n	800e15e <__ieee754_acosf+0x22>
 800e170:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 800e174:	d23c      	bcs.n	800e1f0 <__ieee754_acosf+0xb4>
 800e176:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 800e17a:	f240 80af 	bls.w	800e2dc <__ieee754_acosf+0x1a0>
 800e17e:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e182:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 800e2ec <__ieee754_acosf+0x1b0>
 800e186:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800e2f0 <__ieee754_acosf+0x1b4>
 800e18a:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 800e2f4 <__ieee754_acosf+0x1b8>
 800e18e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e192:	eddf 6a59 	vldr	s13, [pc, #356]	@ 800e2f8 <__ieee754_acosf+0x1bc>
 800e196:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e19a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800e2fc <__ieee754_acosf+0x1c0>
 800e19e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e1a2:	eddf 6a57 	vldr	s13, [pc, #348]	@ 800e300 <__ieee754_acosf+0x1c4>
 800e1a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e1aa:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800e304 <__ieee754_acosf+0x1c8>
 800e1ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e1b2:	eddf 6a55 	vldr	s13, [pc, #340]	@ 800e308 <__ieee754_acosf+0x1cc>
 800e1b6:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800e1ba:	eddf 6a54 	vldr	s13, [pc, #336]	@ 800e30c <__ieee754_acosf+0x1d0>
 800e1be:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e1c2:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 800e310 <__ieee754_acosf+0x1d4>
 800e1c6:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e1ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e1ce:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e1d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1d6:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800e314 <__ieee754_acosf+0x1d8>
 800e1da:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800e1de:	eee0 7a46 	vfms.f32	s15, s0, s12
 800e1e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e1e6:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 800e318 <__ieee754_acosf+0x1dc>
 800e1ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e1ee:	e7b6      	b.n	800e15e <__ieee754_acosf+0x22>
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	eddf da3e 	vldr	s27, [pc, #248]	@ 800e2ec <__ieee754_acosf+0x1b0>
 800e1f6:	eddf ca3e 	vldr	s25, [pc, #248]	@ 800e2f0 <__ieee754_acosf+0x1b4>
 800e1fa:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 800e2f8 <__ieee754_acosf+0x1bc>
 800e1fe:	eddf ba3f 	vldr	s23, [pc, #252]	@ 800e2fc <__ieee754_acosf+0x1c0>
 800e202:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 800e300 <__ieee754_acosf+0x1c4>
 800e206:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 800e304 <__ieee754_acosf+0x1c8>
 800e20a:	ed9f da3f 	vldr	s26, [pc, #252]	@ 800e308 <__ieee754_acosf+0x1cc>
 800e20e:	eddf aa39 	vldr	s21, [pc, #228]	@ 800e2f4 <__ieee754_acosf+0x1b8>
 800e212:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 800e30c <__ieee754_acosf+0x1d0>
 800e216:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 800e310 <__ieee754_acosf+0x1d4>
 800e21a:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 800e21e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e222:	da28      	bge.n	800e276 <__ieee754_acosf+0x13a>
 800e224:	ee30 8a09 	vadd.f32	s16, s0, s18
 800e228:	ee28 0a27 	vmul.f32	s0, s16, s15
 800e22c:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800e230:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800e234:	eeac ca80 	vfma.f32	s24, s25, s0
 800e238:	eeaa aa80 	vfma.f32	s20, s21, s0
 800e23c:	eeec ba00 	vfma.f32	s23, s24, s0
 800e240:	eeea 9a00 	vfma.f32	s19, s20, s0
 800e244:	eeab ba80 	vfma.f32	s22, s23, s0
 800e248:	eea9 9a80 	vfma.f32	s18, s19, s0
 800e24c:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800e250:	ee68 8a80 	vmul.f32	s17, s17, s0
 800e254:	f7ff ff6e 	bl	800e134 <__ieee754_sqrtf>
 800e258:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800e25c:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800e31c <__ieee754_acosf+0x1e0>
 800e260:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e264:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800e268:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e26c:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800e320 <__ieee754_acosf+0x1e4>
 800e270:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e274:	e773      	b.n	800e15e <__ieee754_acosf+0x22>
 800e276:	ee39 8a40 	vsub.f32	s16, s18, s0
 800e27a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e27e:	eeb0 0a48 	vmov.f32	s0, s16
 800e282:	f7ff ff57 	bl	800e134 <__ieee754_sqrtf>
 800e286:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800e28a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800e28e:	eeac ca88 	vfma.f32	s24, s25, s16
 800e292:	eeaa aa88 	vfma.f32	s20, s21, s16
 800e296:	eeec ba08 	vfma.f32	s23, s24, s16
 800e29a:	ee10 3a10 	vmov	r3, s0
 800e29e:	eeab ba88 	vfma.f32	s22, s23, s16
 800e2a2:	f36f 030b 	bfc	r3, #0, #12
 800e2a6:	eeea 9a08 	vfma.f32	s19, s20, s16
 800e2aa:	ee07 3a90 	vmov	s15, r3
 800e2ae:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800e2b2:	eeb0 6a48 	vmov.f32	s12, s16
 800e2b6:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800e2ba:	eea9 9a88 	vfma.f32	s18, s19, s16
 800e2be:	ee70 6a27 	vadd.f32	s13, s0, s15
 800e2c2:	ee68 8a88 	vmul.f32	s17, s17, s16
 800e2c6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e2ca:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800e2ce:	eea0 7a26 	vfma.f32	s14, s0, s13
 800e2d2:	ee37 0a87 	vadd.f32	s0, s15, s14
 800e2d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e2da:	e740      	b.n	800e15e <__ieee754_acosf+0x22>
 800e2dc:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800e324 <__ieee754_acosf+0x1e8>
 800e2e0:	e73d      	b.n	800e15e <__ieee754_acosf+0x22>
 800e2e2:	bf00      	nop
 800e2e4:	40490fdb 	.word	0x40490fdb
 800e2e8:	00000000 	.word	0x00000000
 800e2ec:	3811ef08 	.word	0x3811ef08
 800e2f0:	3a4f7f04 	.word	0x3a4f7f04
 800e2f4:	bf303361 	.word	0xbf303361
 800e2f8:	bd241146 	.word	0xbd241146
 800e2fc:	3e4e0aa8 	.word	0x3e4e0aa8
 800e300:	bea6b090 	.word	0xbea6b090
 800e304:	3e2aaaab 	.word	0x3e2aaaab
 800e308:	3d9dc62e 	.word	0x3d9dc62e
 800e30c:	4001572d 	.word	0x4001572d
 800e310:	c019d139 	.word	0xc019d139
 800e314:	33a22168 	.word	0x33a22168
 800e318:	3fc90fda 	.word	0x3fc90fda
 800e31c:	b3a22168 	.word	0xb3a22168
 800e320:	40490fda 	.word	0x40490fda
 800e324:	3fc90fdb 	.word	0x3fc90fdb

0800e328 <__assert_func>:
 800e328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e32a:	4614      	mov	r4, r2
 800e32c:	461a      	mov	r2, r3
 800e32e:	4b09      	ldr	r3, [pc, #36]	@ (800e354 <__assert_func+0x2c>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4605      	mov	r5, r0
 800e334:	68d8      	ldr	r0, [r3, #12]
 800e336:	b14c      	cbz	r4, 800e34c <__assert_func+0x24>
 800e338:	4b07      	ldr	r3, [pc, #28]	@ (800e358 <__assert_func+0x30>)
 800e33a:	9100      	str	r1, [sp, #0]
 800e33c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e340:	4906      	ldr	r1, [pc, #24]	@ (800e35c <__assert_func+0x34>)
 800e342:	462b      	mov	r3, r5
 800e344:	f000 f8b2 	bl	800e4ac <fiprintf>
 800e348:	f000 f99f 	bl	800e68a <abort>
 800e34c:	4b04      	ldr	r3, [pc, #16]	@ (800e360 <__assert_func+0x38>)
 800e34e:	461c      	mov	r4, r3
 800e350:	e7f3      	b.n	800e33a <__assert_func+0x12>
 800e352:	bf00      	nop
 800e354:	24000028 	.word	0x24000028
 800e358:	08011e88 	.word	0x08011e88
 800e35c:	08011e95 	.word	0x08011e95
 800e360:	08011ec3 	.word	0x08011ec3

0800e364 <std>:
 800e364:	2300      	movs	r3, #0
 800e366:	b510      	push	{r4, lr}
 800e368:	4604      	mov	r4, r0
 800e36a:	e9c0 3300 	strd	r3, r3, [r0]
 800e36e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e372:	6083      	str	r3, [r0, #8]
 800e374:	8181      	strh	r1, [r0, #12]
 800e376:	6643      	str	r3, [r0, #100]	@ 0x64
 800e378:	81c2      	strh	r2, [r0, #14]
 800e37a:	6183      	str	r3, [r0, #24]
 800e37c:	4619      	mov	r1, r3
 800e37e:	2208      	movs	r2, #8
 800e380:	305c      	adds	r0, #92	@ 0x5c
 800e382:	f000 f906 	bl	800e592 <memset>
 800e386:	4b0d      	ldr	r3, [pc, #52]	@ (800e3bc <std+0x58>)
 800e388:	6263      	str	r3, [r4, #36]	@ 0x24
 800e38a:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c0 <std+0x5c>)
 800e38c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e38e:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c4 <std+0x60>)
 800e390:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e392:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c8 <std+0x64>)
 800e394:	6323      	str	r3, [r4, #48]	@ 0x30
 800e396:	4b0d      	ldr	r3, [pc, #52]	@ (800e3cc <std+0x68>)
 800e398:	6224      	str	r4, [r4, #32]
 800e39a:	429c      	cmp	r4, r3
 800e39c:	d006      	beq.n	800e3ac <std+0x48>
 800e39e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e3a2:	4294      	cmp	r4, r2
 800e3a4:	d002      	beq.n	800e3ac <std+0x48>
 800e3a6:	33d0      	adds	r3, #208	@ 0xd0
 800e3a8:	429c      	cmp	r4, r3
 800e3aa:	d105      	bne.n	800e3b8 <std+0x54>
 800e3ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3b4:	f000 b966 	b.w	800e684 <__retarget_lock_init_recursive>
 800e3b8:	bd10      	pop	{r4, pc}
 800e3ba:	bf00      	nop
 800e3bc:	0800e50d 	.word	0x0800e50d
 800e3c0:	0800e52f 	.word	0x0800e52f
 800e3c4:	0800e567 	.word	0x0800e567
 800e3c8:	0800e58b 	.word	0x0800e58b
 800e3cc:	24000570 	.word	0x24000570

0800e3d0 <stdio_exit_handler>:
 800e3d0:	4a02      	ldr	r2, [pc, #8]	@ (800e3dc <stdio_exit_handler+0xc>)
 800e3d2:	4903      	ldr	r1, [pc, #12]	@ (800e3e0 <stdio_exit_handler+0x10>)
 800e3d4:	4803      	ldr	r0, [pc, #12]	@ (800e3e4 <stdio_exit_handler+0x14>)
 800e3d6:	f000 b87b 	b.w	800e4d0 <_fwalk_sglue>
 800e3da:	bf00      	nop
 800e3dc:	2400001c 	.word	0x2400001c
 800e3e0:	0800ef2d 	.word	0x0800ef2d
 800e3e4:	2400002c 	.word	0x2400002c

0800e3e8 <cleanup_stdio>:
 800e3e8:	6841      	ldr	r1, [r0, #4]
 800e3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e41c <cleanup_stdio+0x34>)
 800e3ec:	4299      	cmp	r1, r3
 800e3ee:	b510      	push	{r4, lr}
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	d001      	beq.n	800e3f8 <cleanup_stdio+0x10>
 800e3f4:	f000 fd9a 	bl	800ef2c <_fflush_r>
 800e3f8:	68a1      	ldr	r1, [r4, #8]
 800e3fa:	4b09      	ldr	r3, [pc, #36]	@ (800e420 <cleanup_stdio+0x38>)
 800e3fc:	4299      	cmp	r1, r3
 800e3fe:	d002      	beq.n	800e406 <cleanup_stdio+0x1e>
 800e400:	4620      	mov	r0, r4
 800e402:	f000 fd93 	bl	800ef2c <_fflush_r>
 800e406:	68e1      	ldr	r1, [r4, #12]
 800e408:	4b06      	ldr	r3, [pc, #24]	@ (800e424 <cleanup_stdio+0x3c>)
 800e40a:	4299      	cmp	r1, r3
 800e40c:	d004      	beq.n	800e418 <cleanup_stdio+0x30>
 800e40e:	4620      	mov	r0, r4
 800e410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e414:	f000 bd8a 	b.w	800ef2c <_fflush_r>
 800e418:	bd10      	pop	{r4, pc}
 800e41a:	bf00      	nop
 800e41c:	24000570 	.word	0x24000570
 800e420:	240005d8 	.word	0x240005d8
 800e424:	24000640 	.word	0x24000640

0800e428 <global_stdio_init.part.0>:
 800e428:	b510      	push	{r4, lr}
 800e42a:	4b0b      	ldr	r3, [pc, #44]	@ (800e458 <global_stdio_init.part.0+0x30>)
 800e42c:	4c0b      	ldr	r4, [pc, #44]	@ (800e45c <global_stdio_init.part.0+0x34>)
 800e42e:	4a0c      	ldr	r2, [pc, #48]	@ (800e460 <global_stdio_init.part.0+0x38>)
 800e430:	601a      	str	r2, [r3, #0]
 800e432:	4620      	mov	r0, r4
 800e434:	2200      	movs	r2, #0
 800e436:	2104      	movs	r1, #4
 800e438:	f7ff ff94 	bl	800e364 <std>
 800e43c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e440:	2201      	movs	r2, #1
 800e442:	2109      	movs	r1, #9
 800e444:	f7ff ff8e 	bl	800e364 <std>
 800e448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e44c:	2202      	movs	r2, #2
 800e44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e452:	2112      	movs	r1, #18
 800e454:	f7ff bf86 	b.w	800e364 <std>
 800e458:	240006a8 	.word	0x240006a8
 800e45c:	24000570 	.word	0x24000570
 800e460:	0800e3d1 	.word	0x0800e3d1

0800e464 <__sfp_lock_acquire>:
 800e464:	4801      	ldr	r0, [pc, #4]	@ (800e46c <__sfp_lock_acquire+0x8>)
 800e466:	f000 b90e 	b.w	800e686 <__retarget_lock_acquire_recursive>
 800e46a:	bf00      	nop
 800e46c:	240006b1 	.word	0x240006b1

0800e470 <__sfp_lock_release>:
 800e470:	4801      	ldr	r0, [pc, #4]	@ (800e478 <__sfp_lock_release+0x8>)
 800e472:	f000 b909 	b.w	800e688 <__retarget_lock_release_recursive>
 800e476:	bf00      	nop
 800e478:	240006b1 	.word	0x240006b1

0800e47c <__sinit>:
 800e47c:	b510      	push	{r4, lr}
 800e47e:	4604      	mov	r4, r0
 800e480:	f7ff fff0 	bl	800e464 <__sfp_lock_acquire>
 800e484:	6a23      	ldr	r3, [r4, #32]
 800e486:	b11b      	cbz	r3, 800e490 <__sinit+0x14>
 800e488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e48c:	f7ff bff0 	b.w	800e470 <__sfp_lock_release>
 800e490:	4b04      	ldr	r3, [pc, #16]	@ (800e4a4 <__sinit+0x28>)
 800e492:	6223      	str	r3, [r4, #32]
 800e494:	4b04      	ldr	r3, [pc, #16]	@ (800e4a8 <__sinit+0x2c>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1f5      	bne.n	800e488 <__sinit+0xc>
 800e49c:	f7ff ffc4 	bl	800e428 <global_stdio_init.part.0>
 800e4a0:	e7f2      	b.n	800e488 <__sinit+0xc>
 800e4a2:	bf00      	nop
 800e4a4:	0800e3e9 	.word	0x0800e3e9
 800e4a8:	240006a8 	.word	0x240006a8

0800e4ac <fiprintf>:
 800e4ac:	b40e      	push	{r1, r2, r3}
 800e4ae:	b503      	push	{r0, r1, lr}
 800e4b0:	4601      	mov	r1, r0
 800e4b2:	ab03      	add	r3, sp, #12
 800e4b4:	4805      	ldr	r0, [pc, #20]	@ (800e4cc <fiprintf+0x20>)
 800e4b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4ba:	6800      	ldr	r0, [r0, #0]
 800e4bc:	9301      	str	r3, [sp, #4]
 800e4be:	f000 fa0d 	bl	800e8dc <_vfiprintf_r>
 800e4c2:	b002      	add	sp, #8
 800e4c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4c8:	b003      	add	sp, #12
 800e4ca:	4770      	bx	lr
 800e4cc:	24000028 	.word	0x24000028

0800e4d0 <_fwalk_sglue>:
 800e4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	4688      	mov	r8, r1
 800e4d8:	4614      	mov	r4, r2
 800e4da:	2600      	movs	r6, #0
 800e4dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4e0:	f1b9 0901 	subs.w	r9, r9, #1
 800e4e4:	d505      	bpl.n	800e4f2 <_fwalk_sglue+0x22>
 800e4e6:	6824      	ldr	r4, [r4, #0]
 800e4e8:	2c00      	cmp	r4, #0
 800e4ea:	d1f7      	bne.n	800e4dc <_fwalk_sglue+0xc>
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4f2:	89ab      	ldrh	r3, [r5, #12]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d907      	bls.n	800e508 <_fwalk_sglue+0x38>
 800e4f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	d003      	beq.n	800e508 <_fwalk_sglue+0x38>
 800e500:	4629      	mov	r1, r5
 800e502:	4638      	mov	r0, r7
 800e504:	47c0      	blx	r8
 800e506:	4306      	orrs	r6, r0
 800e508:	3568      	adds	r5, #104	@ 0x68
 800e50a:	e7e9      	b.n	800e4e0 <_fwalk_sglue+0x10>

0800e50c <__sread>:
 800e50c:	b510      	push	{r4, lr}
 800e50e:	460c      	mov	r4, r1
 800e510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e514:	f000 f868 	bl	800e5e8 <_read_r>
 800e518:	2800      	cmp	r0, #0
 800e51a:	bfab      	itete	ge
 800e51c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e51e:	89a3      	ldrhlt	r3, [r4, #12]
 800e520:	181b      	addge	r3, r3, r0
 800e522:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e526:	bfac      	ite	ge
 800e528:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e52a:	81a3      	strhlt	r3, [r4, #12]
 800e52c:	bd10      	pop	{r4, pc}

0800e52e <__swrite>:
 800e52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e532:	461f      	mov	r7, r3
 800e534:	898b      	ldrh	r3, [r1, #12]
 800e536:	05db      	lsls	r3, r3, #23
 800e538:	4605      	mov	r5, r0
 800e53a:	460c      	mov	r4, r1
 800e53c:	4616      	mov	r6, r2
 800e53e:	d505      	bpl.n	800e54c <__swrite+0x1e>
 800e540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e544:	2302      	movs	r3, #2
 800e546:	2200      	movs	r2, #0
 800e548:	f000 f83c 	bl	800e5c4 <_lseek_r>
 800e54c:	89a3      	ldrh	r3, [r4, #12]
 800e54e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e552:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e556:	81a3      	strh	r3, [r4, #12]
 800e558:	4632      	mov	r2, r6
 800e55a:	463b      	mov	r3, r7
 800e55c:	4628      	mov	r0, r5
 800e55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e562:	f000 b853 	b.w	800e60c <_write_r>

0800e566 <__sseek>:
 800e566:	b510      	push	{r4, lr}
 800e568:	460c      	mov	r4, r1
 800e56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e56e:	f000 f829 	bl	800e5c4 <_lseek_r>
 800e572:	1c43      	adds	r3, r0, #1
 800e574:	89a3      	ldrh	r3, [r4, #12]
 800e576:	bf15      	itete	ne
 800e578:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e57a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e57e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e582:	81a3      	strheq	r3, [r4, #12]
 800e584:	bf18      	it	ne
 800e586:	81a3      	strhne	r3, [r4, #12]
 800e588:	bd10      	pop	{r4, pc}

0800e58a <__sclose>:
 800e58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e58e:	f000 b809 	b.w	800e5a4 <_close_r>

0800e592 <memset>:
 800e592:	4402      	add	r2, r0
 800e594:	4603      	mov	r3, r0
 800e596:	4293      	cmp	r3, r2
 800e598:	d100      	bne.n	800e59c <memset+0xa>
 800e59a:	4770      	bx	lr
 800e59c:	f803 1b01 	strb.w	r1, [r3], #1
 800e5a0:	e7f9      	b.n	800e596 <memset+0x4>
	...

0800e5a4 <_close_r>:
 800e5a4:	b538      	push	{r3, r4, r5, lr}
 800e5a6:	4d06      	ldr	r5, [pc, #24]	@ (800e5c0 <_close_r+0x1c>)
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	4608      	mov	r0, r1
 800e5ae:	602b      	str	r3, [r5, #0]
 800e5b0:	f7f8 f8b4 	bl	800671c <_close>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	d102      	bne.n	800e5be <_close_r+0x1a>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	b103      	cbz	r3, 800e5be <_close_r+0x1a>
 800e5bc:	6023      	str	r3, [r4, #0]
 800e5be:	bd38      	pop	{r3, r4, r5, pc}
 800e5c0:	240006ac 	.word	0x240006ac

0800e5c4 <_lseek_r>:
 800e5c4:	b538      	push	{r3, r4, r5, lr}
 800e5c6:	4d07      	ldr	r5, [pc, #28]	@ (800e5e4 <_lseek_r+0x20>)
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	4608      	mov	r0, r1
 800e5cc:	4611      	mov	r1, r2
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	602a      	str	r2, [r5, #0]
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	f7f8 f8c9 	bl	800676a <_lseek>
 800e5d8:	1c43      	adds	r3, r0, #1
 800e5da:	d102      	bne.n	800e5e2 <_lseek_r+0x1e>
 800e5dc:	682b      	ldr	r3, [r5, #0]
 800e5de:	b103      	cbz	r3, 800e5e2 <_lseek_r+0x1e>
 800e5e0:	6023      	str	r3, [r4, #0]
 800e5e2:	bd38      	pop	{r3, r4, r5, pc}
 800e5e4:	240006ac 	.word	0x240006ac

0800e5e8 <_read_r>:
 800e5e8:	b538      	push	{r3, r4, r5, lr}
 800e5ea:	4d07      	ldr	r5, [pc, #28]	@ (800e608 <_read_r+0x20>)
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	4608      	mov	r0, r1
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	602a      	str	r2, [r5, #0]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	f7f8 f857 	bl	80066aa <_read>
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	d102      	bne.n	800e606 <_read_r+0x1e>
 800e600:	682b      	ldr	r3, [r5, #0]
 800e602:	b103      	cbz	r3, 800e606 <_read_r+0x1e>
 800e604:	6023      	str	r3, [r4, #0]
 800e606:	bd38      	pop	{r3, r4, r5, pc}
 800e608:	240006ac 	.word	0x240006ac

0800e60c <_write_r>:
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	4d07      	ldr	r5, [pc, #28]	@ (800e62c <_write_r+0x20>)
 800e610:	4604      	mov	r4, r0
 800e612:	4608      	mov	r0, r1
 800e614:	4611      	mov	r1, r2
 800e616:	2200      	movs	r2, #0
 800e618:	602a      	str	r2, [r5, #0]
 800e61a:	461a      	mov	r2, r3
 800e61c:	f7f8 f862 	bl	80066e4 <_write>
 800e620:	1c43      	adds	r3, r0, #1
 800e622:	d102      	bne.n	800e62a <_write_r+0x1e>
 800e624:	682b      	ldr	r3, [r5, #0]
 800e626:	b103      	cbz	r3, 800e62a <_write_r+0x1e>
 800e628:	6023      	str	r3, [r4, #0]
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	240006ac 	.word	0x240006ac

0800e630 <__errno>:
 800e630:	4b01      	ldr	r3, [pc, #4]	@ (800e638 <__errno+0x8>)
 800e632:	6818      	ldr	r0, [r3, #0]
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	24000028 	.word	0x24000028

0800e63c <__libc_init_array>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	4d0d      	ldr	r5, [pc, #52]	@ (800e674 <__libc_init_array+0x38>)
 800e640:	4c0d      	ldr	r4, [pc, #52]	@ (800e678 <__libc_init_array+0x3c>)
 800e642:	1b64      	subs	r4, r4, r5
 800e644:	10a4      	asrs	r4, r4, #2
 800e646:	2600      	movs	r6, #0
 800e648:	42a6      	cmp	r6, r4
 800e64a:	d109      	bne.n	800e660 <__libc_init_array+0x24>
 800e64c:	4d0b      	ldr	r5, [pc, #44]	@ (800e67c <__libc_init_array+0x40>)
 800e64e:	4c0c      	ldr	r4, [pc, #48]	@ (800e680 <__libc_init_array+0x44>)
 800e650:	f000 fe00 	bl	800f254 <_init>
 800e654:	1b64      	subs	r4, r4, r5
 800e656:	10a4      	asrs	r4, r4, #2
 800e658:	2600      	movs	r6, #0
 800e65a:	42a6      	cmp	r6, r4
 800e65c:	d105      	bne.n	800e66a <__libc_init_array+0x2e>
 800e65e:	bd70      	pop	{r4, r5, r6, pc}
 800e660:	f855 3b04 	ldr.w	r3, [r5], #4
 800e664:	4798      	blx	r3
 800e666:	3601      	adds	r6, #1
 800e668:	e7ee      	b.n	800e648 <__libc_init_array+0xc>
 800e66a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e66e:	4798      	blx	r3
 800e670:	3601      	adds	r6, #1
 800e672:	e7f2      	b.n	800e65a <__libc_init_array+0x1e>
 800e674:	08011f20 	.word	0x08011f20
 800e678:	08011f20 	.word	0x08011f20
 800e67c:	08011f20 	.word	0x08011f20
 800e680:	08011f2c 	.word	0x08011f2c

0800e684 <__retarget_lock_init_recursive>:
 800e684:	4770      	bx	lr

0800e686 <__retarget_lock_acquire_recursive>:
 800e686:	4770      	bx	lr

0800e688 <__retarget_lock_release_recursive>:
 800e688:	4770      	bx	lr

0800e68a <abort>:
 800e68a:	b508      	push	{r3, lr}
 800e68c:	2006      	movs	r0, #6
 800e68e:	f000 fd31 	bl	800f0f4 <raise>
 800e692:	2001      	movs	r0, #1
 800e694:	f7f7 fffe 	bl	8006694 <_exit>

0800e698 <_free_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	4605      	mov	r5, r0
 800e69c:	2900      	cmp	r1, #0
 800e69e:	d041      	beq.n	800e724 <_free_r+0x8c>
 800e6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6a4:	1f0c      	subs	r4, r1, #4
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	bfb8      	it	lt
 800e6aa:	18e4      	addlt	r4, r4, r3
 800e6ac:	f000 f8e0 	bl	800e870 <__malloc_lock>
 800e6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800e728 <_free_r+0x90>)
 800e6b2:	6813      	ldr	r3, [r2, #0]
 800e6b4:	b933      	cbnz	r3, 800e6c4 <_free_r+0x2c>
 800e6b6:	6063      	str	r3, [r4, #4]
 800e6b8:	6014      	str	r4, [r2, #0]
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6c0:	f000 b8dc 	b.w	800e87c <__malloc_unlock>
 800e6c4:	42a3      	cmp	r3, r4
 800e6c6:	d908      	bls.n	800e6da <_free_r+0x42>
 800e6c8:	6820      	ldr	r0, [r4, #0]
 800e6ca:	1821      	adds	r1, r4, r0
 800e6cc:	428b      	cmp	r3, r1
 800e6ce:	bf01      	itttt	eq
 800e6d0:	6819      	ldreq	r1, [r3, #0]
 800e6d2:	685b      	ldreq	r3, [r3, #4]
 800e6d4:	1809      	addeq	r1, r1, r0
 800e6d6:	6021      	streq	r1, [r4, #0]
 800e6d8:	e7ed      	b.n	800e6b6 <_free_r+0x1e>
 800e6da:	461a      	mov	r2, r3
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	b10b      	cbz	r3, 800e6e4 <_free_r+0x4c>
 800e6e0:	42a3      	cmp	r3, r4
 800e6e2:	d9fa      	bls.n	800e6da <_free_r+0x42>
 800e6e4:	6811      	ldr	r1, [r2, #0]
 800e6e6:	1850      	adds	r0, r2, r1
 800e6e8:	42a0      	cmp	r0, r4
 800e6ea:	d10b      	bne.n	800e704 <_free_r+0x6c>
 800e6ec:	6820      	ldr	r0, [r4, #0]
 800e6ee:	4401      	add	r1, r0
 800e6f0:	1850      	adds	r0, r2, r1
 800e6f2:	4283      	cmp	r3, r0
 800e6f4:	6011      	str	r1, [r2, #0]
 800e6f6:	d1e0      	bne.n	800e6ba <_free_r+0x22>
 800e6f8:	6818      	ldr	r0, [r3, #0]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	6053      	str	r3, [r2, #4]
 800e6fe:	4408      	add	r0, r1
 800e700:	6010      	str	r0, [r2, #0]
 800e702:	e7da      	b.n	800e6ba <_free_r+0x22>
 800e704:	d902      	bls.n	800e70c <_free_r+0x74>
 800e706:	230c      	movs	r3, #12
 800e708:	602b      	str	r3, [r5, #0]
 800e70a:	e7d6      	b.n	800e6ba <_free_r+0x22>
 800e70c:	6820      	ldr	r0, [r4, #0]
 800e70e:	1821      	adds	r1, r4, r0
 800e710:	428b      	cmp	r3, r1
 800e712:	bf04      	itt	eq
 800e714:	6819      	ldreq	r1, [r3, #0]
 800e716:	685b      	ldreq	r3, [r3, #4]
 800e718:	6063      	str	r3, [r4, #4]
 800e71a:	bf04      	itt	eq
 800e71c:	1809      	addeq	r1, r1, r0
 800e71e:	6021      	streq	r1, [r4, #0]
 800e720:	6054      	str	r4, [r2, #4]
 800e722:	e7ca      	b.n	800e6ba <_free_r+0x22>
 800e724:	bd38      	pop	{r3, r4, r5, pc}
 800e726:	bf00      	nop
 800e728:	240006b8 	.word	0x240006b8

0800e72c <sbrk_aligned>:
 800e72c:	b570      	push	{r4, r5, r6, lr}
 800e72e:	4e0f      	ldr	r6, [pc, #60]	@ (800e76c <sbrk_aligned+0x40>)
 800e730:	460c      	mov	r4, r1
 800e732:	6831      	ldr	r1, [r6, #0]
 800e734:	4605      	mov	r5, r0
 800e736:	b911      	cbnz	r1, 800e73e <sbrk_aligned+0x12>
 800e738:	f000 fcf8 	bl	800f12c <_sbrk_r>
 800e73c:	6030      	str	r0, [r6, #0]
 800e73e:	4621      	mov	r1, r4
 800e740:	4628      	mov	r0, r5
 800e742:	f000 fcf3 	bl	800f12c <_sbrk_r>
 800e746:	1c43      	adds	r3, r0, #1
 800e748:	d103      	bne.n	800e752 <sbrk_aligned+0x26>
 800e74a:	f04f 34ff 	mov.w	r4, #4294967295
 800e74e:	4620      	mov	r0, r4
 800e750:	bd70      	pop	{r4, r5, r6, pc}
 800e752:	1cc4      	adds	r4, r0, #3
 800e754:	f024 0403 	bic.w	r4, r4, #3
 800e758:	42a0      	cmp	r0, r4
 800e75a:	d0f8      	beq.n	800e74e <sbrk_aligned+0x22>
 800e75c:	1a21      	subs	r1, r4, r0
 800e75e:	4628      	mov	r0, r5
 800e760:	f000 fce4 	bl	800f12c <_sbrk_r>
 800e764:	3001      	adds	r0, #1
 800e766:	d1f2      	bne.n	800e74e <sbrk_aligned+0x22>
 800e768:	e7ef      	b.n	800e74a <sbrk_aligned+0x1e>
 800e76a:	bf00      	nop
 800e76c:	240006b4 	.word	0x240006b4

0800e770 <_malloc_r>:
 800e770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e774:	1ccd      	adds	r5, r1, #3
 800e776:	f025 0503 	bic.w	r5, r5, #3
 800e77a:	3508      	adds	r5, #8
 800e77c:	2d0c      	cmp	r5, #12
 800e77e:	bf38      	it	cc
 800e780:	250c      	movcc	r5, #12
 800e782:	2d00      	cmp	r5, #0
 800e784:	4606      	mov	r6, r0
 800e786:	db01      	blt.n	800e78c <_malloc_r+0x1c>
 800e788:	42a9      	cmp	r1, r5
 800e78a:	d904      	bls.n	800e796 <_malloc_r+0x26>
 800e78c:	230c      	movs	r3, #12
 800e78e:	6033      	str	r3, [r6, #0]
 800e790:	2000      	movs	r0, #0
 800e792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e86c <_malloc_r+0xfc>
 800e79a:	f000 f869 	bl	800e870 <__malloc_lock>
 800e79e:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a2:	461c      	mov	r4, r3
 800e7a4:	bb44      	cbnz	r4, 800e7f8 <_malloc_r+0x88>
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	f7ff ffbf 	bl	800e72c <sbrk_aligned>
 800e7ae:	1c43      	adds	r3, r0, #1
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	d158      	bne.n	800e866 <_malloc_r+0xf6>
 800e7b4:	f8d8 4000 	ldr.w	r4, [r8]
 800e7b8:	4627      	mov	r7, r4
 800e7ba:	2f00      	cmp	r7, #0
 800e7bc:	d143      	bne.n	800e846 <_malloc_r+0xd6>
 800e7be:	2c00      	cmp	r4, #0
 800e7c0:	d04b      	beq.n	800e85a <_malloc_r+0xea>
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	4639      	mov	r1, r7
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	eb04 0903 	add.w	r9, r4, r3
 800e7cc:	f000 fcae 	bl	800f12c <_sbrk_r>
 800e7d0:	4581      	cmp	r9, r0
 800e7d2:	d142      	bne.n	800e85a <_malloc_r+0xea>
 800e7d4:	6821      	ldr	r1, [r4, #0]
 800e7d6:	1a6d      	subs	r5, r5, r1
 800e7d8:	4629      	mov	r1, r5
 800e7da:	4630      	mov	r0, r6
 800e7dc:	f7ff ffa6 	bl	800e72c <sbrk_aligned>
 800e7e0:	3001      	adds	r0, #1
 800e7e2:	d03a      	beq.n	800e85a <_malloc_r+0xea>
 800e7e4:	6823      	ldr	r3, [r4, #0]
 800e7e6:	442b      	add	r3, r5
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	f8d8 3000 	ldr.w	r3, [r8]
 800e7ee:	685a      	ldr	r2, [r3, #4]
 800e7f0:	bb62      	cbnz	r2, 800e84c <_malloc_r+0xdc>
 800e7f2:	f8c8 7000 	str.w	r7, [r8]
 800e7f6:	e00f      	b.n	800e818 <_malloc_r+0xa8>
 800e7f8:	6822      	ldr	r2, [r4, #0]
 800e7fa:	1b52      	subs	r2, r2, r5
 800e7fc:	d420      	bmi.n	800e840 <_malloc_r+0xd0>
 800e7fe:	2a0b      	cmp	r2, #11
 800e800:	d917      	bls.n	800e832 <_malloc_r+0xc2>
 800e802:	1961      	adds	r1, r4, r5
 800e804:	42a3      	cmp	r3, r4
 800e806:	6025      	str	r5, [r4, #0]
 800e808:	bf18      	it	ne
 800e80a:	6059      	strne	r1, [r3, #4]
 800e80c:	6863      	ldr	r3, [r4, #4]
 800e80e:	bf08      	it	eq
 800e810:	f8c8 1000 	streq.w	r1, [r8]
 800e814:	5162      	str	r2, [r4, r5]
 800e816:	604b      	str	r3, [r1, #4]
 800e818:	4630      	mov	r0, r6
 800e81a:	f000 f82f 	bl	800e87c <__malloc_unlock>
 800e81e:	f104 000b 	add.w	r0, r4, #11
 800e822:	1d23      	adds	r3, r4, #4
 800e824:	f020 0007 	bic.w	r0, r0, #7
 800e828:	1ac2      	subs	r2, r0, r3
 800e82a:	bf1c      	itt	ne
 800e82c:	1a1b      	subne	r3, r3, r0
 800e82e:	50a3      	strne	r3, [r4, r2]
 800e830:	e7af      	b.n	800e792 <_malloc_r+0x22>
 800e832:	6862      	ldr	r2, [r4, #4]
 800e834:	42a3      	cmp	r3, r4
 800e836:	bf0c      	ite	eq
 800e838:	f8c8 2000 	streq.w	r2, [r8]
 800e83c:	605a      	strne	r2, [r3, #4]
 800e83e:	e7eb      	b.n	800e818 <_malloc_r+0xa8>
 800e840:	4623      	mov	r3, r4
 800e842:	6864      	ldr	r4, [r4, #4]
 800e844:	e7ae      	b.n	800e7a4 <_malloc_r+0x34>
 800e846:	463c      	mov	r4, r7
 800e848:	687f      	ldr	r7, [r7, #4]
 800e84a:	e7b6      	b.n	800e7ba <_malloc_r+0x4a>
 800e84c:	461a      	mov	r2, r3
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	42a3      	cmp	r3, r4
 800e852:	d1fb      	bne.n	800e84c <_malloc_r+0xdc>
 800e854:	2300      	movs	r3, #0
 800e856:	6053      	str	r3, [r2, #4]
 800e858:	e7de      	b.n	800e818 <_malloc_r+0xa8>
 800e85a:	230c      	movs	r3, #12
 800e85c:	6033      	str	r3, [r6, #0]
 800e85e:	4630      	mov	r0, r6
 800e860:	f000 f80c 	bl	800e87c <__malloc_unlock>
 800e864:	e794      	b.n	800e790 <_malloc_r+0x20>
 800e866:	6005      	str	r5, [r0, #0]
 800e868:	e7d6      	b.n	800e818 <_malloc_r+0xa8>
 800e86a:	bf00      	nop
 800e86c:	240006b8 	.word	0x240006b8

0800e870 <__malloc_lock>:
 800e870:	4801      	ldr	r0, [pc, #4]	@ (800e878 <__malloc_lock+0x8>)
 800e872:	f7ff bf08 	b.w	800e686 <__retarget_lock_acquire_recursive>
 800e876:	bf00      	nop
 800e878:	240006b0 	.word	0x240006b0

0800e87c <__malloc_unlock>:
 800e87c:	4801      	ldr	r0, [pc, #4]	@ (800e884 <__malloc_unlock+0x8>)
 800e87e:	f7ff bf03 	b.w	800e688 <__retarget_lock_release_recursive>
 800e882:	bf00      	nop
 800e884:	240006b0 	.word	0x240006b0

0800e888 <__sfputc_r>:
 800e888:	6893      	ldr	r3, [r2, #8]
 800e88a:	3b01      	subs	r3, #1
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	b410      	push	{r4}
 800e890:	6093      	str	r3, [r2, #8]
 800e892:	da08      	bge.n	800e8a6 <__sfputc_r+0x1e>
 800e894:	6994      	ldr	r4, [r2, #24]
 800e896:	42a3      	cmp	r3, r4
 800e898:	db01      	blt.n	800e89e <__sfputc_r+0x16>
 800e89a:	290a      	cmp	r1, #10
 800e89c:	d103      	bne.n	800e8a6 <__sfputc_r+0x1e>
 800e89e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8a2:	f000 bb6b 	b.w	800ef7c <__swbuf_r>
 800e8a6:	6813      	ldr	r3, [r2, #0]
 800e8a8:	1c58      	adds	r0, r3, #1
 800e8aa:	6010      	str	r0, [r2, #0]
 800e8ac:	7019      	strb	r1, [r3, #0]
 800e8ae:	4608      	mov	r0, r1
 800e8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8b4:	4770      	bx	lr

0800e8b6 <__sfputs_r>:
 800e8b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b8:	4606      	mov	r6, r0
 800e8ba:	460f      	mov	r7, r1
 800e8bc:	4614      	mov	r4, r2
 800e8be:	18d5      	adds	r5, r2, r3
 800e8c0:	42ac      	cmp	r4, r5
 800e8c2:	d101      	bne.n	800e8c8 <__sfputs_r+0x12>
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	e007      	b.n	800e8d8 <__sfputs_r+0x22>
 800e8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8cc:	463a      	mov	r2, r7
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	f7ff ffda 	bl	800e888 <__sfputc_r>
 800e8d4:	1c43      	adds	r3, r0, #1
 800e8d6:	d1f3      	bne.n	800e8c0 <__sfputs_r+0xa>
 800e8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8dc <_vfiprintf_r>:
 800e8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e0:	460d      	mov	r5, r1
 800e8e2:	b09d      	sub	sp, #116	@ 0x74
 800e8e4:	4614      	mov	r4, r2
 800e8e6:	4698      	mov	r8, r3
 800e8e8:	4606      	mov	r6, r0
 800e8ea:	b118      	cbz	r0, 800e8f4 <_vfiprintf_r+0x18>
 800e8ec:	6a03      	ldr	r3, [r0, #32]
 800e8ee:	b90b      	cbnz	r3, 800e8f4 <_vfiprintf_r+0x18>
 800e8f0:	f7ff fdc4 	bl	800e47c <__sinit>
 800e8f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8f6:	07d9      	lsls	r1, r3, #31
 800e8f8:	d405      	bmi.n	800e906 <_vfiprintf_r+0x2a>
 800e8fa:	89ab      	ldrh	r3, [r5, #12]
 800e8fc:	059a      	lsls	r2, r3, #22
 800e8fe:	d402      	bmi.n	800e906 <_vfiprintf_r+0x2a>
 800e900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e902:	f7ff fec0 	bl	800e686 <__retarget_lock_acquire_recursive>
 800e906:	89ab      	ldrh	r3, [r5, #12]
 800e908:	071b      	lsls	r3, r3, #28
 800e90a:	d501      	bpl.n	800e910 <_vfiprintf_r+0x34>
 800e90c:	692b      	ldr	r3, [r5, #16]
 800e90e:	b99b      	cbnz	r3, 800e938 <_vfiprintf_r+0x5c>
 800e910:	4629      	mov	r1, r5
 800e912:	4630      	mov	r0, r6
 800e914:	f000 fb70 	bl	800eff8 <__swsetup_r>
 800e918:	b170      	cbz	r0, 800e938 <_vfiprintf_r+0x5c>
 800e91a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e91c:	07dc      	lsls	r4, r3, #31
 800e91e:	d504      	bpl.n	800e92a <_vfiprintf_r+0x4e>
 800e920:	f04f 30ff 	mov.w	r0, #4294967295
 800e924:	b01d      	add	sp, #116	@ 0x74
 800e926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e92a:	89ab      	ldrh	r3, [r5, #12]
 800e92c:	0598      	lsls	r0, r3, #22
 800e92e:	d4f7      	bmi.n	800e920 <_vfiprintf_r+0x44>
 800e930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e932:	f7ff fea9 	bl	800e688 <__retarget_lock_release_recursive>
 800e936:	e7f3      	b.n	800e920 <_vfiprintf_r+0x44>
 800e938:	2300      	movs	r3, #0
 800e93a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e93c:	2320      	movs	r3, #32
 800e93e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e942:	f8cd 800c 	str.w	r8, [sp, #12]
 800e946:	2330      	movs	r3, #48	@ 0x30
 800e948:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eaf8 <_vfiprintf_r+0x21c>
 800e94c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e950:	f04f 0901 	mov.w	r9, #1
 800e954:	4623      	mov	r3, r4
 800e956:	469a      	mov	sl, r3
 800e958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e95c:	b10a      	cbz	r2, 800e962 <_vfiprintf_r+0x86>
 800e95e:	2a25      	cmp	r2, #37	@ 0x25
 800e960:	d1f9      	bne.n	800e956 <_vfiprintf_r+0x7a>
 800e962:	ebba 0b04 	subs.w	fp, sl, r4
 800e966:	d00b      	beq.n	800e980 <_vfiprintf_r+0xa4>
 800e968:	465b      	mov	r3, fp
 800e96a:	4622      	mov	r2, r4
 800e96c:	4629      	mov	r1, r5
 800e96e:	4630      	mov	r0, r6
 800e970:	f7ff ffa1 	bl	800e8b6 <__sfputs_r>
 800e974:	3001      	adds	r0, #1
 800e976:	f000 80a7 	beq.w	800eac8 <_vfiprintf_r+0x1ec>
 800e97a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e97c:	445a      	add	r2, fp
 800e97e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e980:	f89a 3000 	ldrb.w	r3, [sl]
 800e984:	2b00      	cmp	r3, #0
 800e986:	f000 809f 	beq.w	800eac8 <_vfiprintf_r+0x1ec>
 800e98a:	2300      	movs	r3, #0
 800e98c:	f04f 32ff 	mov.w	r2, #4294967295
 800e990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e994:	f10a 0a01 	add.w	sl, sl, #1
 800e998:	9304      	str	r3, [sp, #16]
 800e99a:	9307      	str	r3, [sp, #28]
 800e99c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9a2:	4654      	mov	r4, sl
 800e9a4:	2205      	movs	r2, #5
 800e9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9aa:	4853      	ldr	r0, [pc, #332]	@ (800eaf8 <_vfiprintf_r+0x21c>)
 800e9ac:	f7f1 fc98 	bl	80002e0 <memchr>
 800e9b0:	9a04      	ldr	r2, [sp, #16]
 800e9b2:	b9d8      	cbnz	r0, 800e9ec <_vfiprintf_r+0x110>
 800e9b4:	06d1      	lsls	r1, r2, #27
 800e9b6:	bf44      	itt	mi
 800e9b8:	2320      	movmi	r3, #32
 800e9ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9be:	0713      	lsls	r3, r2, #28
 800e9c0:	bf44      	itt	mi
 800e9c2:	232b      	movmi	r3, #43	@ 0x2b
 800e9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e9cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9ce:	d015      	beq.n	800e9fc <_vfiprintf_r+0x120>
 800e9d0:	9a07      	ldr	r2, [sp, #28]
 800e9d2:	4654      	mov	r4, sl
 800e9d4:	2000      	movs	r0, #0
 800e9d6:	f04f 0c0a 	mov.w	ip, #10
 800e9da:	4621      	mov	r1, r4
 800e9dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9e0:	3b30      	subs	r3, #48	@ 0x30
 800e9e2:	2b09      	cmp	r3, #9
 800e9e4:	d94b      	bls.n	800ea7e <_vfiprintf_r+0x1a2>
 800e9e6:	b1b0      	cbz	r0, 800ea16 <_vfiprintf_r+0x13a>
 800e9e8:	9207      	str	r2, [sp, #28]
 800e9ea:	e014      	b.n	800ea16 <_vfiprintf_r+0x13a>
 800e9ec:	eba0 0308 	sub.w	r3, r0, r8
 800e9f0:	fa09 f303 	lsl.w	r3, r9, r3
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	9304      	str	r3, [sp, #16]
 800e9f8:	46a2      	mov	sl, r4
 800e9fa:	e7d2      	b.n	800e9a2 <_vfiprintf_r+0xc6>
 800e9fc:	9b03      	ldr	r3, [sp, #12]
 800e9fe:	1d19      	adds	r1, r3, #4
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	9103      	str	r1, [sp, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	bfbb      	ittet	lt
 800ea08:	425b      	neglt	r3, r3
 800ea0a:	f042 0202 	orrlt.w	r2, r2, #2
 800ea0e:	9307      	strge	r3, [sp, #28]
 800ea10:	9307      	strlt	r3, [sp, #28]
 800ea12:	bfb8      	it	lt
 800ea14:	9204      	strlt	r2, [sp, #16]
 800ea16:	7823      	ldrb	r3, [r4, #0]
 800ea18:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea1a:	d10a      	bne.n	800ea32 <_vfiprintf_r+0x156>
 800ea1c:	7863      	ldrb	r3, [r4, #1]
 800ea1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea20:	d132      	bne.n	800ea88 <_vfiprintf_r+0x1ac>
 800ea22:	9b03      	ldr	r3, [sp, #12]
 800ea24:	1d1a      	adds	r2, r3, #4
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	9203      	str	r2, [sp, #12]
 800ea2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea2e:	3402      	adds	r4, #2
 800ea30:	9305      	str	r3, [sp, #20]
 800ea32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eb08 <_vfiprintf_r+0x22c>
 800ea36:	7821      	ldrb	r1, [r4, #0]
 800ea38:	2203      	movs	r2, #3
 800ea3a:	4650      	mov	r0, sl
 800ea3c:	f7f1 fc50 	bl	80002e0 <memchr>
 800ea40:	b138      	cbz	r0, 800ea52 <_vfiprintf_r+0x176>
 800ea42:	9b04      	ldr	r3, [sp, #16]
 800ea44:	eba0 000a 	sub.w	r0, r0, sl
 800ea48:	2240      	movs	r2, #64	@ 0x40
 800ea4a:	4082      	lsls	r2, r0
 800ea4c:	4313      	orrs	r3, r2
 800ea4e:	3401      	adds	r4, #1
 800ea50:	9304      	str	r3, [sp, #16]
 800ea52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea56:	4829      	ldr	r0, [pc, #164]	@ (800eafc <_vfiprintf_r+0x220>)
 800ea58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea5c:	2206      	movs	r2, #6
 800ea5e:	f7f1 fc3f 	bl	80002e0 <memchr>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	d03f      	beq.n	800eae6 <_vfiprintf_r+0x20a>
 800ea66:	4b26      	ldr	r3, [pc, #152]	@ (800eb00 <_vfiprintf_r+0x224>)
 800ea68:	bb1b      	cbnz	r3, 800eab2 <_vfiprintf_r+0x1d6>
 800ea6a:	9b03      	ldr	r3, [sp, #12]
 800ea6c:	3307      	adds	r3, #7
 800ea6e:	f023 0307 	bic.w	r3, r3, #7
 800ea72:	3308      	adds	r3, #8
 800ea74:	9303      	str	r3, [sp, #12]
 800ea76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea78:	443b      	add	r3, r7
 800ea7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea7c:	e76a      	b.n	800e954 <_vfiprintf_r+0x78>
 800ea7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea82:	460c      	mov	r4, r1
 800ea84:	2001      	movs	r0, #1
 800ea86:	e7a8      	b.n	800e9da <_vfiprintf_r+0xfe>
 800ea88:	2300      	movs	r3, #0
 800ea8a:	3401      	adds	r4, #1
 800ea8c:	9305      	str	r3, [sp, #20]
 800ea8e:	4619      	mov	r1, r3
 800ea90:	f04f 0c0a 	mov.w	ip, #10
 800ea94:	4620      	mov	r0, r4
 800ea96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea9a:	3a30      	subs	r2, #48	@ 0x30
 800ea9c:	2a09      	cmp	r2, #9
 800ea9e:	d903      	bls.n	800eaa8 <_vfiprintf_r+0x1cc>
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d0c6      	beq.n	800ea32 <_vfiprintf_r+0x156>
 800eaa4:	9105      	str	r1, [sp, #20]
 800eaa6:	e7c4      	b.n	800ea32 <_vfiprintf_r+0x156>
 800eaa8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaac:	4604      	mov	r4, r0
 800eaae:	2301      	movs	r3, #1
 800eab0:	e7f0      	b.n	800ea94 <_vfiprintf_r+0x1b8>
 800eab2:	ab03      	add	r3, sp, #12
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	462a      	mov	r2, r5
 800eab8:	4b12      	ldr	r3, [pc, #72]	@ (800eb04 <_vfiprintf_r+0x228>)
 800eaba:	a904      	add	r1, sp, #16
 800eabc:	4630      	mov	r0, r6
 800eabe:	f3af 8000 	nop.w
 800eac2:	4607      	mov	r7, r0
 800eac4:	1c78      	adds	r0, r7, #1
 800eac6:	d1d6      	bne.n	800ea76 <_vfiprintf_r+0x19a>
 800eac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eaca:	07d9      	lsls	r1, r3, #31
 800eacc:	d405      	bmi.n	800eada <_vfiprintf_r+0x1fe>
 800eace:	89ab      	ldrh	r3, [r5, #12]
 800ead0:	059a      	lsls	r2, r3, #22
 800ead2:	d402      	bmi.n	800eada <_vfiprintf_r+0x1fe>
 800ead4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ead6:	f7ff fdd7 	bl	800e688 <__retarget_lock_release_recursive>
 800eada:	89ab      	ldrh	r3, [r5, #12]
 800eadc:	065b      	lsls	r3, r3, #25
 800eade:	f53f af1f 	bmi.w	800e920 <_vfiprintf_r+0x44>
 800eae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eae4:	e71e      	b.n	800e924 <_vfiprintf_r+0x48>
 800eae6:	ab03      	add	r3, sp, #12
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	462a      	mov	r2, r5
 800eaec:	4b05      	ldr	r3, [pc, #20]	@ (800eb04 <_vfiprintf_r+0x228>)
 800eaee:	a904      	add	r1, sp, #16
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f000 f879 	bl	800ebe8 <_printf_i>
 800eaf6:	e7e4      	b.n	800eac2 <_vfiprintf_r+0x1e6>
 800eaf8:	08011ec4 	.word	0x08011ec4
 800eafc:	08011ece 	.word	0x08011ece
 800eb00:	00000000 	.word	0x00000000
 800eb04:	0800e8b7 	.word	0x0800e8b7
 800eb08:	08011eca 	.word	0x08011eca

0800eb0c <_printf_common>:
 800eb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb10:	4616      	mov	r6, r2
 800eb12:	4698      	mov	r8, r3
 800eb14:	688a      	ldr	r2, [r1, #8]
 800eb16:	690b      	ldr	r3, [r1, #16]
 800eb18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	bfb8      	it	lt
 800eb20:	4613      	movlt	r3, r2
 800eb22:	6033      	str	r3, [r6, #0]
 800eb24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb28:	4607      	mov	r7, r0
 800eb2a:	460c      	mov	r4, r1
 800eb2c:	b10a      	cbz	r2, 800eb32 <_printf_common+0x26>
 800eb2e:	3301      	adds	r3, #1
 800eb30:	6033      	str	r3, [r6, #0]
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	0699      	lsls	r1, r3, #26
 800eb36:	bf42      	ittt	mi
 800eb38:	6833      	ldrmi	r3, [r6, #0]
 800eb3a:	3302      	addmi	r3, #2
 800eb3c:	6033      	strmi	r3, [r6, #0]
 800eb3e:	6825      	ldr	r5, [r4, #0]
 800eb40:	f015 0506 	ands.w	r5, r5, #6
 800eb44:	d106      	bne.n	800eb54 <_printf_common+0x48>
 800eb46:	f104 0a19 	add.w	sl, r4, #25
 800eb4a:	68e3      	ldr	r3, [r4, #12]
 800eb4c:	6832      	ldr	r2, [r6, #0]
 800eb4e:	1a9b      	subs	r3, r3, r2
 800eb50:	42ab      	cmp	r3, r5
 800eb52:	dc26      	bgt.n	800eba2 <_printf_common+0x96>
 800eb54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb58:	6822      	ldr	r2, [r4, #0]
 800eb5a:	3b00      	subs	r3, #0
 800eb5c:	bf18      	it	ne
 800eb5e:	2301      	movne	r3, #1
 800eb60:	0692      	lsls	r2, r2, #26
 800eb62:	d42b      	bmi.n	800ebbc <_printf_common+0xb0>
 800eb64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb68:	4641      	mov	r1, r8
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	47c8      	blx	r9
 800eb6e:	3001      	adds	r0, #1
 800eb70:	d01e      	beq.n	800ebb0 <_printf_common+0xa4>
 800eb72:	6823      	ldr	r3, [r4, #0]
 800eb74:	6922      	ldr	r2, [r4, #16]
 800eb76:	f003 0306 	and.w	r3, r3, #6
 800eb7a:	2b04      	cmp	r3, #4
 800eb7c:	bf02      	ittt	eq
 800eb7e:	68e5      	ldreq	r5, [r4, #12]
 800eb80:	6833      	ldreq	r3, [r6, #0]
 800eb82:	1aed      	subeq	r5, r5, r3
 800eb84:	68a3      	ldr	r3, [r4, #8]
 800eb86:	bf0c      	ite	eq
 800eb88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb8c:	2500      	movne	r5, #0
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	bfc4      	itt	gt
 800eb92:	1a9b      	subgt	r3, r3, r2
 800eb94:	18ed      	addgt	r5, r5, r3
 800eb96:	2600      	movs	r6, #0
 800eb98:	341a      	adds	r4, #26
 800eb9a:	42b5      	cmp	r5, r6
 800eb9c:	d11a      	bne.n	800ebd4 <_printf_common+0xc8>
 800eb9e:	2000      	movs	r0, #0
 800eba0:	e008      	b.n	800ebb4 <_printf_common+0xa8>
 800eba2:	2301      	movs	r3, #1
 800eba4:	4652      	mov	r2, sl
 800eba6:	4641      	mov	r1, r8
 800eba8:	4638      	mov	r0, r7
 800ebaa:	47c8      	blx	r9
 800ebac:	3001      	adds	r0, #1
 800ebae:	d103      	bne.n	800ebb8 <_printf_common+0xac>
 800ebb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebb8:	3501      	adds	r5, #1
 800ebba:	e7c6      	b.n	800eb4a <_printf_common+0x3e>
 800ebbc:	18e1      	adds	r1, r4, r3
 800ebbe:	1c5a      	adds	r2, r3, #1
 800ebc0:	2030      	movs	r0, #48	@ 0x30
 800ebc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebc6:	4422      	add	r2, r4
 800ebc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ebd0:	3302      	adds	r3, #2
 800ebd2:	e7c7      	b.n	800eb64 <_printf_common+0x58>
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	4622      	mov	r2, r4
 800ebd8:	4641      	mov	r1, r8
 800ebda:	4638      	mov	r0, r7
 800ebdc:	47c8      	blx	r9
 800ebde:	3001      	adds	r0, #1
 800ebe0:	d0e6      	beq.n	800ebb0 <_printf_common+0xa4>
 800ebe2:	3601      	adds	r6, #1
 800ebe4:	e7d9      	b.n	800eb9a <_printf_common+0x8e>
	...

0800ebe8 <_printf_i>:
 800ebe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebec:	7e0f      	ldrb	r7, [r1, #24]
 800ebee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ebf0:	2f78      	cmp	r7, #120	@ 0x78
 800ebf2:	4691      	mov	r9, r2
 800ebf4:	4680      	mov	r8, r0
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	469a      	mov	sl, r3
 800ebfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ebfe:	d807      	bhi.n	800ec10 <_printf_i+0x28>
 800ec00:	2f62      	cmp	r7, #98	@ 0x62
 800ec02:	d80a      	bhi.n	800ec1a <_printf_i+0x32>
 800ec04:	2f00      	cmp	r7, #0
 800ec06:	f000 80d1 	beq.w	800edac <_printf_i+0x1c4>
 800ec0a:	2f58      	cmp	r7, #88	@ 0x58
 800ec0c:	f000 80b8 	beq.w	800ed80 <_printf_i+0x198>
 800ec10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec18:	e03a      	b.n	800ec90 <_printf_i+0xa8>
 800ec1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec1e:	2b15      	cmp	r3, #21
 800ec20:	d8f6      	bhi.n	800ec10 <_printf_i+0x28>
 800ec22:	a101      	add	r1, pc, #4	@ (adr r1, 800ec28 <_printf_i+0x40>)
 800ec24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec28:	0800ec81 	.word	0x0800ec81
 800ec2c:	0800ec95 	.word	0x0800ec95
 800ec30:	0800ec11 	.word	0x0800ec11
 800ec34:	0800ec11 	.word	0x0800ec11
 800ec38:	0800ec11 	.word	0x0800ec11
 800ec3c:	0800ec11 	.word	0x0800ec11
 800ec40:	0800ec95 	.word	0x0800ec95
 800ec44:	0800ec11 	.word	0x0800ec11
 800ec48:	0800ec11 	.word	0x0800ec11
 800ec4c:	0800ec11 	.word	0x0800ec11
 800ec50:	0800ec11 	.word	0x0800ec11
 800ec54:	0800ed93 	.word	0x0800ed93
 800ec58:	0800ecbf 	.word	0x0800ecbf
 800ec5c:	0800ed4d 	.word	0x0800ed4d
 800ec60:	0800ec11 	.word	0x0800ec11
 800ec64:	0800ec11 	.word	0x0800ec11
 800ec68:	0800edb5 	.word	0x0800edb5
 800ec6c:	0800ec11 	.word	0x0800ec11
 800ec70:	0800ecbf 	.word	0x0800ecbf
 800ec74:	0800ec11 	.word	0x0800ec11
 800ec78:	0800ec11 	.word	0x0800ec11
 800ec7c:	0800ed55 	.word	0x0800ed55
 800ec80:	6833      	ldr	r3, [r6, #0]
 800ec82:	1d1a      	adds	r2, r3, #4
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	6032      	str	r2, [r6, #0]
 800ec88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec90:	2301      	movs	r3, #1
 800ec92:	e09c      	b.n	800edce <_printf_i+0x1e6>
 800ec94:	6833      	ldr	r3, [r6, #0]
 800ec96:	6820      	ldr	r0, [r4, #0]
 800ec98:	1d19      	adds	r1, r3, #4
 800ec9a:	6031      	str	r1, [r6, #0]
 800ec9c:	0606      	lsls	r6, r0, #24
 800ec9e:	d501      	bpl.n	800eca4 <_printf_i+0xbc>
 800eca0:	681d      	ldr	r5, [r3, #0]
 800eca2:	e003      	b.n	800ecac <_printf_i+0xc4>
 800eca4:	0645      	lsls	r5, r0, #25
 800eca6:	d5fb      	bpl.n	800eca0 <_printf_i+0xb8>
 800eca8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ecac:	2d00      	cmp	r5, #0
 800ecae:	da03      	bge.n	800ecb8 <_printf_i+0xd0>
 800ecb0:	232d      	movs	r3, #45	@ 0x2d
 800ecb2:	426d      	negs	r5, r5
 800ecb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecb8:	4858      	ldr	r0, [pc, #352]	@ (800ee1c <_printf_i+0x234>)
 800ecba:	230a      	movs	r3, #10
 800ecbc:	e011      	b.n	800ece2 <_printf_i+0xfa>
 800ecbe:	6821      	ldr	r1, [r4, #0]
 800ecc0:	6833      	ldr	r3, [r6, #0]
 800ecc2:	0608      	lsls	r0, r1, #24
 800ecc4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecc8:	d402      	bmi.n	800ecd0 <_printf_i+0xe8>
 800ecca:	0649      	lsls	r1, r1, #25
 800eccc:	bf48      	it	mi
 800ecce:	b2ad      	uxthmi	r5, r5
 800ecd0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ecd2:	4852      	ldr	r0, [pc, #328]	@ (800ee1c <_printf_i+0x234>)
 800ecd4:	6033      	str	r3, [r6, #0]
 800ecd6:	bf14      	ite	ne
 800ecd8:	230a      	movne	r3, #10
 800ecda:	2308      	moveq	r3, #8
 800ecdc:	2100      	movs	r1, #0
 800ecde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ece2:	6866      	ldr	r6, [r4, #4]
 800ece4:	60a6      	str	r6, [r4, #8]
 800ece6:	2e00      	cmp	r6, #0
 800ece8:	db05      	blt.n	800ecf6 <_printf_i+0x10e>
 800ecea:	6821      	ldr	r1, [r4, #0]
 800ecec:	432e      	orrs	r6, r5
 800ecee:	f021 0104 	bic.w	r1, r1, #4
 800ecf2:	6021      	str	r1, [r4, #0]
 800ecf4:	d04b      	beq.n	800ed8e <_printf_i+0x1a6>
 800ecf6:	4616      	mov	r6, r2
 800ecf8:	fbb5 f1f3 	udiv	r1, r5, r3
 800ecfc:	fb03 5711 	mls	r7, r3, r1, r5
 800ed00:	5dc7      	ldrb	r7, [r0, r7]
 800ed02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed06:	462f      	mov	r7, r5
 800ed08:	42bb      	cmp	r3, r7
 800ed0a:	460d      	mov	r5, r1
 800ed0c:	d9f4      	bls.n	800ecf8 <_printf_i+0x110>
 800ed0e:	2b08      	cmp	r3, #8
 800ed10:	d10b      	bne.n	800ed2a <_printf_i+0x142>
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	07df      	lsls	r7, r3, #31
 800ed16:	d508      	bpl.n	800ed2a <_printf_i+0x142>
 800ed18:	6923      	ldr	r3, [r4, #16]
 800ed1a:	6861      	ldr	r1, [r4, #4]
 800ed1c:	4299      	cmp	r1, r3
 800ed1e:	bfde      	ittt	le
 800ed20:	2330      	movle	r3, #48	@ 0x30
 800ed22:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed26:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed2a:	1b92      	subs	r2, r2, r6
 800ed2c:	6122      	str	r2, [r4, #16]
 800ed2e:	f8cd a000 	str.w	sl, [sp]
 800ed32:	464b      	mov	r3, r9
 800ed34:	aa03      	add	r2, sp, #12
 800ed36:	4621      	mov	r1, r4
 800ed38:	4640      	mov	r0, r8
 800ed3a:	f7ff fee7 	bl	800eb0c <_printf_common>
 800ed3e:	3001      	adds	r0, #1
 800ed40:	d14a      	bne.n	800edd8 <_printf_i+0x1f0>
 800ed42:	f04f 30ff 	mov.w	r0, #4294967295
 800ed46:	b004      	add	sp, #16
 800ed48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed4c:	6823      	ldr	r3, [r4, #0]
 800ed4e:	f043 0320 	orr.w	r3, r3, #32
 800ed52:	6023      	str	r3, [r4, #0]
 800ed54:	4832      	ldr	r0, [pc, #200]	@ (800ee20 <_printf_i+0x238>)
 800ed56:	2778      	movs	r7, #120	@ 0x78
 800ed58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed5c:	6823      	ldr	r3, [r4, #0]
 800ed5e:	6831      	ldr	r1, [r6, #0]
 800ed60:	061f      	lsls	r7, r3, #24
 800ed62:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed66:	d402      	bmi.n	800ed6e <_printf_i+0x186>
 800ed68:	065f      	lsls	r7, r3, #25
 800ed6a:	bf48      	it	mi
 800ed6c:	b2ad      	uxthmi	r5, r5
 800ed6e:	6031      	str	r1, [r6, #0]
 800ed70:	07d9      	lsls	r1, r3, #31
 800ed72:	bf44      	itt	mi
 800ed74:	f043 0320 	orrmi.w	r3, r3, #32
 800ed78:	6023      	strmi	r3, [r4, #0]
 800ed7a:	b11d      	cbz	r5, 800ed84 <_printf_i+0x19c>
 800ed7c:	2310      	movs	r3, #16
 800ed7e:	e7ad      	b.n	800ecdc <_printf_i+0xf4>
 800ed80:	4826      	ldr	r0, [pc, #152]	@ (800ee1c <_printf_i+0x234>)
 800ed82:	e7e9      	b.n	800ed58 <_printf_i+0x170>
 800ed84:	6823      	ldr	r3, [r4, #0]
 800ed86:	f023 0320 	bic.w	r3, r3, #32
 800ed8a:	6023      	str	r3, [r4, #0]
 800ed8c:	e7f6      	b.n	800ed7c <_printf_i+0x194>
 800ed8e:	4616      	mov	r6, r2
 800ed90:	e7bd      	b.n	800ed0e <_printf_i+0x126>
 800ed92:	6833      	ldr	r3, [r6, #0]
 800ed94:	6825      	ldr	r5, [r4, #0]
 800ed96:	6961      	ldr	r1, [r4, #20]
 800ed98:	1d18      	adds	r0, r3, #4
 800ed9a:	6030      	str	r0, [r6, #0]
 800ed9c:	062e      	lsls	r6, r5, #24
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	d501      	bpl.n	800eda6 <_printf_i+0x1be>
 800eda2:	6019      	str	r1, [r3, #0]
 800eda4:	e002      	b.n	800edac <_printf_i+0x1c4>
 800eda6:	0668      	lsls	r0, r5, #25
 800eda8:	d5fb      	bpl.n	800eda2 <_printf_i+0x1ba>
 800edaa:	8019      	strh	r1, [r3, #0]
 800edac:	2300      	movs	r3, #0
 800edae:	6123      	str	r3, [r4, #16]
 800edb0:	4616      	mov	r6, r2
 800edb2:	e7bc      	b.n	800ed2e <_printf_i+0x146>
 800edb4:	6833      	ldr	r3, [r6, #0]
 800edb6:	1d1a      	adds	r2, r3, #4
 800edb8:	6032      	str	r2, [r6, #0]
 800edba:	681e      	ldr	r6, [r3, #0]
 800edbc:	6862      	ldr	r2, [r4, #4]
 800edbe:	2100      	movs	r1, #0
 800edc0:	4630      	mov	r0, r6
 800edc2:	f7f1 fa8d 	bl	80002e0 <memchr>
 800edc6:	b108      	cbz	r0, 800edcc <_printf_i+0x1e4>
 800edc8:	1b80      	subs	r0, r0, r6
 800edca:	6060      	str	r0, [r4, #4]
 800edcc:	6863      	ldr	r3, [r4, #4]
 800edce:	6123      	str	r3, [r4, #16]
 800edd0:	2300      	movs	r3, #0
 800edd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edd6:	e7aa      	b.n	800ed2e <_printf_i+0x146>
 800edd8:	6923      	ldr	r3, [r4, #16]
 800edda:	4632      	mov	r2, r6
 800eddc:	4649      	mov	r1, r9
 800edde:	4640      	mov	r0, r8
 800ede0:	47d0      	blx	sl
 800ede2:	3001      	adds	r0, #1
 800ede4:	d0ad      	beq.n	800ed42 <_printf_i+0x15a>
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	079b      	lsls	r3, r3, #30
 800edea:	d413      	bmi.n	800ee14 <_printf_i+0x22c>
 800edec:	68e0      	ldr	r0, [r4, #12]
 800edee:	9b03      	ldr	r3, [sp, #12]
 800edf0:	4298      	cmp	r0, r3
 800edf2:	bfb8      	it	lt
 800edf4:	4618      	movlt	r0, r3
 800edf6:	e7a6      	b.n	800ed46 <_printf_i+0x15e>
 800edf8:	2301      	movs	r3, #1
 800edfa:	4632      	mov	r2, r6
 800edfc:	4649      	mov	r1, r9
 800edfe:	4640      	mov	r0, r8
 800ee00:	47d0      	blx	sl
 800ee02:	3001      	adds	r0, #1
 800ee04:	d09d      	beq.n	800ed42 <_printf_i+0x15a>
 800ee06:	3501      	adds	r5, #1
 800ee08:	68e3      	ldr	r3, [r4, #12]
 800ee0a:	9903      	ldr	r1, [sp, #12]
 800ee0c:	1a5b      	subs	r3, r3, r1
 800ee0e:	42ab      	cmp	r3, r5
 800ee10:	dcf2      	bgt.n	800edf8 <_printf_i+0x210>
 800ee12:	e7eb      	b.n	800edec <_printf_i+0x204>
 800ee14:	2500      	movs	r5, #0
 800ee16:	f104 0619 	add.w	r6, r4, #25
 800ee1a:	e7f5      	b.n	800ee08 <_printf_i+0x220>
 800ee1c:	08011ed5 	.word	0x08011ed5
 800ee20:	08011ee6 	.word	0x08011ee6

0800ee24 <__sflush_r>:
 800ee24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2c:	0716      	lsls	r6, r2, #28
 800ee2e:	4605      	mov	r5, r0
 800ee30:	460c      	mov	r4, r1
 800ee32:	d454      	bmi.n	800eede <__sflush_r+0xba>
 800ee34:	684b      	ldr	r3, [r1, #4]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	dc02      	bgt.n	800ee40 <__sflush_r+0x1c>
 800ee3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	dd48      	ble.n	800eed2 <__sflush_r+0xae>
 800ee40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee42:	2e00      	cmp	r6, #0
 800ee44:	d045      	beq.n	800eed2 <__sflush_r+0xae>
 800ee46:	2300      	movs	r3, #0
 800ee48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ee4c:	682f      	ldr	r7, [r5, #0]
 800ee4e:	6a21      	ldr	r1, [r4, #32]
 800ee50:	602b      	str	r3, [r5, #0]
 800ee52:	d030      	beq.n	800eeb6 <__sflush_r+0x92>
 800ee54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee56:	89a3      	ldrh	r3, [r4, #12]
 800ee58:	0759      	lsls	r1, r3, #29
 800ee5a:	d505      	bpl.n	800ee68 <__sflush_r+0x44>
 800ee5c:	6863      	ldr	r3, [r4, #4]
 800ee5e:	1ad2      	subs	r2, r2, r3
 800ee60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee62:	b10b      	cbz	r3, 800ee68 <__sflush_r+0x44>
 800ee64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee66:	1ad2      	subs	r2, r2, r3
 800ee68:	2300      	movs	r3, #0
 800ee6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee6c:	6a21      	ldr	r1, [r4, #32]
 800ee6e:	4628      	mov	r0, r5
 800ee70:	47b0      	blx	r6
 800ee72:	1c43      	adds	r3, r0, #1
 800ee74:	89a3      	ldrh	r3, [r4, #12]
 800ee76:	d106      	bne.n	800ee86 <__sflush_r+0x62>
 800ee78:	6829      	ldr	r1, [r5, #0]
 800ee7a:	291d      	cmp	r1, #29
 800ee7c:	d82b      	bhi.n	800eed6 <__sflush_r+0xb2>
 800ee7e:	4a2a      	ldr	r2, [pc, #168]	@ (800ef28 <__sflush_r+0x104>)
 800ee80:	40ca      	lsrs	r2, r1
 800ee82:	07d6      	lsls	r6, r2, #31
 800ee84:	d527      	bpl.n	800eed6 <__sflush_r+0xb2>
 800ee86:	2200      	movs	r2, #0
 800ee88:	6062      	str	r2, [r4, #4]
 800ee8a:	04d9      	lsls	r1, r3, #19
 800ee8c:	6922      	ldr	r2, [r4, #16]
 800ee8e:	6022      	str	r2, [r4, #0]
 800ee90:	d504      	bpl.n	800ee9c <__sflush_r+0x78>
 800ee92:	1c42      	adds	r2, r0, #1
 800ee94:	d101      	bne.n	800ee9a <__sflush_r+0x76>
 800ee96:	682b      	ldr	r3, [r5, #0]
 800ee98:	b903      	cbnz	r3, 800ee9c <__sflush_r+0x78>
 800ee9a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee9e:	602f      	str	r7, [r5, #0]
 800eea0:	b1b9      	cbz	r1, 800eed2 <__sflush_r+0xae>
 800eea2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eea6:	4299      	cmp	r1, r3
 800eea8:	d002      	beq.n	800eeb0 <__sflush_r+0x8c>
 800eeaa:	4628      	mov	r0, r5
 800eeac:	f7ff fbf4 	bl	800e698 <_free_r>
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	6363      	str	r3, [r4, #52]	@ 0x34
 800eeb4:	e00d      	b.n	800eed2 <__sflush_r+0xae>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	4628      	mov	r0, r5
 800eeba:	47b0      	blx	r6
 800eebc:	4602      	mov	r2, r0
 800eebe:	1c50      	adds	r0, r2, #1
 800eec0:	d1c9      	bne.n	800ee56 <__sflush_r+0x32>
 800eec2:	682b      	ldr	r3, [r5, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d0c6      	beq.n	800ee56 <__sflush_r+0x32>
 800eec8:	2b1d      	cmp	r3, #29
 800eeca:	d001      	beq.n	800eed0 <__sflush_r+0xac>
 800eecc:	2b16      	cmp	r3, #22
 800eece:	d11e      	bne.n	800ef0e <__sflush_r+0xea>
 800eed0:	602f      	str	r7, [r5, #0]
 800eed2:	2000      	movs	r0, #0
 800eed4:	e022      	b.n	800ef1c <__sflush_r+0xf8>
 800eed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeda:	b21b      	sxth	r3, r3
 800eedc:	e01b      	b.n	800ef16 <__sflush_r+0xf2>
 800eede:	690f      	ldr	r7, [r1, #16]
 800eee0:	2f00      	cmp	r7, #0
 800eee2:	d0f6      	beq.n	800eed2 <__sflush_r+0xae>
 800eee4:	0793      	lsls	r3, r2, #30
 800eee6:	680e      	ldr	r6, [r1, #0]
 800eee8:	bf08      	it	eq
 800eeea:	694b      	ldreq	r3, [r1, #20]
 800eeec:	600f      	str	r7, [r1, #0]
 800eeee:	bf18      	it	ne
 800eef0:	2300      	movne	r3, #0
 800eef2:	eba6 0807 	sub.w	r8, r6, r7
 800eef6:	608b      	str	r3, [r1, #8]
 800eef8:	f1b8 0f00 	cmp.w	r8, #0
 800eefc:	dde9      	ble.n	800eed2 <__sflush_r+0xae>
 800eefe:	6a21      	ldr	r1, [r4, #32]
 800ef00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ef02:	4643      	mov	r3, r8
 800ef04:	463a      	mov	r2, r7
 800ef06:	4628      	mov	r0, r5
 800ef08:	47b0      	blx	r6
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	dc08      	bgt.n	800ef20 <__sflush_r+0xfc>
 800ef0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef16:	81a3      	strh	r3, [r4, #12]
 800ef18:	f04f 30ff 	mov.w	r0, #4294967295
 800ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef20:	4407      	add	r7, r0
 800ef22:	eba8 0800 	sub.w	r8, r8, r0
 800ef26:	e7e7      	b.n	800eef8 <__sflush_r+0xd4>
 800ef28:	20400001 	.word	0x20400001

0800ef2c <_fflush_r>:
 800ef2c:	b538      	push	{r3, r4, r5, lr}
 800ef2e:	690b      	ldr	r3, [r1, #16]
 800ef30:	4605      	mov	r5, r0
 800ef32:	460c      	mov	r4, r1
 800ef34:	b913      	cbnz	r3, 800ef3c <_fflush_r+0x10>
 800ef36:	2500      	movs	r5, #0
 800ef38:	4628      	mov	r0, r5
 800ef3a:	bd38      	pop	{r3, r4, r5, pc}
 800ef3c:	b118      	cbz	r0, 800ef46 <_fflush_r+0x1a>
 800ef3e:	6a03      	ldr	r3, [r0, #32]
 800ef40:	b90b      	cbnz	r3, 800ef46 <_fflush_r+0x1a>
 800ef42:	f7ff fa9b 	bl	800e47c <__sinit>
 800ef46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d0f3      	beq.n	800ef36 <_fflush_r+0xa>
 800ef4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ef50:	07d0      	lsls	r0, r2, #31
 800ef52:	d404      	bmi.n	800ef5e <_fflush_r+0x32>
 800ef54:	0599      	lsls	r1, r3, #22
 800ef56:	d402      	bmi.n	800ef5e <_fflush_r+0x32>
 800ef58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef5a:	f7ff fb94 	bl	800e686 <__retarget_lock_acquire_recursive>
 800ef5e:	4628      	mov	r0, r5
 800ef60:	4621      	mov	r1, r4
 800ef62:	f7ff ff5f 	bl	800ee24 <__sflush_r>
 800ef66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef68:	07da      	lsls	r2, r3, #31
 800ef6a:	4605      	mov	r5, r0
 800ef6c:	d4e4      	bmi.n	800ef38 <_fflush_r+0xc>
 800ef6e:	89a3      	ldrh	r3, [r4, #12]
 800ef70:	059b      	lsls	r3, r3, #22
 800ef72:	d4e1      	bmi.n	800ef38 <_fflush_r+0xc>
 800ef74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef76:	f7ff fb87 	bl	800e688 <__retarget_lock_release_recursive>
 800ef7a:	e7dd      	b.n	800ef38 <_fflush_r+0xc>

0800ef7c <__swbuf_r>:
 800ef7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef7e:	460e      	mov	r6, r1
 800ef80:	4614      	mov	r4, r2
 800ef82:	4605      	mov	r5, r0
 800ef84:	b118      	cbz	r0, 800ef8e <__swbuf_r+0x12>
 800ef86:	6a03      	ldr	r3, [r0, #32]
 800ef88:	b90b      	cbnz	r3, 800ef8e <__swbuf_r+0x12>
 800ef8a:	f7ff fa77 	bl	800e47c <__sinit>
 800ef8e:	69a3      	ldr	r3, [r4, #24]
 800ef90:	60a3      	str	r3, [r4, #8]
 800ef92:	89a3      	ldrh	r3, [r4, #12]
 800ef94:	071a      	lsls	r2, r3, #28
 800ef96:	d501      	bpl.n	800ef9c <__swbuf_r+0x20>
 800ef98:	6923      	ldr	r3, [r4, #16]
 800ef9a:	b943      	cbnz	r3, 800efae <__swbuf_r+0x32>
 800ef9c:	4621      	mov	r1, r4
 800ef9e:	4628      	mov	r0, r5
 800efa0:	f000 f82a 	bl	800eff8 <__swsetup_r>
 800efa4:	b118      	cbz	r0, 800efae <__swbuf_r+0x32>
 800efa6:	f04f 37ff 	mov.w	r7, #4294967295
 800efaa:	4638      	mov	r0, r7
 800efac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	6922      	ldr	r2, [r4, #16]
 800efb2:	1a98      	subs	r0, r3, r2
 800efb4:	6963      	ldr	r3, [r4, #20]
 800efb6:	b2f6      	uxtb	r6, r6
 800efb8:	4283      	cmp	r3, r0
 800efba:	4637      	mov	r7, r6
 800efbc:	dc05      	bgt.n	800efca <__swbuf_r+0x4e>
 800efbe:	4621      	mov	r1, r4
 800efc0:	4628      	mov	r0, r5
 800efc2:	f7ff ffb3 	bl	800ef2c <_fflush_r>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d1ed      	bne.n	800efa6 <__swbuf_r+0x2a>
 800efca:	68a3      	ldr	r3, [r4, #8]
 800efcc:	3b01      	subs	r3, #1
 800efce:	60a3      	str	r3, [r4, #8]
 800efd0:	6823      	ldr	r3, [r4, #0]
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	6022      	str	r2, [r4, #0]
 800efd6:	701e      	strb	r6, [r3, #0]
 800efd8:	6962      	ldr	r2, [r4, #20]
 800efda:	1c43      	adds	r3, r0, #1
 800efdc:	429a      	cmp	r2, r3
 800efde:	d004      	beq.n	800efea <__swbuf_r+0x6e>
 800efe0:	89a3      	ldrh	r3, [r4, #12]
 800efe2:	07db      	lsls	r3, r3, #31
 800efe4:	d5e1      	bpl.n	800efaa <__swbuf_r+0x2e>
 800efe6:	2e0a      	cmp	r6, #10
 800efe8:	d1df      	bne.n	800efaa <__swbuf_r+0x2e>
 800efea:	4621      	mov	r1, r4
 800efec:	4628      	mov	r0, r5
 800efee:	f7ff ff9d 	bl	800ef2c <_fflush_r>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d0d9      	beq.n	800efaa <__swbuf_r+0x2e>
 800eff6:	e7d6      	b.n	800efa6 <__swbuf_r+0x2a>

0800eff8 <__swsetup_r>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	4b29      	ldr	r3, [pc, #164]	@ (800f0a0 <__swsetup_r+0xa8>)
 800effc:	4605      	mov	r5, r0
 800effe:	6818      	ldr	r0, [r3, #0]
 800f000:	460c      	mov	r4, r1
 800f002:	b118      	cbz	r0, 800f00c <__swsetup_r+0x14>
 800f004:	6a03      	ldr	r3, [r0, #32]
 800f006:	b90b      	cbnz	r3, 800f00c <__swsetup_r+0x14>
 800f008:	f7ff fa38 	bl	800e47c <__sinit>
 800f00c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f010:	0719      	lsls	r1, r3, #28
 800f012:	d422      	bmi.n	800f05a <__swsetup_r+0x62>
 800f014:	06da      	lsls	r2, r3, #27
 800f016:	d407      	bmi.n	800f028 <__swsetup_r+0x30>
 800f018:	2209      	movs	r2, #9
 800f01a:	602a      	str	r2, [r5, #0]
 800f01c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f020:	81a3      	strh	r3, [r4, #12]
 800f022:	f04f 30ff 	mov.w	r0, #4294967295
 800f026:	e033      	b.n	800f090 <__swsetup_r+0x98>
 800f028:	0758      	lsls	r0, r3, #29
 800f02a:	d512      	bpl.n	800f052 <__swsetup_r+0x5a>
 800f02c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f02e:	b141      	cbz	r1, 800f042 <__swsetup_r+0x4a>
 800f030:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f034:	4299      	cmp	r1, r3
 800f036:	d002      	beq.n	800f03e <__swsetup_r+0x46>
 800f038:	4628      	mov	r0, r5
 800f03a:	f7ff fb2d 	bl	800e698 <_free_r>
 800f03e:	2300      	movs	r3, #0
 800f040:	6363      	str	r3, [r4, #52]	@ 0x34
 800f042:	89a3      	ldrh	r3, [r4, #12]
 800f044:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f048:	81a3      	strh	r3, [r4, #12]
 800f04a:	2300      	movs	r3, #0
 800f04c:	6063      	str	r3, [r4, #4]
 800f04e:	6923      	ldr	r3, [r4, #16]
 800f050:	6023      	str	r3, [r4, #0]
 800f052:	89a3      	ldrh	r3, [r4, #12]
 800f054:	f043 0308 	orr.w	r3, r3, #8
 800f058:	81a3      	strh	r3, [r4, #12]
 800f05a:	6923      	ldr	r3, [r4, #16]
 800f05c:	b94b      	cbnz	r3, 800f072 <__swsetup_r+0x7a>
 800f05e:	89a3      	ldrh	r3, [r4, #12]
 800f060:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f068:	d003      	beq.n	800f072 <__swsetup_r+0x7a>
 800f06a:	4621      	mov	r1, r4
 800f06c:	4628      	mov	r0, r5
 800f06e:	f000 f893 	bl	800f198 <__smakebuf_r>
 800f072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f076:	f013 0201 	ands.w	r2, r3, #1
 800f07a:	d00a      	beq.n	800f092 <__swsetup_r+0x9a>
 800f07c:	2200      	movs	r2, #0
 800f07e:	60a2      	str	r2, [r4, #8]
 800f080:	6962      	ldr	r2, [r4, #20]
 800f082:	4252      	negs	r2, r2
 800f084:	61a2      	str	r2, [r4, #24]
 800f086:	6922      	ldr	r2, [r4, #16]
 800f088:	b942      	cbnz	r2, 800f09c <__swsetup_r+0xa4>
 800f08a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f08e:	d1c5      	bne.n	800f01c <__swsetup_r+0x24>
 800f090:	bd38      	pop	{r3, r4, r5, pc}
 800f092:	0799      	lsls	r1, r3, #30
 800f094:	bf58      	it	pl
 800f096:	6962      	ldrpl	r2, [r4, #20]
 800f098:	60a2      	str	r2, [r4, #8]
 800f09a:	e7f4      	b.n	800f086 <__swsetup_r+0x8e>
 800f09c:	2000      	movs	r0, #0
 800f09e:	e7f7      	b.n	800f090 <__swsetup_r+0x98>
 800f0a0:	24000028 	.word	0x24000028

0800f0a4 <_raise_r>:
 800f0a4:	291f      	cmp	r1, #31
 800f0a6:	b538      	push	{r3, r4, r5, lr}
 800f0a8:	4605      	mov	r5, r0
 800f0aa:	460c      	mov	r4, r1
 800f0ac:	d904      	bls.n	800f0b8 <_raise_r+0x14>
 800f0ae:	2316      	movs	r3, #22
 800f0b0:	6003      	str	r3, [r0, #0]
 800f0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b6:	bd38      	pop	{r3, r4, r5, pc}
 800f0b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f0ba:	b112      	cbz	r2, 800f0c2 <_raise_r+0x1e>
 800f0bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0c0:	b94b      	cbnz	r3, 800f0d6 <_raise_r+0x32>
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	f000 f830 	bl	800f128 <_getpid_r>
 800f0c8:	4622      	mov	r2, r4
 800f0ca:	4601      	mov	r1, r0
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0d2:	f000 b817 	b.w	800f104 <_kill_r>
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d00a      	beq.n	800f0f0 <_raise_r+0x4c>
 800f0da:	1c59      	adds	r1, r3, #1
 800f0dc:	d103      	bne.n	800f0e6 <_raise_r+0x42>
 800f0de:	2316      	movs	r3, #22
 800f0e0:	6003      	str	r3, [r0, #0]
 800f0e2:	2001      	movs	r0, #1
 800f0e4:	e7e7      	b.n	800f0b6 <_raise_r+0x12>
 800f0e6:	2100      	movs	r1, #0
 800f0e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	4798      	blx	r3
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	e7e0      	b.n	800f0b6 <_raise_r+0x12>

0800f0f4 <raise>:
 800f0f4:	4b02      	ldr	r3, [pc, #8]	@ (800f100 <raise+0xc>)
 800f0f6:	4601      	mov	r1, r0
 800f0f8:	6818      	ldr	r0, [r3, #0]
 800f0fa:	f7ff bfd3 	b.w	800f0a4 <_raise_r>
 800f0fe:	bf00      	nop
 800f100:	24000028 	.word	0x24000028

0800f104 <_kill_r>:
 800f104:	b538      	push	{r3, r4, r5, lr}
 800f106:	4d07      	ldr	r5, [pc, #28]	@ (800f124 <_kill_r+0x20>)
 800f108:	2300      	movs	r3, #0
 800f10a:	4604      	mov	r4, r0
 800f10c:	4608      	mov	r0, r1
 800f10e:	4611      	mov	r1, r2
 800f110:	602b      	str	r3, [r5, #0]
 800f112:	f7f7 faaf 	bl	8006674 <_kill>
 800f116:	1c43      	adds	r3, r0, #1
 800f118:	d102      	bne.n	800f120 <_kill_r+0x1c>
 800f11a:	682b      	ldr	r3, [r5, #0]
 800f11c:	b103      	cbz	r3, 800f120 <_kill_r+0x1c>
 800f11e:	6023      	str	r3, [r4, #0]
 800f120:	bd38      	pop	{r3, r4, r5, pc}
 800f122:	bf00      	nop
 800f124:	240006ac 	.word	0x240006ac

0800f128 <_getpid_r>:
 800f128:	f7f7 ba9c 	b.w	8006664 <_getpid>

0800f12c <_sbrk_r>:
 800f12c:	b538      	push	{r3, r4, r5, lr}
 800f12e:	4d06      	ldr	r5, [pc, #24]	@ (800f148 <_sbrk_r+0x1c>)
 800f130:	2300      	movs	r3, #0
 800f132:	4604      	mov	r4, r0
 800f134:	4608      	mov	r0, r1
 800f136:	602b      	str	r3, [r5, #0]
 800f138:	f7f7 fb24 	bl	8006784 <_sbrk>
 800f13c:	1c43      	adds	r3, r0, #1
 800f13e:	d102      	bne.n	800f146 <_sbrk_r+0x1a>
 800f140:	682b      	ldr	r3, [r5, #0]
 800f142:	b103      	cbz	r3, 800f146 <_sbrk_r+0x1a>
 800f144:	6023      	str	r3, [r4, #0]
 800f146:	bd38      	pop	{r3, r4, r5, pc}
 800f148:	240006ac 	.word	0x240006ac

0800f14c <__swhatbuf_r>:
 800f14c:	b570      	push	{r4, r5, r6, lr}
 800f14e:	460c      	mov	r4, r1
 800f150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f154:	2900      	cmp	r1, #0
 800f156:	b096      	sub	sp, #88	@ 0x58
 800f158:	4615      	mov	r5, r2
 800f15a:	461e      	mov	r6, r3
 800f15c:	da0d      	bge.n	800f17a <__swhatbuf_r+0x2e>
 800f15e:	89a3      	ldrh	r3, [r4, #12]
 800f160:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f164:	f04f 0100 	mov.w	r1, #0
 800f168:	bf14      	ite	ne
 800f16a:	2340      	movne	r3, #64	@ 0x40
 800f16c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f170:	2000      	movs	r0, #0
 800f172:	6031      	str	r1, [r6, #0]
 800f174:	602b      	str	r3, [r5, #0]
 800f176:	b016      	add	sp, #88	@ 0x58
 800f178:	bd70      	pop	{r4, r5, r6, pc}
 800f17a:	466a      	mov	r2, sp
 800f17c:	f000 f848 	bl	800f210 <_fstat_r>
 800f180:	2800      	cmp	r0, #0
 800f182:	dbec      	blt.n	800f15e <__swhatbuf_r+0x12>
 800f184:	9901      	ldr	r1, [sp, #4]
 800f186:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f18a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f18e:	4259      	negs	r1, r3
 800f190:	4159      	adcs	r1, r3
 800f192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f196:	e7eb      	b.n	800f170 <__swhatbuf_r+0x24>

0800f198 <__smakebuf_r>:
 800f198:	898b      	ldrh	r3, [r1, #12]
 800f19a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f19c:	079d      	lsls	r5, r3, #30
 800f19e:	4606      	mov	r6, r0
 800f1a0:	460c      	mov	r4, r1
 800f1a2:	d507      	bpl.n	800f1b4 <__smakebuf_r+0x1c>
 800f1a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f1a8:	6023      	str	r3, [r4, #0]
 800f1aa:	6123      	str	r3, [r4, #16]
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	6163      	str	r3, [r4, #20]
 800f1b0:	b003      	add	sp, #12
 800f1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1b4:	ab01      	add	r3, sp, #4
 800f1b6:	466a      	mov	r2, sp
 800f1b8:	f7ff ffc8 	bl	800f14c <__swhatbuf_r>
 800f1bc:	9f00      	ldr	r7, [sp, #0]
 800f1be:	4605      	mov	r5, r0
 800f1c0:	4639      	mov	r1, r7
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	f7ff fad4 	bl	800e770 <_malloc_r>
 800f1c8:	b948      	cbnz	r0, 800f1de <__smakebuf_r+0x46>
 800f1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1ce:	059a      	lsls	r2, r3, #22
 800f1d0:	d4ee      	bmi.n	800f1b0 <__smakebuf_r+0x18>
 800f1d2:	f023 0303 	bic.w	r3, r3, #3
 800f1d6:	f043 0302 	orr.w	r3, r3, #2
 800f1da:	81a3      	strh	r3, [r4, #12]
 800f1dc:	e7e2      	b.n	800f1a4 <__smakebuf_r+0xc>
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	6020      	str	r0, [r4, #0]
 800f1e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1e6:	81a3      	strh	r3, [r4, #12]
 800f1e8:	9b01      	ldr	r3, [sp, #4]
 800f1ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f1ee:	b15b      	cbz	r3, 800f208 <__smakebuf_r+0x70>
 800f1f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	f000 f81d 	bl	800f234 <_isatty_r>
 800f1fa:	b128      	cbz	r0, 800f208 <__smakebuf_r+0x70>
 800f1fc:	89a3      	ldrh	r3, [r4, #12]
 800f1fe:	f023 0303 	bic.w	r3, r3, #3
 800f202:	f043 0301 	orr.w	r3, r3, #1
 800f206:	81a3      	strh	r3, [r4, #12]
 800f208:	89a3      	ldrh	r3, [r4, #12]
 800f20a:	431d      	orrs	r5, r3
 800f20c:	81a5      	strh	r5, [r4, #12]
 800f20e:	e7cf      	b.n	800f1b0 <__smakebuf_r+0x18>

0800f210 <_fstat_r>:
 800f210:	b538      	push	{r3, r4, r5, lr}
 800f212:	4d07      	ldr	r5, [pc, #28]	@ (800f230 <_fstat_r+0x20>)
 800f214:	2300      	movs	r3, #0
 800f216:	4604      	mov	r4, r0
 800f218:	4608      	mov	r0, r1
 800f21a:	4611      	mov	r1, r2
 800f21c:	602b      	str	r3, [r5, #0]
 800f21e:	f7f7 fa89 	bl	8006734 <_fstat>
 800f222:	1c43      	adds	r3, r0, #1
 800f224:	d102      	bne.n	800f22c <_fstat_r+0x1c>
 800f226:	682b      	ldr	r3, [r5, #0]
 800f228:	b103      	cbz	r3, 800f22c <_fstat_r+0x1c>
 800f22a:	6023      	str	r3, [r4, #0]
 800f22c:	bd38      	pop	{r3, r4, r5, pc}
 800f22e:	bf00      	nop
 800f230:	240006ac 	.word	0x240006ac

0800f234 <_isatty_r>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4d06      	ldr	r5, [pc, #24]	@ (800f250 <_isatty_r+0x1c>)
 800f238:	2300      	movs	r3, #0
 800f23a:	4604      	mov	r4, r0
 800f23c:	4608      	mov	r0, r1
 800f23e:	602b      	str	r3, [r5, #0]
 800f240:	f7f7 fa88 	bl	8006754 <_isatty>
 800f244:	1c43      	adds	r3, r0, #1
 800f246:	d102      	bne.n	800f24e <_isatty_r+0x1a>
 800f248:	682b      	ldr	r3, [r5, #0]
 800f24a:	b103      	cbz	r3, 800f24e <_isatty_r+0x1a>
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	bd38      	pop	{r3, r4, r5, pc}
 800f250:	240006ac 	.word	0x240006ac

0800f254 <_init>:
 800f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f256:	bf00      	nop
 800f258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f25a:	bc08      	pop	{r3}
 800f25c:	469e      	mov	lr, r3
 800f25e:	4770      	bx	lr

0800f260 <_fini>:
 800f260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f262:	bf00      	nop
 800f264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f266:	bc08      	pop	{r3}
 800f268:	469e      	mov	lr, r3
 800f26a:	4770      	bx	lr
