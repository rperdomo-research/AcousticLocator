
AcousticLocator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003998  08003998  00004998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080039b0  080039b0  000049b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080039b8  080039b8  000049b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000040  24000000  080039bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003f0  24000040  080039fc  00005040  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000430  080039fc  00005430  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010430  00000000  00000000  0000506e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002311  00000000  00000000  0001549e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d08  00000000  00000000  000177b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000a00  00000000  00000000  000184b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a089  00000000  00000000  00018eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ee27  00000000  00000000  00052f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00167319  00000000  00000000  00061d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c9081  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000035fc  00000000  00000000  001c90c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  001cc6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003980 	.word	0x08003980

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08003980 	.word	0x08003980

080002d8 <_ZN14CircularBufferC1Ev>:
#include "CircularBuffer.h"
//#include <iostream>

	CircularBuffer::CircularBuffer(){}
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4618      	mov	r0, r3
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <_ZN3PIDC1Efff>:
#include "PID.h"
#include "CircularBuffer.h"

	CircularBuffer errors;

    PID::PID(float kp=0.0, float ki=0.0, float kd=0.0)
 80002fe:	b480      	push	{r7}
 8000300:	b085      	sub	sp, #20
 8000302:	af00      	add	r7, sp, #0
 8000304:	60f8      	str	r0, [r7, #12]
 8000306:	ed87 0a02 	vstr	s0, [r7, #8]
 800030a:	edc7 0a01 	vstr	s1, [r7, #4]
 800030e:	ed87 1a00 	vstr	s2, [r7]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	f04f 0200 	mov.w	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	f04f 0200 	mov.w	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	f04f 0200 	mov.w	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	f04f 0200 	mov.w	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	f04f 0200 	mov.w	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	615a      	str	r2, [r3, #20]
    {
        propertionalGain = kp;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	68ba      	ldr	r2, [r7, #8]
 8000346:	601a      	str	r2, [r3, #0]
        integralGain = ki;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	605a      	str	r2, [r3, #4]
        derivativeGain = kd;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	683a      	ldr	r2, [r7, #0]
 8000352:	609a      	str	r2, [r3, #8]
    }
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	4618      	mov	r0, r3
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
	...

08000364 <_Z41__static_initialization_and_destruction_0v>:
        sum += propertionalGain*error;
        sum += integralGain*errors.getSum();
        sum += derivativeGain*(error - errors.getPrevious());

        return sum;
    }
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	CircularBuffer errors;
 8000368:	4802      	ldr	r0, [pc, #8]	@ (8000374 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800036a:	f7ff ffb5 	bl	80002d8 <_ZN14CircularBufferC1Ev>
    }
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	2400005c 	.word	0x2400005c

08000378 <_GLOBAL__sub_I_errors>:
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
 800037c:	f7ff fff2 	bl	8000364 <_Z41__static_initialization_and_destruction_0v>
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == TIM_CHANNEL_1)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	7f1b      	ldrb	r3, [r3, #28]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d109      	bne.n	80003a8 <HAL_TIM_IC_CaptureCallback+0x24>
	{
		mic1Triggered = 1;
 8000394:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000396:	2201      	movs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		mic1TimerCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800039a:	2100      	movs	r1, #0
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f002 ff27 	bl	80031f0 <HAL_TIM_ReadCapturedValue>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4a11      	ldr	r2, [pc, #68]	@ (80003ec <HAL_TIM_IC_CaptureCallback+0x68>)
 80003a6:	6013      	str	r3, [r2, #0]
	}

	if (htim->Channel == TIM_CHANNEL_2)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7f1b      	ldrb	r3, [r3, #28]
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	d109      	bne.n	80003c4 <HAL_TIM_IC_CaptureCallback+0x40>
	{
		mic2Triggered = 1;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	701a      	strb	r2, [r3, #0]
		mic2TimerCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80003b6:	2104      	movs	r1, #4
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f002 ff19 	bl	80031f0 <HAL_TIM_ReadCapturedValue>
 80003be:	4603      	mov	r3, r0
 80003c0:	4a0c      	ldr	r2, [pc, #48]	@ (80003f4 <HAL_TIM_IC_CaptureCallback+0x70>)
 80003c2:	6013      	str	r3, [r2, #0]
	}

	if (htim->Channel == TIM_CHANNEL_3)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	7f1b      	ldrb	r3, [r3, #28]
 80003c8:	2b08      	cmp	r3, #8
 80003ca:	d109      	bne.n	80003e0 <HAL_TIM_IC_CaptureCallback+0x5c>
	{
		mic3Triggered = 1;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <HAL_TIM_IC_CaptureCallback+0x74>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	701a      	strb	r2, [r3, #0]
		mic3TimerCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80003d2:	2108      	movs	r1, #8
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f002 ff0b 	bl	80031f0 <HAL_TIM_ReadCapturedValue>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a07      	ldr	r2, [pc, #28]	@ (80003fc <HAL_TIM_IC_CaptureCallback+0x78>)
 80003de:	6013      	str	r3, [r2, #0]
	}
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	24000428 	.word	0x24000428
 80003ec:	2400041c 	.word	0x2400041c
 80003f0:	24000429 	.word	0x24000429
 80003f4:	24000420 	.word	0x24000420
 80003f8:	2400042a 	.word	0x2400042a
 80003fc:	24000424 	.word	0x24000424

08000400 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	timer2BreakFlag = 1;
 8000408:	4b04      	ldr	r3, [pc, #16]	@ (800041c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800040a:	2201      	movs	r2, #1
 800040c:	701a      	strb	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	24000020 	.word	0x24000020

08000420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	f5ad 7d6e 	sub.w	sp, sp, #952	@ 0x3b8
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	PID controlAzimuthMotor(0.5, 0.1, 0.0);
 8000428:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800042c:	ed9f 1a74 	vldr	s2, [pc, #464]	@ 8000600 <main+0x1e0>
 8000430:	eddf 0a74 	vldr	s1, [pc, #464]	@ 8000604 <main+0x1e4>
 8000434:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff60 	bl	80002fe <_ZN3PIDC1Efff>
	PID controlElevationMotor(0.5, 0.1, 0.0);
 800043e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8000442:	ed9f 1a6f 	vldr	s2, [pc, #444]	@ 8000600 <main+0x1e0>
 8000446:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 8000604 <main+0x1e4>
 800044a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff55 	bl	80002fe <_ZN3PIDC1Efff>

	// Init Buffer
	CircularBuffer frame;
 8000454:	f107 0318 	add.w	r3, r7, #24
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff3d 	bl	80002d8 <_ZN14CircularBufferC1Ev>
	// Signal Processing Variables
	float time1 = 0;
 800045e:	f04f 0300 	mov.w	r3, #0
 8000462:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
	float time2 = 0;
 8000466:	f04f 0300 	mov.w	r3, #0
 800046a:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
	float time3 = 0;
 800046e:	f04f 0300 	mov.w	r3, #0
 8000472:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
	float distance2Source = 0.0;
 8000476:	f04f 0300 	mov.w	r3, #0
 800047a:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8

	// Coordinate Variables
	float rectangular[3];
	float xCoord = 0.0;
 800047e:	f04f 0300 	mov.w	r3, #0
 8000482:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
	float yCoord = 0.0;
 8000486:	f04f 0300 	mov.w	r3, #0
 800048a:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
	float zCoord = 0.0;
 800048e:	f04f 0300 	mov.w	r3, #0
 8000492:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c

	float spherical[2];
	bool AziDirection = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	f887 339b 	strb.w	r3, [r7, #923]	@ 0x39b
	bool AltiDirection = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	f887 339a 	strb.w	r3, [r7, #922]	@ 0x39a
	float AziDeg = 0.0;
 80004a2:	f04f 0300 	mov.w	r3, #0
 80004a6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
	float AltiDeg = 0.0;
 80004aa:	f04f 0300 	mov.w	r3, #0
 80004ae:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390

	// Control Variables
	float errorA = 0.0;
 80004b2:	f04f 0300 	mov.w	r3, #0
 80004b6:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
	float targetDegA = 0.0;
 80004ba:	f04f 0300 	mov.w	r3, #0
 80004be:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
	float currentDegA = 0.0;
 80004c2:	f04f 0300 	mov.w	r3, #0
 80004c6:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
	float newTargetA = 0.0;
 80004ca:	f04f 0300 	mov.w	r3, #0
 80004ce:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380

	float errorB = 0.0;
 80004d2:	f04f 0300 	mov.w	r3, #0
 80004d6:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
	float targetDegB = 0.0;
 80004da:	f04f 0300 	mov.w	r3, #0
 80004de:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
	float currentDegB = 0.0;
 80004e2:	f04f 0300 	mov.w	r3, #0
 80004e6:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
	float newTargetB = 0.0;
 80004ea:	f04f 0300 	mov.w	r3, #0
 80004ee:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fdff 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f89d 	bl	8000634 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 fa35 	bl	8000968 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 80004fe:	f000 f925 	bl	800074c <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000502:	f000 f987 	bl	8000814 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000506:	2100      	movs	r1, #0
 8000508:	483f      	ldr	r0, [pc, #252]	@ (8000608 <main+0x1e8>)
 800050a:	f002 fa85 	bl	8002a18 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800050e:	2104      	movs	r1, #4
 8000510:	483d      	ldr	r0, [pc, #244]	@ (8000608 <main+0x1e8>)
 8000512:	f002 fa81 	bl	8002a18 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000516:	2108      	movs	r1, #8
 8000518:	483b      	ldr	r0, [pc, #236]	@ (8000608 <main+0x1e8>)
 800051a:	f002 fa7d 	bl	8002a18 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start_IT(&htim1);
 800051e:	483b      	ldr	r0, [pc, #236]	@ (800060c <main+0x1ec>)
 8000520:	f002 f9a0 	bl	8002864 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fd6f 	bl	8001008 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fd6c 	bl	8001008 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000530:	2002      	movs	r0, #2
 8000532:	f000 fd69 	bl	8001008 <BSP_LED_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ( mic1Triggered && mic2Triggered && mic3Triggered)
 8000536:	4b36      	ldr	r3, [pc, #216]	@ (8000610 <main+0x1f0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d044      	beq.n	80005c8 <main+0x1a8>
 800053e:	4b35      	ldr	r3, [pc, #212]	@ (8000614 <main+0x1f4>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d040      	beq.n	80005c8 <main+0x1a8>
 8000546:	4b34      	ldr	r3, [pc, #208]	@ (8000618 <main+0x1f8>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d03c      	beq.n	80005c8 <main+0x1a8>
	  {

		  if (timer2BreakFlag)
 800054e:	4b33      	ldr	r3, [pc, #204]	@ (800061c <main+0x1fc>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d038      	beq.n	80005c8 <main+0x1a8>
		  {
			  // calculate position
			  time1 = CLK_PRD*mic1TimerCapture;
 8000556:	4b32      	ldr	r3, [pc, #200]	@ (8000620 <main+0x200>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	ee07 3a90 	vmov	s15, r3
 800055e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000562:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80005f8 <main+0x1d8>
 8000566:	ee27 7b06 	vmul.f64	d7, d7, d6
 800056a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800056e:	edc7 7aed 	vstr	s15, [r7, #948]	@ 0x3b4
			  time2 = CLK_PRD*mic2TimerCapture;
 8000572:	4b2c      	ldr	r3, [pc, #176]	@ (8000624 <main+0x204>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	ee07 3a90 	vmov	s15, r3
 800057a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800057e:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80005f8 <main+0x1d8>
 8000582:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000586:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800058a:	edc7 7aec 	vstr	s15, [r7, #944]	@ 0x3b0
			  time3 = CLK_PRD*mic3TimerCapture;
 800058e:	4b26      	ldr	r3, [pc, #152]	@ (8000628 <main+0x208>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	ee07 3a90 	vmov	s15, r3
 8000596:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800059a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 80005f8 <main+0x1d8>
 800059e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005a6:	edc7 7aeb 	vstr	s15, [r7, #940]	@ 0x3ac


			  mic1Triggered = 0;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <main+0x1f0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
			  mic2Triggered = 0;
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <main+0x1f4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
			  mic3Triggered = 0;
 80005b6:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <main+0x1f8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]

			  TIM1->CNT = 0;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <main+0x20c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	@ 0x24
			  timer2BreakFlag = 0;
 80005c2:	4b16      	ldr	r3, [pc, #88]	@ (800061c <main+0x1fc>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
//	  HAL_Delay(500);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
//	  HAL_Delay(500);

	  moveMotor(AZIMUTH_MOTOR, DIR_CW, 45.0);
 80005c8:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000630 <main+0x210>
 80005cc:	2101      	movs	r1, #1
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fac6 	bl	8000b60 <_Z9moveMotorbbf>
	  HAL_Delay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d8:	f000 fe1e 	bl	8001218 <HAL_Delay>
	  moveMotor(AZIMUTH_MOTOR, DIR_CCW, 45.0);
 80005dc:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8000630 <main+0x210>
 80005e0:	2100      	movs	r1, #0
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fabc 	bl	8000b60 <_Z9moveMotorbbf>
	  HAL_Delay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ec:	f000 fe14 	bl	8001218 <HAL_Delay>
	  if ( mic1Triggered && mic2Triggered && mic3Triggered)
 80005f0:	e7a1      	b.n	8000536 <main+0x116>
 80005f2:	bf00      	nop
 80005f4:	f3af 8000 	nop.w
 80005f8:	472b0013 	.word	0x472b0013
 80005fc:	3e41e377 	.word	0x3e41e377
 8000600:	00000000 	.word	0x00000000
 8000604:	3dcccccd 	.word	0x3dcccccd
 8000608:	240003d0 	.word	0x240003d0
 800060c:	24000384 	.word	0x24000384
 8000610:	24000428 	.word	0x24000428
 8000614:	24000429 	.word	0x24000429
 8000618:	2400042a 	.word	0x2400042a
 800061c:	24000020 	.word	0x24000020
 8000620:	2400041c 	.word	0x2400041c
 8000624:	24000420 	.word	0x24000420
 8000628:	24000424 	.word	0x24000424
 800062c:	40010000 	.word	0x40010000
 8000630:	42340000 	.word	0x42340000

08000634 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	@ 0x70
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800063e:	224c      	movs	r2, #76	@ 0x4c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 f970 	bl	8003928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 f96a 	bl	8003928 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000654:	2002      	movs	r0, #2
 8000656:	f001 f8e9 	bl	800182c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	4b39      	ldr	r3, [pc, #228]	@ (8000744 <_Z18SystemClock_Configv+0x110>)
 8000660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000662:	4a38      	ldr	r2, [pc, #224]	@ (8000744 <_Z18SystemClock_Configv+0x110>)
 8000664:	f023 0301 	bic.w	r3, r3, #1
 8000668:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800066a:	4b36      	ldr	r3, [pc, #216]	@ (8000744 <_Z18SystemClock_Configv+0x110>)
 800066c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <_Z18SystemClock_Configv+0x114>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800067c:	4a32      	ldr	r2, [pc, #200]	@ (8000748 <_Z18SystemClock_Configv+0x114>)
 800067e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <_Z18SystemClock_Configv+0x114>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000690:	bf00      	nop
 8000692:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <_Z18SystemClock_Configv+0x114>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800069a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1f3      	bne.n	8000692 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	2302      	movs	r3, #2
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2340      	movs	r3, #64	@ 0x40
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ba:	2300      	movs	r3, #0
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006be:	2304      	movs	r3, #4
 80006c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006c2:	2328      	movs	r3, #40	@ 0x28
 80006c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d2:	230c      	movs	r3, #12
 80006d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f8dc 	bl	80018a0 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 80006f8:	f000 fae2 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	233f      	movs	r3, #63	@ 0x3f
 80006fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800070c:	2340      	movs	r3, #64	@ 0x40
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000710:	2340      	movs	r3, #64	@ 0x40
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000718:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800071a:	2340      	movs	r3, #64	@ 0x40
 800071c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2102      	movs	r1, #2
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fd16 	bl	8002154 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf14      	ite	ne
 800072e:	2301      	movne	r3, #1
 8000730:	2300      	moveq	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8000738:	f000 fac2 	bl	8000cc0 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3770      	adds	r7, #112	@ 0x70
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	58000400 	.word	0x58000400
 8000748:	58024800 	.word	0x58024800

0800074c <_ZL12MX_TIM1_Initv>:

static void MX_TIM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800076a:	4b28      	ldr	r3, [pc, #160]	@ (800080c <_ZL12MX_TIM1_Initv+0xc0>)
 800076c:	4a28      	ldr	r2, [pc, #160]	@ (8000810 <_ZL12MX_TIM1_Initv+0xc4>)
 800076e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 8000770:	4b26      	ldr	r3, [pc, #152]	@ (800080c <_ZL12MX_TIM1_Initv+0xc0>)
 8000772:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000776:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b24      	ldr	r3, [pc, #144]	@ (800080c <_ZL12MX_TIM1_Initv+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800077e:	4b23      	ldr	r3, [pc, #140]	@ (800080c <_ZL12MX_TIM1_Initv+0xc0>)
 8000780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000784:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b21      	ldr	r3, [pc, #132]	@ (800080c <_ZL12MX_TIM1_Initv+0xc0>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <_ZL12MX_TIM1_Initv+0xc0>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000792:	4b1e      	ldr	r3, [pc, #120]	@ (800080c <_ZL12MX_TIM1_Initv+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000798:	481c      	ldr	r0, [pc, #112]	@ (800080c <_ZL12MX_TIM1_Initv+0xc0>)
 800079a:	f002 f80b 	bl	80027b4 <HAL_TIM_Base_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <_ZL12MX_TIM1_Initv+0x66>
  {
    Error_Handler();
 80007ae:	f000 fa87 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	4619      	mov	r1, r3
 80007be:	4813      	ldr	r0, [pc, #76]	@ (800080c <_ZL12MX_TIM1_Initv+0xc0>)
 80007c0:	f002 fc1e 	bl	8003000 <HAL_TIM_ConfigClockSource>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf14      	ite	ne
 80007ca:	2301      	movne	r3, #1
 80007cc:	2300      	moveq	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 80007d4:	f000 fa74 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4808      	ldr	r0, [pc, #32]	@ (800080c <_ZL12MX_TIM1_Initv+0xc0>)
 80007ea:	f002 fff1 	bl	80037d0 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_ZL12MX_TIM1_Initv+0xb6>
  {
    Error_Handler();
 80007fe:	f000 fa5f 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	24000384 	.word	0x24000384
 8000810:	40010000 	.word	0x40010000

08000814 <_ZL12MX_TIM2_Initv>:

static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	@ 0x30
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000840:	4b48      	ldr	r3, [pc, #288]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 8000842:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000846:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000848:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084e:	4b45      	ldr	r3, [pc, #276]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000854:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 8000856:	f04f 32ff 	mov.w	r2, #4294967295
 800085a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085c:	4b41      	ldr	r3, [pc, #260]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000862:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000868:	483e      	ldr	r0, [pc, #248]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 800086a:	f001 ffa3 	bl	80027b4 <HAL_TIM_Base_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <_ZL12MX_TIM2_Initv+0x6e>
  {
    Error_Handler();
 800087e:	f000 fa1f 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000886:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	4619      	mov	r1, r3
 800088e:	4835      	ldr	r0, [pc, #212]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 8000890:	f002 fbb6 	bl	8003000 <HAL_TIM_ConfigClockSource>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf14      	ite	ne
 800089a:	2301      	movne	r3, #1
 800089c:	2300      	moveq	r3, #0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <_ZL12MX_TIM2_Initv+0x94>
  {
    Error_Handler();
 80008a4:	f000 fa0c 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008a8:	482e      	ldr	r0, [pc, #184]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 80008aa:	f002 f853 	bl	8002954 <HAL_TIM_IC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80008be:	f000 f9ff 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4824      	ldr	r0, [pc, #144]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 80008d2:	f002 ff7d 	bl	80037d0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bf14      	ite	ne
 80008dc:	2301      	movne	r3, #1
 80008de:	2300      	moveq	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 80008e6:	f000 f9eb 	bl	8000cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008ee:	2301      	movs	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	4619      	mov	r1, r3
 8000900:	4818      	ldr	r0, [pc, #96]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 8000902:	f002 fae0 	bl	8002ec6 <HAL_TIM_IC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	bf14      	ite	ne
 800090c:	2301      	movne	r3, #1
 800090e:	2300      	moveq	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <_ZL12MX_TIM2_Initv+0x106>
  {
    Error_Handler();
 8000916:	f000 f9d3 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2204      	movs	r2, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4810      	ldr	r0, [pc, #64]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 8000922:	f002 fad0 	bl	8002ec6 <HAL_TIM_IC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	bf14      	ite	ne
 800092c:	2301      	movne	r3, #1
 800092e:	2300      	moveq	r3, #0
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <_ZL12MX_TIM2_Initv+0x126>
  {
    Error_Handler();
 8000936:	f000 f9c3 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2208      	movs	r2, #8
 800093e:	4619      	mov	r1, r3
 8000940:	4808      	ldr	r0, [pc, #32]	@ (8000964 <_ZL12MX_TIM2_Initv+0x150>)
 8000942:	f002 fac0 	bl	8002ec6 <HAL_TIM_IC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <_ZL12MX_TIM2_Initv+0x146>
  {
    Error_Handler();
 8000956:	f000 f9b3 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3730      	adds	r7, #48	@ 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	240003d0 	.word	0x240003d0

08000968 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	@ 0x30
 800096c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
	  /* USER CODE BEGIN MX_GPIO_Init_1 */

	  /* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b61      	ldr	r3, [pc, #388]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	4a5f      	ldr	r2, [pc, #380]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098e:	4b5d      	ldr	r3, [pc, #372]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099c:	4b59      	ldr	r3, [pc, #356]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	4a58      	ldr	r2, [pc, #352]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 80009a4:	f043 0320 	orr.w	r3, r3, #32
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ac:	4b55      	ldr	r3, [pc, #340]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	f003 0320 	and.w	r3, r3, #32
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	4b52      	ldr	r3, [pc, #328]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	4a50      	ldr	r2, [pc, #320]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 80009c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	4a49      	ldr	r2, [pc, #292]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e8:	4b46      	ldr	r3, [pc, #280]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f6:	4b43      	ldr	r3, [pc, #268]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	4a41      	ldr	r2, [pc, #260]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 80009fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a06:	4b3f      	ldr	r3, [pc, #252]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a14:	4b3b      	ldr	r3, [pc, #236]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	4a3a      	ldr	r2, [pc, #232]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 8000a1c:	f043 0310 	orr.w	r3, r3, #16
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a24:	4b37      	ldr	r3, [pc, #220]	@ (8000b04 <_ZL12MX_GPIO_Initv+0x19c>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2170      	movs	r1, #112	@ 0x70
 8000a36:	4834      	ldr	r0, [pc, #208]	@ (8000b08 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000a38:	f000 fede 	bl	80017f8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2140      	movs	r1, #64	@ 0x40
 8000a40:	4832      	ldr	r0, [pc, #200]	@ (8000b0c <_ZL12MX_GPIO_Initv+0x1a4>)
 8000a42:	f000 fed9 	bl	80017f8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4831      	ldr	r0, [pc, #196]	@ (8000b10 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000a4c:	f000 fed4 	bl	80017f8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 8000a50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a54:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	482b      	ldr	r0, [pc, #172]	@ (8000b14 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000a66:	f000 fd17 	bl	8001498 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PF0 PF1 PF2 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a72:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a74:	2302      	movs	r3, #2
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
	  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4822      	ldr	r0, [pc, #136]	@ (8000b08 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000a80:	f000 fd0a 	bl	8001498 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PF4 PF5 PF6 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a84:	2370      	movs	r3, #112	@ 0x70
 8000a86:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481b      	ldr	r0, [pc, #108]	@ (8000b08 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000a9c:	f000 fcfc 	bl	8001498 <HAL_GPIO_Init>

	  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000aa0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aa4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4816      	ldr	r0, [pc, #88]	@ (8000b18 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000abe:	f000 fceb 	bl	8001498 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PG6 */
	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac2:	2340      	movs	r3, #64	@ 0x40
 8000ac4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <_ZL12MX_GPIO_Initv+0x1a4>)
 8000ada:	f000 fcdd 	bl	8001498 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4806      	ldr	r0, [pc, #24]	@ (8000b10 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000af6:	f000 fccf 	bl	8001498 <HAL_GPIO_Init>

	  /* USER CODE BEGIN MX_GPIO_Init_2 */

	  /* USER CODE END MX_GPIO_Init_2 */
}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	@ 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58021400 	.word	0x58021400
 8000b0c:	58021800 	.word	0x58021800
 8000b10:	58021000 	.word	0x58021000
 8000b14:	58020800 	.word	0x58020800
 8000b18:	58020c00 	.word	0x58020c00

08000b1c <_Z8useMotorbPt>:


}

void useMotor(bool mtr, uint16_t* pins)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
	if (!mtr)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f083 0301 	eor.w	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d00e      	beq.n	8000b52 <_Z8useMotorbPt+0x36>
	{
		pins[0] = GPIO_PIN_4;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	2210      	movs	r2, #16
 8000b38:	801a      	strh	r2, [r3, #0]
		pins[1] = GPIO_PIN_5;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	2220      	movs	r2, #32
 8000b40:	801a      	strh	r2, [r3, #0]
		pins[2] = GPIO_PIN_6;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2240      	movs	r2, #64	@ 0x40
 8000b48:	801a      	strh	r2, [r3, #0]
		pins[3] = GPIO_PIN_6;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	3306      	adds	r3, #6
 8000b4e:	2240      	movs	r2, #64	@ 0x40
 8000b50:	801a      	strh	r2, [r3, #0]

//	else
//	{
//		// other pins
//	}
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <_Z9moveMotorbbf>:

void moveMotor(bool motor, bool dir, float degrees)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	460a      	mov	r2, r1
 8000b6a:	ed87 0a00 	vstr	s0, [r7]
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	//convert degrees to steps where spr is steps per revolution
	int steps = (int)((degrees * SPR) / 360);
 8000b74:	edd7 7a00 	vldr	s15, [r7]
 8000b78:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8000cac <_Z9moveMotorbbf+0x14c>
 8000b7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b80:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8000cb0 <_Z9moveMotorbbf+0x150>
 8000b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b8c:	ee17 3a90 	vmov	r3, s15
 8000b90:	617b      	str	r3, [r7, #20]
	uint16_t motorPins[4];
	useMotor(motor, motorPins);
 8000b92:	f107 020c 	add.w	r2, r7, #12
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ffbe 	bl	8000b1c <_Z8useMotorbPt>


	if (!dir)
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	f083 0301 	eor.w	r3, r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d03d      	beq.n	8000c28 <_Z9moveMotorbbf+0xc8>
	{
		// set azimuth motor direction (0 - left, 1 - right)

		for (int i=0; i < steps; i++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bb0:	e035      	b.n	8000c1e <_Z9moveMotorbbf+0xbe>
		{
			for (int k=0; k < 8; k++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
 8000bb6:	e02c      	b.n	8000c12 <_Z9moveMotorbbf+0xb2>
			{
				// write motorPin to outputSeq
				HAL_GPIO_WritePin(GPIOF, motorPins[0], outputSeq[i][0]); // assign to specific GPIO for IN1
 8000bb8:	89b9      	ldrh	r1, [r7, #12]
 8000bba:	4a3e      	ldr	r2, [pc, #248]	@ (8000cb4 <_Z9moveMotorbbf+0x154>)
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	483c      	ldr	r0, [pc, #240]	@ (8000cb8 <_Z9moveMotorbbf+0x158>)
 8000bc6:	f000 fe17 	bl	80017f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, motorPins[1], outputSeq[i][1]); // assign to specific GPIO for IN2
 8000bca:	89f9      	ldrh	r1, [r7, #14]
 8000bcc:	4a39      	ldr	r2, [pc, #228]	@ (8000cb4 <_Z9moveMotorbbf+0x154>)
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4837      	ldr	r0, [pc, #220]	@ (8000cb8 <_Z9moveMotorbbf+0x158>)
 8000bda:	f000 fe0d 	bl	80017f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, motorPins[2], outputSeq[i][2]); // assign to specific GPIO for IN3
 8000bde:	8a39      	ldrh	r1, [r7, #16]
 8000be0:	4a34      	ldr	r2, [pc, #208]	@ (8000cb4 <_Z9moveMotorbbf+0x154>)
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	789b      	ldrb	r3, [r3, #2]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4832      	ldr	r0, [pc, #200]	@ (8000cb8 <_Z9moveMotorbbf+0x158>)
 8000bee:	f000 fe03 	bl	80017f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOG, motorPins[3], outputSeq[i][3]); // assign to specific GPIO for IN4
 8000bf2:	8a79      	ldrh	r1, [r7, #18]
 8000bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb4 <_Z9moveMotorbbf+0x154>)
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	78db      	ldrb	r3, [r3, #3]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	482e      	ldr	r0, [pc, #184]	@ (8000cbc <_Z9moveMotorbbf+0x15c>)
 8000c02:	f000 fdf9 	bl	80017f8 <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8000c06:	2032      	movs	r0, #50	@ 0x32
 8000c08:	f000 fb06 	bl	8001218 <HAL_Delay>
			for (int k=0; k < 8; k++)
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	ddcf      	ble.n	8000bb8 <_Z9moveMotorbbf+0x58>
		for (int i=0; i < steps; i++)
 8000c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dbc5      	blt.n	8000bb2 <_Z9moveMotorbbf+0x52>
				HAL_GPIO_WritePin(GPIOG, motorPins[3], outputSeq[i][3]); // assign to specific GPIO for IN4
				HAL_Delay(50);
			}
		}
	}
}
 8000c26:	e03c      	b.n	8000ca2 <_Z9moveMotorbbf+0x142>
		for (int i=0; i < steps; i++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	e035      	b.n	8000c9a <_Z9moveMotorbbf+0x13a>
			for (int k=8; k > 0; k--)
 8000c2e:	2308      	movs	r3, #8
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	e02c      	b.n	8000c8e <_Z9moveMotorbbf+0x12e>
				HAL_GPIO_WritePin(GPIOF, motorPins[0], outputSeq[i][0]); // assign to specific GPIO for IN1
 8000c34:	89b9      	ldrh	r1, [r7, #12]
 8000c36:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb4 <_Z9moveMotorbbf+0x154>)
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	481d      	ldr	r0, [pc, #116]	@ (8000cb8 <_Z9moveMotorbbf+0x158>)
 8000c42:	f000 fdd9 	bl	80017f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, motorPins[1], outputSeq[i][1]); // assign to specific GPIO for IN2
 8000c46:	89f9      	ldrh	r1, [r7, #14]
 8000c48:	4a1a      	ldr	r2, [pc, #104]	@ (8000cb4 <_Z9moveMotorbbf+0x154>)
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4818      	ldr	r0, [pc, #96]	@ (8000cb8 <_Z9moveMotorbbf+0x158>)
 8000c56:	f000 fdcf 	bl	80017f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, motorPins[2], outputSeq[i][2]); // assign to specific GPIO for IN3
 8000c5a:	8a39      	ldrh	r1, [r7, #16]
 8000c5c:	4a15      	ldr	r2, [pc, #84]	@ (8000cb4 <_Z9moveMotorbbf+0x154>)
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	789b      	ldrb	r3, [r3, #2]
 8000c66:	461a      	mov	r2, r3
 8000c68:	4813      	ldr	r0, [pc, #76]	@ (8000cb8 <_Z9moveMotorbbf+0x158>)
 8000c6a:	f000 fdc5 	bl	80017f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOG, motorPins[3], outputSeq[i][3]); // assign to specific GPIO for IN4
 8000c6e:	8a79      	ldrh	r1, [r7, #18]
 8000c70:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <_Z9moveMotorbbf+0x154>)
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	78db      	ldrb	r3, [r3, #3]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	480f      	ldr	r0, [pc, #60]	@ (8000cbc <_Z9moveMotorbbf+0x15c>)
 8000c7e:	f000 fdbb 	bl	80017f8 <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8000c82:	2032      	movs	r0, #50	@ 0x32
 8000c84:	f000 fac8 	bl	8001218 <HAL_Delay>
			for (int k=8; k > 0; k--)
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	dccf      	bgt.n	8000c34 <_Z9moveMotorbbf+0xd4>
		for (int i=0; i < steps; i++)
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	3301      	adds	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dbc5      	blt.n	8000c2e <_Z9moveMotorbbf+0xce>
}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	@ 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	43000000 	.word	0x43000000
 8000cb0:	43b40000 	.word	0x43b40000
 8000cb4:	24000000 	.word	0x24000000
 8000cb8:	58021400 	.word	0x58021400
 8000cbc:	58021800 	.word	0x58021800

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <Error_Handler+0x8>

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <HAL_MspInit+0x30>)
 8000cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cd8:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <HAL_MspInit+0x30>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x30>)
 8000ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	58024400 	.word	0x58024400

08000d00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a28      	ldr	r2, [pc, #160]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xc0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d117      	bne.n	8000d52 <HAL_TIM_Base_MspInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d22:	4b28      	ldr	r3, [pc, #160]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d28:	4a26      	ldr	r2, [pc, #152]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d32:	4b24      	ldr	r3, [pc, #144]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2019      	movs	r0, #25
 8000d46:	f000 fb72 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d4a:	2019      	movs	r0, #25
 8000d4c:	f000 fb89 	bl	8001462 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d50:	e032      	b.n	8000db8 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d5a:	d12d      	bne.n	8000db8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5c:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d62:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000da8:	2301      	movs	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000db4:	f000 fb70 	bl	8001498 <HAL_GPIO_Init>
}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	@ 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	58020000 	.word	0x58020000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <MemManage_Handler+0x4>

08000de4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e22:	f000 f9d9 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <TIM1_UP_IRQHandler+0x10>)
 8000e32:	f001 ff41 	bl	8002cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	24000384 	.word	0x24000384

08000e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e44:	4b43      	ldr	r3, [pc, #268]	@ (8000f54 <SystemInit+0x114>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4a:	4a42      	ldr	r2, [pc, #264]	@ (8000f54 <SystemInit+0x114>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e54:	4b40      	ldr	r3, [pc, #256]	@ (8000f58 <SystemInit+0x118>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 030f 	and.w	r3, r3, #15
 8000e5c:	2b06      	cmp	r3, #6
 8000e5e:	d807      	bhi.n	8000e70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e60:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <SystemInit+0x118>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 030f 	bic.w	r3, r3, #15
 8000e68:	4a3b      	ldr	r2, [pc, #236]	@ (8000f58 <SystemInit+0x118>)
 8000e6a:	f043 0307 	orr.w	r3, r3, #7
 8000e6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e70:	4b3a      	ldr	r3, [pc, #232]	@ (8000f5c <SystemInit+0x11c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a39      	ldr	r2, [pc, #228]	@ (8000f5c <SystemInit+0x11c>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e7c:	4b37      	ldr	r3, [pc, #220]	@ (8000f5c <SystemInit+0x11c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e82:	4b36      	ldr	r3, [pc, #216]	@ (8000f5c <SystemInit+0x11c>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4935      	ldr	r1, [pc, #212]	@ (8000f5c <SystemInit+0x11c>)
 8000e88:	4b35      	ldr	r3, [pc, #212]	@ (8000f60 <SystemInit+0x120>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e8e:	4b32      	ldr	r3, [pc, #200]	@ (8000f58 <SystemInit+0x118>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <SystemInit+0x118>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f023 030f 	bic.w	r3, r3, #15
 8000ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f58 <SystemInit+0x118>)
 8000ea4:	f043 0307 	orr.w	r3, r3, #7
 8000ea8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <SystemInit+0x11c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <SystemInit+0x11c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000eb6:	4b29      	ldr	r3, [pc, #164]	@ (8000f5c <SystemInit+0x11c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <SystemInit+0x11c>)
 8000ebe:	4a29      	ldr	r2, [pc, #164]	@ (8000f64 <SystemInit+0x124>)
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <SystemInit+0x11c>)
 8000ec4:	4a28      	ldr	r2, [pc, #160]	@ (8000f68 <SystemInit+0x128>)
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <SystemInit+0x11c>)
 8000eca:	4a28      	ldr	r2, [pc, #160]	@ (8000f6c <SystemInit+0x12c>)
 8000ecc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <SystemInit+0x11c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <SystemInit+0x11c>)
 8000ed6:	4a25      	ldr	r2, [pc, #148]	@ (8000f6c <SystemInit+0x12c>)
 8000ed8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <SystemInit+0x11c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <SystemInit+0x11c>)
 8000ee2:	4a22      	ldr	r2, [pc, #136]	@ (8000f6c <SystemInit+0x12c>)
 8000ee4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <SystemInit+0x11c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <SystemInit+0x11c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f5c <SystemInit+0x11c>)
 8000ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <SystemInit+0x11c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <SystemInit+0x130>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <SystemInit+0x134>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f0a:	d202      	bcs.n	8000f12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <SystemInit+0x138>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000f12:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <SystemInit+0x11c>)
 8000f14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d113      	bne.n	8000f48 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <SystemInit+0x11c>)
 8000f22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f26:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <SystemInit+0x11c>)
 8000f28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f2c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <SystemInit+0x13c>)
 8000f32:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f36:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <SystemInit+0x11c>)
 8000f3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f3e:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <SystemInit+0x11c>)
 8000f40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f44:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	52002000 	.word	0x52002000
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f64:	02020200 	.word	0x02020200
 8000f68:	01ff0000 	.word	0x01ff0000
 8000f6c:	01010280 	.word	0x01010280
 8000f70:	5c001000 	.word	0x5c001000
 8000f74:	ffff0000 	.word	0xffff0000
 8000f78:	51008108 	.word	0x51008108
 8000f7c:	52004000 	.word	0x52004000

08000f80 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <ExitRun0Mode+0x2c>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <ExitRun0Mode+0x2c>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f90:	bf00      	nop
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <ExitRun0Mode+0x2c>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f9      	beq.n	8000f92 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	58024800 	.word	0x58024800

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000fec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000fb4:	f7ff ffe4 	bl	8000f80 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff ff42 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f002 fca9 	bl	8003938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fa1b 	bl	8000420 <main>
  bx  lr
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff4:	24000040 	.word	0x24000040
  ldr r2, =_sidata
 8000ff8:	080039bc 	.word	0x080039bc
  ldr r2, =_sbss
 8000ffc:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001000:	24000430 	.word	0x24000430

08001004 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC3_IRQHandler>
	...

08001008 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	@ 0x30
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d009      	beq.n	8001030 <BSP_LED_Init+0x28>
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d006      	beq.n	8001030 <BSP_LED_Init+0x28>
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d003      	beq.n	8001030 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001028:	f06f 0301 	mvn.w	r3, #1
 800102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800102e:	e055      	b.n	80010dc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001036:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <BSP_LED_Init+0xe0>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	4a2a      	ldr	r2, [pc, #168]	@ (80010e8 <BSP_LED_Init+0xe0>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001046:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <BSP_LED_Init+0xe0>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	e021      	b.n	800109a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d10f      	bne.n	800107c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <BSP_LED_Init+0xe0>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	4a21      	ldr	r2, [pc, #132]	@ (80010e8 <BSP_LED_Init+0xe0>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106c:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <BSP_LED_Init+0xe0>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	e00e      	b.n	800109a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <BSP_LED_Init+0xe0>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	4a19      	ldr	r2, [pc, #100]	@ (80010e8 <BSP_LED_Init+0xe0>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <BSP_LED_Init+0xe0>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4a13      	ldr	r2, [pc, #76]	@ (80010ec <BSP_LED_Init+0xe4>)
 800109e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4a0f      	ldr	r2, [pc, #60]	@ (80010f0 <BSP_LED_Init+0xe8>)
 80010b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b8:	f107 0218 	add.w	r2, r7, #24
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f9ea 	bl	8001498 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <BSP_LED_Init+0xe8>)
 80010c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <BSP_LED_Init+0xe4>)
 80010d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	f000 fb8e 	bl	80017f8 <HAL_GPIO_WritePin>
  }

  return ret;
 80010dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3730      	adds	r7, #48	@ 0x30
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	58024400 	.word	0x58024400
 80010ec:	080039a8 	.word	0x080039a8
 80010f0:	2400002c 	.word	0x2400002c

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fa:	2003      	movs	r0, #3
 80010fc:	f000 f98c 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001100:	f001 f9de 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8001104:	4602      	mov	r2, r0
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_Init+0x68>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	4913      	ldr	r1, [pc, #76]	@ (8001160 <HAL_Init+0x6c>)
 8001112:	5ccb      	ldrb	r3, [r1, r3]
 8001114:	f003 031f 	and.w	r3, r3, #31
 8001118:	fa22 f303 	lsr.w	r3, r2, r3
 800111c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <HAL_Init+0x68>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <HAL_Init+0x6c>)
 8001128:	5cd3      	ldrb	r3, [r2, r3]
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <HAL_Init+0x70>)
 8001136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001138:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <HAL_Init+0x74>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f814 	bl	800116c <HAL_InitTick>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e002      	b.n	8001154 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800114e:	f7ff fdbd 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	58024400 	.word	0x58024400
 8001160:	08003998 	.word	0x08003998
 8001164:	24000028 	.word	0x24000028
 8001168:	24000024 	.word	0x24000024

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_InitTick+0x60>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e021      	b.n	80011c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <HAL_InitTick+0x64>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_InitTick+0x60>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f971 	bl	800147e <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f93b 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <HAL_InitTick+0x68>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2400003c 	.word	0x2400003c
 80011d0:	24000024 	.word	0x24000024
 80011d4:	24000038 	.word	0x24000038

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	2400003c 	.word	0x2400003c
 80011fc:	2400042c 	.word	0x2400042c

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	2400042c 	.word	0x2400042c

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff ffee 	bl	8001200 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffde 	bl	8001200 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2400003c 	.word	0x2400003c

08001260 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <HAL_GetREVID+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	0c1b      	lsrs	r3, r3, #16
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	5c001000 	.word	0x5c001000

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x40>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x40>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00
 80012bc:	05fa0000 	.word	0x05fa0000

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4907      	ldr	r1, [pc, #28]	@ (8001314 <__NVIC_EnableIRQ+0x38>)
 80012f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	@ (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	@ (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	@ 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	@ 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff29 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff40 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff90 	bl	800136c <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5f 	bl	8001318 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff33 	bl	80012dc <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa4 	bl	80013d4 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	@ 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014a6:	4b89      	ldr	r3, [pc, #548]	@ (80016cc <HAL_GPIO_Init+0x234>)
 80014a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014aa:	e194      	b.n	80017d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8186 	beq.w	80017d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d005      	beq.n	80014dc <HAL_GPIO_Init+0x44>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d130      	bne.n	800153e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001512:	2201      	movs	r2, #1
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f003 0201 	and.w	r2, r3, #1
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b03      	cmp	r3, #3
 8001548:	d017      	beq.n	800157a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d123      	bne.n	80015ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	08da      	lsrs	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3208      	adds	r2, #8
 800158e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	69b9      	ldr	r1, [r7, #24]
 80015ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	2203      	movs	r2, #3
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0203 	and.w	r2, r3, #3
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 80e0 	beq.w	80017d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001610:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <HAL_GPIO_Init+0x238>)
 8001612:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001616:	4a2e      	ldr	r2, [pc, #184]	@ (80016d0 <HAL_GPIO_Init+0x238>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001620:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <HAL_GPIO_Init+0x238>)
 8001622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162e:	4a29      	ldr	r2, [pc, #164]	@ (80016d4 <HAL_GPIO_Init+0x23c>)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a20      	ldr	r2, [pc, #128]	@ (80016d8 <HAL_GPIO_Init+0x240>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d052      	beq.n	8001700 <HAL_GPIO_Init+0x268>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <HAL_GPIO_Init+0x244>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <HAL_GPIO_Init+0x22e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a1e      	ldr	r2, [pc, #120]	@ (80016e0 <HAL_GPIO_Init+0x248>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d02b      	beq.n	80016c2 <HAL_GPIO_Init+0x22a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a1d      	ldr	r2, [pc, #116]	@ (80016e4 <HAL_GPIO_Init+0x24c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d025      	beq.n	80016be <HAL_GPIO_Init+0x226>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a1c      	ldr	r2, [pc, #112]	@ (80016e8 <HAL_GPIO_Init+0x250>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01f      	beq.n	80016ba <HAL_GPIO_Init+0x222>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a1b      	ldr	r2, [pc, #108]	@ (80016ec <HAL_GPIO_Init+0x254>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d019      	beq.n	80016b6 <HAL_GPIO_Init+0x21e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a1a      	ldr	r2, [pc, #104]	@ (80016f0 <HAL_GPIO_Init+0x258>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x21a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a19      	ldr	r2, [pc, #100]	@ (80016f4 <HAL_GPIO_Init+0x25c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x216>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a18      	ldr	r2, [pc, #96]	@ (80016f8 <HAL_GPIO_Init+0x260>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x212>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a17      	ldr	r2, [pc, #92]	@ (80016fc <HAL_GPIO_Init+0x264>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x20e>
 80016a2:	2309      	movs	r3, #9
 80016a4:	e02d      	b.n	8001702 <HAL_GPIO_Init+0x26a>
 80016a6:	230a      	movs	r3, #10
 80016a8:	e02b      	b.n	8001702 <HAL_GPIO_Init+0x26a>
 80016aa:	2308      	movs	r3, #8
 80016ac:	e029      	b.n	8001702 <HAL_GPIO_Init+0x26a>
 80016ae:	2307      	movs	r3, #7
 80016b0:	e027      	b.n	8001702 <HAL_GPIO_Init+0x26a>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e025      	b.n	8001702 <HAL_GPIO_Init+0x26a>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e023      	b.n	8001702 <HAL_GPIO_Init+0x26a>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e021      	b.n	8001702 <HAL_GPIO_Init+0x26a>
 80016be:	2303      	movs	r3, #3
 80016c0:	e01f      	b.n	8001702 <HAL_GPIO_Init+0x26a>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e01d      	b.n	8001702 <HAL_GPIO_Init+0x26a>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e01b      	b.n	8001702 <HAL_GPIO_Init+0x26a>
 80016ca:	bf00      	nop
 80016cc:	58000080 	.word	0x58000080
 80016d0:	58024400 	.word	0x58024400
 80016d4:	58000400 	.word	0x58000400
 80016d8:	58020000 	.word	0x58020000
 80016dc:	58020400 	.word	0x58020400
 80016e0:	58020800 	.word	0x58020800
 80016e4:	58020c00 	.word	0x58020c00
 80016e8:	58021000 	.word	0x58021000
 80016ec:	58021400 	.word	0x58021400
 80016f0:	58021800 	.word	0x58021800
 80016f4:	58021c00 	.word	0x58021c00
 80016f8:	58022000 	.word	0x58022000
 80016fc:	58022400 	.word	0x58022400
 8001700:	2300      	movs	r3, #0
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001712:	4938      	ldr	r1, [pc, #224]	@ (80017f4 <HAL_GPIO_Init+0x35c>)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001746:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	3301      	adds	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f ae63 	bne.w	80014ac <HAL_GPIO_Init+0x14>
  }
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	3724      	adds	r7, #36	@ 0x24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	58000400 	.word	0x58000400

080017f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
 8001804:	4613      	mov	r3, r2
 8001806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001808:	787b      	ldrb	r3, [r7, #1]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	041a      	lsls	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	619a      	str	r2, [r3, #24]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_PWREx_ConfigSupply+0x70>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b04      	cmp	r3, #4
 800183e:	d00a      	beq.n	8001856 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001840:	4b16      	ldr	r3, [pc, #88]	@ (800189c <HAL_PWREx_ConfigSupply+0x70>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	d001      	beq.n	8001852 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e01f      	b.n	8001892 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e01d      	b.n	8001892 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_PWREx_ConfigSupply+0x70>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f023 0207 	bic.w	r2, r3, #7
 800185e:	490f      	ldr	r1, [pc, #60]	@ (800189c <HAL_PWREx_ConfigSupply+0x70>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4313      	orrs	r3, r2
 8001864:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001866:	f7ff fccb 	bl	8001200 <HAL_GetTick>
 800186a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800186c:	e009      	b.n	8001882 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800186e:	f7ff fcc7 	bl	8001200 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800187c:	d901      	bls.n	8001882 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e007      	b.n	8001892 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_PWREx_ConfigSupply+0x70>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800188a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800188e:	d1ee      	bne.n	800186e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	58024800 	.word	0x58024800

080018a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	@ 0x30
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f000 bc48 	b.w	8002144 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8088 	beq.w	80019d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c2:	4b99      	ldr	r3, [pc, #612]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018cc:	4b96      	ldr	r3, [pc, #600]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 80018ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	d007      	beq.n	80018e8 <HAL_RCC_OscConfig+0x48>
 80018d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018da:	2b18      	cmp	r3, #24
 80018dc:	d111      	bne.n	8001902 <HAL_RCC_OscConfig+0x62>
 80018de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d06d      	beq.n	80019d0 <HAL_RCC_OscConfig+0x130>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d169      	bne.n	80019d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	f000 bc21 	b.w	8002144 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x7a>
 800190c:	4b86      	ldr	r3, [pc, #536]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a85      	ldr	r2, [pc, #532]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e02e      	b.n	8001978 <HAL_RCC_OscConfig+0xd8>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x9c>
 8001922:	4b81      	ldr	r3, [pc, #516]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a80      	ldr	r2, [pc, #512]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7d      	ldr	r2, [pc, #500]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001934:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e01d      	b.n	8001978 <HAL_RCC_OscConfig+0xd8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0xc0>
 8001946:	4b78      	ldr	r3, [pc, #480]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a77      	ldr	r2, [pc, #476]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b75      	ldr	r3, [pc, #468]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a74      	ldr	r2, [pc, #464]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0xd8>
 8001960:	4b71      	ldr	r3, [pc, #452]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a70      	ldr	r2, [pc, #448]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6d      	ldr	r2, [pc, #436]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fc3e 	bl	8001200 <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fc3a 	bl	8001200 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e3d4      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800199a:	4b63      	ldr	r3, [pc, #396]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0xe8>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fc2a 	bl	8001200 <HAL_GetTick>
 80019ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fc26 	bl	8001200 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	@ 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e3c0      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019c2:	4b59      	ldr	r3, [pc, #356]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x110>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80ca 	beq.w	8001b74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e0:	4b51      	ldr	r3, [pc, #324]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 80019ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <HAL_RCC_OscConfig+0x166>
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	2b18      	cmp	r3, #24
 80019fa:	d156      	bne.n	8001aaa <HAL_RCC_OscConfig+0x20a>
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d151      	bne.n	8001aaa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a06:	4b48      	ldr	r3, [pc, #288]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_RCC_OscConfig+0x17e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e392      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a1e:	4b42      	ldr	r3, [pc, #264]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0219 	bic.w	r2, r3, #25
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	493f      	ldr	r1, [pc, #252]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff fbe6 	bl	8001200 <HAL_GetTick>
 8001a34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a38:	f7ff fbe2 	bl	8001200 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e37c      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a4a:	4b37      	ldr	r3, [pc, #220]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a56:	f7ff fc03 	bl	8001260 <HAL_GetREVID>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d817      	bhi.n	8001a94 <HAL_RCC_OscConfig+0x1f4>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b40      	cmp	r3, #64	@ 0x40
 8001a6a:	d108      	bne.n	8001a7e <HAL_RCC_OscConfig+0x1de>
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a74:	4a2c      	ldr	r2, [pc, #176]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a7c:	e07a      	b.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	031b      	lsls	r3, r3, #12
 8001a8c:	4926      	ldr	r1, [pc, #152]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a92:	e06f      	b.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	4921      	ldr	r1, [pc, #132]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	e064      	b.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d047      	beq.n	8001b42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0219 	bic.w	r2, r3, #25
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	491a      	ldr	r1, [pc, #104]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb9c 	bl	8001200 <HAL_GetTick>
 8001ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001acc:	f7ff fb98 	bl	8001200 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e332      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	f7ff fbb9 	bl	8001260 <HAL_GetREVID>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d819      	bhi.n	8001b2c <HAL_RCC_OscConfig+0x28c>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b40      	cmp	r3, #64	@ 0x40
 8001afe:	d108      	bne.n	8001b12 <HAL_RCC_OscConfig+0x272>
 8001b00:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b08:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b0e:	6053      	str	r3, [r2, #4]
 8001b10:	e030      	b.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	031b      	lsls	r3, r3, #12
 8001b20:	4901      	ldr	r1, [pc, #4]	@ (8001b28 <HAL_RCC_OscConfig+0x288>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
 8001b26:	e025      	b.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	4b9a      	ldr	r3, [pc, #616]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	061b      	lsls	r3, r3, #24
 8001b3a:	4997      	ldr	r1, [pc, #604]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
 8001b40:	e018      	b.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	4b95      	ldr	r3, [pc, #596]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a94      	ldr	r2, [pc, #592]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb57 	bl	8001200 <HAL_GetTick>
 8001b52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b56:	f7ff fb53 	bl	8001200 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e2ed      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b68:	4b8b      	ldr	r3, [pc, #556]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80a9 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b82:	4b85      	ldr	r3, [pc, #532]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b8c:	4b82      	ldr	r3, [pc, #520]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d007      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x308>
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b18      	cmp	r3, #24
 8001b9c:	d13a      	bne.n	8001c14 <HAL_RCC_OscConfig+0x374>
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d135      	bne.n	8001c14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x320>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b80      	cmp	r3, #128	@ 0x80
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e2c1      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bc0:	f7ff fb4e 	bl	8001260 <HAL_GetREVID>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d817      	bhi.n	8001bfe <HAL_RCC_OscConfig+0x35e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d108      	bne.n	8001be8 <HAL_RCC_OscConfig+0x348>
 8001bd6:	4b70      	ldr	r3, [pc, #448]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001bde:	4a6e      	ldr	r2, [pc, #440]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001be4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001be6:	e075      	b.n	8001cd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001be8:	4b6b      	ldr	r3, [pc, #428]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	069b      	lsls	r3, r3, #26
 8001bf6:	4968      	ldr	r1, [pc, #416]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bfc:	e06a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bfe:	4b66      	ldr	r3, [pc, #408]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	061b      	lsls	r3, r3, #24
 8001c0c:	4962      	ldr	r1, [pc, #392]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c12:	e05f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d042      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a5d      	ldr	r2, [pc, #372]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff faea 	bl	8001200 <HAL_GetTick>
 8001c2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c30:	f7ff fae6 	bl	8001200 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e280      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c42:	4b55      	ldr	r3, [pc, #340]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c4e:	f7ff fb07 	bl	8001260 <HAL_GetREVID>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d817      	bhi.n	8001c8c <HAL_RCC_OscConfig+0x3ec>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d108      	bne.n	8001c76 <HAL_RCC_OscConfig+0x3d6>
 8001c64:	4b4c      	ldr	r3, [pc, #304]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c72:	6053      	str	r3, [r2, #4]
 8001c74:	e02e      	b.n	8001cd4 <HAL_RCC_OscConfig+0x434>
 8001c76:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	069b      	lsls	r3, r3, #26
 8001c84:	4944      	ldr	r1, [pc, #272]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
 8001c8a:	e023      	b.n	8001cd4 <HAL_RCC_OscConfig+0x434>
 8001c8c:	4b42      	ldr	r3, [pc, #264]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	493f      	ldr	r1, [pc, #252]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
 8001ca0:	e018      	b.n	8001cd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001ca8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff faa7 	bl	8001200 <HAL_GetTick>
 8001cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cb6:	f7ff faa3 	bl	8001200 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e23d      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cc8:	4b33      	ldr	r3, [pc, #204]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d036      	beq.n	8001d4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d019      	beq.n	8001d1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cec:	4a2a      	ldr	r2, [pc, #168]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fa84 	bl	8001200 <HAL_GetTick>
 8001cf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fa80 	bl	8001200 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e21a      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x45c>
 8001d1a:	e018      	b.n	8001d4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d20:	4a1d      	ldr	r2, [pc, #116]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7ff fa6a 	bl	8001200 <HAL_GetTick>
 8001d2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff fa66 	bl	8001200 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e200      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d039      	beq.n	8001dce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fa47 	bl	8001200 <HAL_GetTick>
 8001d72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d76:	f7ff fa43 	bl	8001200 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1dd      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x4d6>
 8001d94:	e01b      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
 8001d96:	bf00      	nop
 8001d98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d9c:	4b9b      	ldr	r3, [pc, #620]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a9a      	ldr	r2, [pc, #616]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001da2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001da8:	f7ff fa2a 	bl	8001200 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db0:	f7ff fa26 	bl	8001200 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1c0      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dc2:	4b92      	ldr	r3, [pc, #584]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8081 	beq.w	8001ede <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a8b      	ldr	r2, [pc, #556]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001de8:	f7ff fa0a 	bl	8001200 <HAL_GetTick>
 8001dec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df0:	f7ff fa06 	bl	8001200 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	@ 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1a0      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e02:	4b83      	ldr	r3, [pc, #524]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d106      	bne.n	8001e24 <HAL_RCC_OscConfig+0x584>
 8001e16:	4b7d      	ldr	r3, [pc, #500]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e22:	e02d      	b.n	8001e80 <HAL_RCC_OscConfig+0x5e0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10c      	bne.n	8001e46 <HAL_RCC_OscConfig+0x5a6>
 8001e2c:	4b77      	ldr	r3, [pc, #476]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e30:	4a76      	ldr	r2, [pc, #472]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e38:	4b74      	ldr	r3, [pc, #464]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a73      	ldr	r2, [pc, #460]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e44:	e01c      	b.n	8001e80 <HAL_RCC_OscConfig+0x5e0>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c8>
 8001e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e52:	4a6e      	ldr	r2, [pc, #440]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5a:	4b6c      	ldr	r3, [pc, #432]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	4a6b      	ldr	r2, [pc, #428]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0x5e0>
 8001e68:	4b68      	ldr	r3, [pc, #416]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6c:	4a67      	ldr	r2, [pc, #412]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e74:	4b65      	ldr	r3, [pc, #404]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	4a64      	ldr	r2, [pc, #400]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001e7a:	f023 0304 	bic.w	r3, r3, #4
 8001e7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d015      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7ff f9ba 	bl	8001200 <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7ff f9b6 	bl	8001200 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e14e      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ea6:	4b59      	ldr	r3, [pc, #356]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0ee      	beq.n	8001e90 <HAL_RCC_OscConfig+0x5f0>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f9a4 	bl	8001200 <HAL_GetTick>
 8001eb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f9a0 	bl	8001200 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e138      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ee      	bne.n	8001ebc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 812d 	beq.w	8002142 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ee8:	4b48      	ldr	r3, [pc, #288]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ef0:	2b18      	cmp	r3, #24
 8001ef2:	f000 80bd 	beq.w	8002070 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	f040 809e 	bne.w	800203c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4b42      	ldr	r3, [pc, #264]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a41      	ldr	r2, [pc, #260]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f978 	bl	8001200 <HAL_GetTick>
 8001f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff f974 	bl	8001200 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e10e      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f26:	4b39      	ldr	r3, [pc, #228]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f32:	4b36      	ldr	r3, [pc, #216]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f36:	4b37      	ldr	r3, [pc, #220]	@ (8002014 <HAL_RCC_OscConfig+0x774>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	430a      	orrs	r2, r1
 8001f46:	4931      	ldr	r1, [pc, #196]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	3b01      	subs	r3, #1
 8001f52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	025b      	lsls	r3, r3, #9
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f66:	3b01      	subs	r3, #1
 8001f68:	041b      	lsls	r3, r3, #16
 8001f6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f74:	3b01      	subs	r3, #1
 8001f76:	061b      	lsls	r3, r3, #24
 8001f78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001f7c:	4923      	ldr	r1, [pc, #140]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f82:	4b22      	ldr	r3, [pc, #136]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f86:	4a21      	ldr	r2, [pc, #132]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f92:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <HAL_RCC_OscConfig+0x778>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f9a:	00d2      	lsls	r2, r2, #3
 8001f9c:	491b      	ldr	r1, [pc, #108]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	f023 020c 	bic.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	4917      	ldr	r1, [pc, #92]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001fb4:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	f023 0202 	bic.w	r2, r3, #2
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc0:	4912      	ldr	r1, [pc, #72]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fca:	4a10      	ldr	r2, [pc, #64]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fee:	4a07      	ldr	r2, [pc, #28]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff6:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a04      	ldr	r2, [pc, #16]	@ (800200c <HAL_RCC_OscConfig+0x76c>)
 8001ffc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff f8fd 	bl	8001200 <HAL_GetTick>
 8002006:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002008:	e011      	b.n	800202e <HAL_RCC_OscConfig+0x78e>
 800200a:	bf00      	nop
 800200c:	58024400 	.word	0x58024400
 8002010:	58024800 	.word	0x58024800
 8002014:	fffffc0c 	.word	0xfffffc0c
 8002018:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff f8f0 	bl	8001200 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e08a      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800202e:	4b47      	ldr	r3, [pc, #284]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x77c>
 800203a:	e082      	b.n	8002142 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b43      	ldr	r3, [pc, #268]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a42      	ldr	r2, [pc, #264]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 8002042:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff f8da 	bl	8001200 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff f8d6 	bl	8001200 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e070      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002062:	4b3a      	ldr	r3, [pc, #232]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x7b0>
 800206e:	e068      	b.n	8002142 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002070:	4b36      	ldr	r3, [pc, #216]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 8002072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002074:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002076:	4b35      	ldr	r3, [pc, #212]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	2b01      	cmp	r3, #1
 8002082:	d031      	beq.n	80020e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f003 0203 	and.w	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d12a      	bne.n	80020e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d122      	bne.n	80020e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d11a      	bne.n	80020e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	0a5b      	lsrs	r3, r3, #9
 80020b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d111      	bne.n	80020e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	0c1b      	lsrs	r3, r3, #16
 80020c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d108      	bne.n	80020e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	0e1b      	lsrs	r3, r3, #24
 80020da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e02b      	b.n	8002144 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80020ec:	4b17      	ldr	r3, [pc, #92]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 80020ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d01f      	beq.n	8002142 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	4a11      	ldr	r2, [pc, #68]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800210e:	f7ff f877 	bl	8001200 <HAL_GetTick>
 8002112:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002114:	bf00      	nop
 8002116:	f7ff f873 	bl	8001200 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	4293      	cmp	r3, r2
 8002120:	d0f9      	beq.n	8002116 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002122:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 8002124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002126:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <HAL_RCC_OscConfig+0x8b0>)
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800212e:	00d2      	lsls	r2, r2, #3
 8002130:	4906      	ldr	r1, [pc, #24]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 8002132:	4313      	orrs	r3, r2
 8002134:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002136:	4b05      	ldr	r3, [pc, #20]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	4a04      	ldr	r2, [pc, #16]	@ (800214c <HAL_RCC_OscConfig+0x8ac>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3730      	adds	r7, #48	@ 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	58024400 	.word	0x58024400
 8002150:	ffff0007 	.word	0xffff0007

08002154 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e19c      	b.n	80024a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002168:	4b8a      	ldr	r3, [pc, #552]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d910      	bls.n	8002198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b87      	ldr	r3, [pc, #540]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 020f 	bic.w	r2, r3, #15
 800217e:	4985      	ldr	r1, [pc, #532]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b83      	ldr	r3, [pc, #524]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e184      	b.n	80024a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d010      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d908      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021b4:	4b78      	ldr	r3, [pc, #480]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	4975      	ldr	r1, [pc, #468]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d010      	beq.n	80021f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	4b70      	ldr	r3, [pc, #448]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021de:	429a      	cmp	r2, r3
 80021e0:	d908      	bls.n	80021f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	496a      	ldr	r1, [pc, #424]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d010      	beq.n	8002222 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	4b64      	ldr	r3, [pc, #400]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800220c:	429a      	cmp	r2, r3
 800220e:	d908      	bls.n	8002222 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002210:	4b61      	ldr	r3, [pc, #388]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	495e      	ldr	r1, [pc, #376]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 800221e:	4313      	orrs	r3, r2
 8002220:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d010      	beq.n	8002250 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	4b59      	ldr	r3, [pc, #356]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800223a:	429a      	cmp	r2, r3
 800223c:	d908      	bls.n	8002250 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800223e:	4b56      	ldr	r3, [pc, #344]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4953      	ldr	r1, [pc, #332]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 800224c:	4313      	orrs	r3, r2
 800224e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d010      	beq.n	800227e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	4b4d      	ldr	r3, [pc, #308]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	429a      	cmp	r2, r3
 800226a:	d908      	bls.n	800227e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b4a      	ldr	r3, [pc, #296]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f023 020f 	bic.w	r2, r3, #15
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4947      	ldr	r1, [pc, #284]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 800227a:	4313      	orrs	r3, r2
 800227c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d055      	beq.n	8002336 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800228a:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4940      	ldr	r1, [pc, #256]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002298:	4313      	orrs	r3, r2
 800229a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d121      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0f6      	b.n	80024a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022bc:	4b36      	ldr	r3, [pc, #216]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d115      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0ea      	b.n	80024a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022d4:	4b30      	ldr	r3, [pc, #192]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0de      	b.n	80024a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0d6      	b.n	80024a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022f4:	4b28      	ldr	r3, [pc, #160]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f023 0207 	bic.w	r2, r3, #7
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4925      	ldr	r1, [pc, #148]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002302:	4313      	orrs	r3, r2
 8002304:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002306:	f7fe ff7b 	bl	8001200 <HAL_GetTick>
 800230a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230c:	e00a      	b.n	8002324 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230e:	f7fe ff77 	bl	8001200 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0be      	b.n	80024a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002324:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	429a      	cmp	r2, r3
 8002334:	d1eb      	bne.n	800230e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d010      	beq.n	8002364 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	429a      	cmp	r2, r3
 8002350:	d208      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f023 020f 	bic.w	r2, r3, #15
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	490e      	ldr	r1, [pc, #56]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002360:	4313      	orrs	r3, r2
 8002362:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d214      	bcs.n	800239c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 020f 	bic.w	r2, r3, #15
 800237a:	4906      	ldr	r1, [pc, #24]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e086      	b.n	80024a2 <HAL_RCC_ClockConfig+0x34e>
 8002394:	52002000 	.word	0x52002000
 8002398:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d010      	beq.n	80023ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	4b3f      	ldr	r3, [pc, #252]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d208      	bcs.n	80023ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023b8:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4939      	ldr	r1, [pc, #228]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d010      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	4b34      	ldr	r3, [pc, #208]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d208      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023e6:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	492e      	ldr	r1, [pc, #184]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d010      	beq.n	8002426 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	4b28      	ldr	r3, [pc, #160]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002410:	429a      	cmp	r2, r3
 8002412:	d208      	bcs.n	8002426 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002414:	4b25      	ldr	r3, [pc, #148]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4922      	ldr	r1, [pc, #136]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 8002422:	4313      	orrs	r3, r2
 8002424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d010      	beq.n	8002454 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69da      	ldr	r2, [r3, #28]
 8002436:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800243e:	429a      	cmp	r2, r3
 8002440:	d208      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002442:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	4917      	ldr	r1, [pc, #92]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 8002450:	4313      	orrs	r3, r2
 8002452:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002454:	f000 f834 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	4912      	ldr	r1, [pc, #72]	@ (80024b0 <HAL_RCC_ClockConfig+0x35c>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002472:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <HAL_RCC_ClockConfig+0x358>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	4a0d      	ldr	r2, [pc, #52]	@ (80024b0 <HAL_RCC_ClockConfig+0x35c>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
 8002488:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <HAL_RCC_ClockConfig+0x360>)
 800248a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800248c:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <HAL_RCC_ClockConfig+0x364>)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_RCC_ClockConfig+0x368>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fe68 	bl	800116c <HAL_InitTick>
 800249c:	4603      	mov	r3, r0
 800249e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	58024400 	.word	0x58024400
 80024b0:	08003998 	.word	0x08003998
 80024b4:	24000028 	.word	0x24000028
 80024b8:	24000024 	.word	0x24000024
 80024bc:	24000038 	.word	0x24000038

080024c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	@ 0x24
 80024c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024c6:	4bb3      	ldr	r3, [pc, #716]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024ce:	2b18      	cmp	r3, #24
 80024d0:	f200 8155 	bhi.w	800277e <HAL_RCC_GetSysClockFreq+0x2be>
 80024d4:	a201      	add	r2, pc, #4	@ (adr r2, 80024dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	08002541 	.word	0x08002541
 80024e0:	0800277f 	.word	0x0800277f
 80024e4:	0800277f 	.word	0x0800277f
 80024e8:	0800277f 	.word	0x0800277f
 80024ec:	0800277f 	.word	0x0800277f
 80024f0:	0800277f 	.word	0x0800277f
 80024f4:	0800277f 	.word	0x0800277f
 80024f8:	0800277f 	.word	0x0800277f
 80024fc:	08002567 	.word	0x08002567
 8002500:	0800277f 	.word	0x0800277f
 8002504:	0800277f 	.word	0x0800277f
 8002508:	0800277f 	.word	0x0800277f
 800250c:	0800277f 	.word	0x0800277f
 8002510:	0800277f 	.word	0x0800277f
 8002514:	0800277f 	.word	0x0800277f
 8002518:	0800277f 	.word	0x0800277f
 800251c:	0800256d 	.word	0x0800256d
 8002520:	0800277f 	.word	0x0800277f
 8002524:	0800277f 	.word	0x0800277f
 8002528:	0800277f 	.word	0x0800277f
 800252c:	0800277f 	.word	0x0800277f
 8002530:	0800277f 	.word	0x0800277f
 8002534:	0800277f 	.word	0x0800277f
 8002538:	0800277f 	.word	0x0800277f
 800253c:	08002573 	.word	0x08002573
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002540:	4b94      	ldr	r3, [pc, #592]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800254c:	4b91      	ldr	r3, [pc, #580]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	4a90      	ldr	r2, [pc, #576]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
 800255c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800255e:	e111      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002560:	4b8d      	ldr	r3, [pc, #564]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002562:	61bb      	str	r3, [r7, #24]
      break;
 8002564:	e10e      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002566:	4b8d      	ldr	r3, [pc, #564]	@ (800279c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002568:	61bb      	str	r3, [r7, #24]
      break;
 800256a:	e10b      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800256c:	4b8c      	ldr	r3, [pc, #560]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800256e:	61bb      	str	r3, [r7, #24]
      break;
 8002570:	e108      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002572:	4b88      	ldr	r3, [pc, #544]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800257c:	4b85      	ldr	r3, [pc, #532]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002586:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002588:	4b82      	ldr	r3, [pc, #520]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002592:	4b80      	ldr	r3, [pc, #512]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002596:	08db      	lsrs	r3, r3, #3
 8002598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80e1 	beq.w	8002778 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	f000 8083 	beq.w	80026c4 <HAL_RCC_GetSysClockFreq+0x204>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	f200 80a1 	bhi.w	8002708 <HAL_RCC_GetSysClockFreq+0x248>
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x114>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d056      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025d2:	e099      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02d      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	08db      	lsrs	r3, r3, #3
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	4a6b      	ldr	r2, [pc, #428]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800260a:	4b62      	ldr	r3, [pc, #392]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800261a:	ed97 6a02 	vldr	s12, [r7, #8]
 800261e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80027a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800262a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800262e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002636:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800263a:	e087      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002646:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80027a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800264a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800264e:	4b51      	ldr	r3, [pc, #324]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800265e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002662:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80027a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800266a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800266e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800267e:	e065      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	ee07 3a90 	vmov	s15, r3
 8002686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80027ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800268e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002692:	4b40      	ldr	r3, [pc, #256]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80027a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026c2:	e043      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80027b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80027a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002706:	e021      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002712:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80027ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800271a:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800272a:	ed97 6a02 	vldr	s12, [r7, #8]
 800272e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80027a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800273a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800273e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800274a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002750:	0a5b      	lsrs	r3, r3, #9
 8002752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002756:	3301      	adds	r3, #1
 8002758:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002764:	edd7 6a07 	vldr	s13, [r7, #28]
 8002768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800276c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002770:	ee17 3a90 	vmov	r3, s15
 8002774:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002776:	e005      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
      break;
 800277c:	e002      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002780:	61bb      	str	r3, [r7, #24]
      break;
 8002782:	bf00      	nop
  }

  return sysclockfreq;
 8002784:	69bb      	ldr	r3, [r7, #24]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	@ 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	58024400 	.word	0x58024400
 8002798:	03d09000 	.word	0x03d09000
 800279c:	003d0900 	.word	0x003d0900
 80027a0:	007a1200 	.word	0x007a1200
 80027a4:	46000000 	.word	0x46000000
 80027a8:	4c742400 	.word	0x4c742400
 80027ac:	4a742400 	.word	0x4a742400
 80027b0:	4af42400 	.word	0x4af42400

080027b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e049      	b.n	800285a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe fa90 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3304      	adds	r3, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4610      	mov	r0, r2
 80027f4:	f000 fd5e 	bl	80032b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d001      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e054      	b.n	8002926 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a26      	ldr	r2, [pc, #152]	@ (8002934 <HAL_TIM_Base_Start_IT+0xd0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d022      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x80>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a6:	d01d      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x80>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a22      	ldr	r2, [pc, #136]	@ (8002938 <HAL_TIM_Base_Start_IT+0xd4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d018      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x80>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a21      	ldr	r2, [pc, #132]	@ (800293c <HAL_TIM_Base_Start_IT+0xd8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d013      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x80>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002940 <HAL_TIM_Base_Start_IT+0xdc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00e      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x80>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002944 <HAL_TIM_Base_Start_IT+0xe0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x80>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002948 <HAL_TIM_Base_Start_IT+0xe4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d004      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x80>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1b      	ldr	r2, [pc, #108]	@ (800294c <HAL_TIM_Base_Start_IT+0xe8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d115      	bne.n	8002910 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_TIM_Base_Start_IT+0xec>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d015      	beq.n	8002922 <HAL_TIM_Base_Start_IT+0xbe>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028fc:	d011      	beq.n	8002922 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290e:	e008      	b.n	8002922 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e000      	b.n	8002924 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002922:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40010400 	.word	0x40010400
 8002948:	40001800 	.word	0x40001800
 800294c:	40014000 	.word	0x40014000
 8002950:	00010007 	.word	0x00010007

08002954 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e049      	b.n	80029fa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f841 	bl	8002a02 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f000 fc8e 	bl	80032b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_IC_Start_IT+0x1e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	e023      	b.n	8002a7e <HAL_TIM_IC_Start_IT+0x66>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d104      	bne.n	8002a46 <HAL_TIM_IC_Start_IT+0x2e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	e01b      	b.n	8002a7e <HAL_TIM_IC_Start_IT+0x66>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_IC_Start_IT+0x3e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e013      	b.n	8002a7e <HAL_TIM_IC_Start_IT+0x66>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_IC_Start_IT+0x4e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	e00b      	b.n	8002a7e <HAL_TIM_IC_Start_IT+0x66>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_IC_Start_IT+0x5e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e003      	b.n	8002a7e <HAL_TIM_IC_Start_IT+0x66>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d104      	bne.n	8002a90 <HAL_TIM_IC_Start_IT+0x78>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e013      	b.n	8002ab8 <HAL_TIM_IC_Start_IT+0xa0>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d104      	bne.n	8002aa0 <HAL_TIM_IC_Start_IT+0x88>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e00b      	b.n	8002ab8 <HAL_TIM_IC_Start_IT+0xa0>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d104      	bne.n	8002ab0 <HAL_TIM_IC_Start_IT+0x98>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e003      	b.n	8002ab8 <HAL_TIM_IC_Start_IT+0xa0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d102      	bne.n	8002ac6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ac0:	7b7b      	ldrb	r3, [r7, #13]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d001      	beq.n	8002aca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0e2      	b.n	8002c90 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_IC_Start_IT+0xc2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ad8:	e023      	b.n	8002b22 <HAL_TIM_IC_Start_IT+0x10a>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_IC_Start_IT+0xd2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ae8:	e01b      	b.n	8002b22 <HAL_TIM_IC_Start_IT+0x10a>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_IC_Start_IT+0xe2>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002af8:	e013      	b.n	8002b22 <HAL_TIM_IC_Start_IT+0x10a>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b0c      	cmp	r3, #12
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_IC_Start_IT+0xf2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b08:	e00b      	b.n	8002b22 <HAL_TIM_IC_Start_IT+0x10a>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_IC_Start_IT+0x102>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b18:	e003      	b.n	8002b22 <HAL_TIM_IC_Start_IT+0x10a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <HAL_TIM_IC_Start_IT+0x11a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b30:	e013      	b.n	8002b5a <HAL_TIM_IC_Start_IT+0x142>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d104      	bne.n	8002b42 <HAL_TIM_IC_Start_IT+0x12a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b40:	e00b      	b.n	8002b5a <HAL_TIM_IC_Start_IT+0x142>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d104      	bne.n	8002b52 <HAL_TIM_IC_Start_IT+0x13a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b50:	e003      	b.n	8002b5a <HAL_TIM_IC_Start_IT+0x142>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d841      	bhi.n	8002be4 <HAL_TIM_IC_Start_IT+0x1cc>
 8002b60:	a201      	add	r2, pc, #4	@ (adr r2, 8002b68 <HAL_TIM_IC_Start_IT+0x150>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b9d 	.word	0x08002b9d
 8002b6c:	08002be5 	.word	0x08002be5
 8002b70:	08002be5 	.word	0x08002be5
 8002b74:	08002be5 	.word	0x08002be5
 8002b78:	08002baf 	.word	0x08002baf
 8002b7c:	08002be5 	.word	0x08002be5
 8002b80:	08002be5 	.word	0x08002be5
 8002b84:	08002be5 	.word	0x08002be5
 8002b88:	08002bc1 	.word	0x08002bc1
 8002b8c:	08002be5 	.word	0x08002be5
 8002b90:	08002be5 	.word	0x08002be5
 8002b94:	08002be5 	.word	0x08002be5
 8002b98:	08002bd3 	.word	0x08002bd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0202 	orr.w	r2, r2, #2
 8002baa:	60da      	str	r2, [r3, #12]
      break;
 8002bac:	e01d      	b.n	8002bea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0204 	orr.w	r2, r2, #4
 8002bbc:	60da      	str	r2, [r3, #12]
      break;
 8002bbe:	e014      	b.n	8002bea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0208 	orr.w	r2, r2, #8
 8002bce:	60da      	str	r2, [r3, #12]
      break;
 8002bd0:	e00b      	b.n	8002bea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0210 	orr.w	r2, r2, #16
 8002be0:	60da      	str	r2, [r3, #12]
      break;
 8002be2:	e002      	b.n	8002bea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      break;
 8002be8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d14e      	bne.n	8002c8e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	6839      	ldr	r1, [r7, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fdc3 	bl	8003784 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a25      	ldr	r2, [pc, #148]	@ (8002c98 <HAL_TIM_IC_Start_IT+0x280>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d022      	beq.n	8002c4e <HAL_TIM_IC_Start_IT+0x236>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c10:	d01d      	beq.n	8002c4e <HAL_TIM_IC_Start_IT+0x236>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a21      	ldr	r2, [pc, #132]	@ (8002c9c <HAL_TIM_IC_Start_IT+0x284>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d018      	beq.n	8002c4e <HAL_TIM_IC_Start_IT+0x236>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca0 <HAL_TIM_IC_Start_IT+0x288>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <HAL_TIM_IC_Start_IT+0x236>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca4 <HAL_TIM_IC_Start_IT+0x28c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00e      	beq.n	8002c4e <HAL_TIM_IC_Start_IT+0x236>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca8 <HAL_TIM_IC_Start_IT+0x290>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_TIM_IC_Start_IT+0x236>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cac <HAL_TIM_IC_Start_IT+0x294>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_TIM_IC_Start_IT+0x236>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_TIM_IC_Start_IT+0x298>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d115      	bne.n	8002c7a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b17      	ldr	r3, [pc, #92]	@ (8002cb4 <HAL_TIM_IC_Start_IT+0x29c>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d015      	beq.n	8002c8c <HAL_TIM_IC_Start_IT+0x274>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c66:	d011      	beq.n	8002c8c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c78:	e008      	b.n	8002c8c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e000      	b.n	8002c8e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800
 8002ca4:	40000c00 	.word	0x40000c00
 8002ca8:	40010400 	.word	0x40010400
 8002cac:	40001800 	.word	0x40001800
 8002cb0:	40014000 	.word	0x40014000
 8002cb4:	00010007 	.word	0x00010007

08002cb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d020      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01b      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0202 	mvn.w	r2, #2
 8002cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fb3e 	bl	8000384 <HAL_TIM_IC_CaptureCallback>
 8002d08:	e005      	b.n	8002d16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fab4 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fabb 	bl	800328c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d020      	beq.n	8002d68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01b      	beq.n	8002d68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0204 	mvn.w	r2, #4
 8002d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fd fb18 	bl	8000384 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa8e 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fa95 	bl	800328c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d020      	beq.n	8002db4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01b      	beq.n	8002db4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0208 	mvn.w	r2, #8
 8002d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2204      	movs	r2, #4
 8002d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fd faf2 	bl	8000384 <HAL_TIM_IC_CaptureCallback>
 8002da0:	e005      	b.n	8002dae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa68 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fa6f 	bl	800328c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d020      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01b      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0210 	mvn.w	r2, #16
 8002dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd facc 	bl	8000384 <HAL_TIM_IC_CaptureCallback>
 8002dec:	e005      	b.n	8002dfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa42 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fa49 	bl	800328c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00c      	beq.n	8002e24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0201 	mvn.w	r2, #1
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fd faee 	bl	8000400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00c      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fd57 	bl	8003900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00c      	beq.n	8002e76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fd4f 	bl	8003914 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00c      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fa03 	bl	80032a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00c      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f06f 0220 	mvn.w	r2, #32
 8002eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fd17 	bl	80038ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e088      	b.n	8002ff6 <HAL_TIM_IC_ConfigChannel+0x130>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11b      	bne.n	8002f2a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002f02:	f000 fa77 	bl	80033f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 020c 	bic.w	r2, r2, #12
 8002f14:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6999      	ldr	r1, [r3, #24]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	619a      	str	r2, [r3, #24]
 8002f28:	e060      	b.n	8002fec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d11c      	bne.n	8002f6a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002f40:	f000 fafb 	bl	800353a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f52:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6999      	ldr	r1, [r3, #24]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	021a      	lsls	r2, r3, #8
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	619a      	str	r2, [r3, #24]
 8002f68:	e040      	b.n	8002fec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002f80:	f000 fb48 	bl	8003614 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 020c 	bic.w	r2, r2, #12
 8002f92:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69d9      	ldr	r1, [r3, #28]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	61da      	str	r2, [r3, #28]
 8002fa6:	e021      	b.n	8002fec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d11c      	bne.n	8002fe8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002fbe:	f000 fb65 	bl	800368c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002fd0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69d9      	ldr	r1, [r3, #28]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	021a      	lsls	r2, r3, #8
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	61da      	str	r2, [r3, #28]
 8002fe6:	e001      	b.n	8002fec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_TIM_ConfigClockSource+0x1c>
 8003018:	2302      	movs	r3, #2
 800301a:	e0dc      	b.n	80031d6 <HAL_TIM_ConfigClockSource+0x1d6>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	4b6a      	ldr	r3, [pc, #424]	@ (80031e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003038:	4013      	ands	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a64      	ldr	r2, [pc, #400]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	f000 80a9 	beq.w	80031aa <HAL_TIM_ConfigClockSource+0x1aa>
 8003058:	4a62      	ldr	r2, [pc, #392]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	f200 80ae 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 8003060:	4a61      	ldr	r2, [pc, #388]	@ (80031e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	f000 80a1 	beq.w	80031aa <HAL_TIM_ConfigClockSource+0x1aa>
 8003068:	4a5f      	ldr	r2, [pc, #380]	@ (80031e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	f200 80a6 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 8003070:	4a5e      	ldr	r2, [pc, #376]	@ (80031ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8003072:	4293      	cmp	r3, r2
 8003074:	f000 8099 	beq.w	80031aa <HAL_TIM_ConfigClockSource+0x1aa>
 8003078:	4a5c      	ldr	r2, [pc, #368]	@ (80031ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800307a:	4293      	cmp	r3, r2
 800307c:	f200 809e 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 8003080:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003084:	f000 8091 	beq.w	80031aa <HAL_TIM_ConfigClockSource+0x1aa>
 8003088:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800308c:	f200 8096 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 8003090:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003094:	f000 8089 	beq.w	80031aa <HAL_TIM_ConfigClockSource+0x1aa>
 8003098:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800309c:	f200 808e 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 80030a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030a4:	d03e      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0x124>
 80030a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030aa:	f200 8087 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 80030ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b2:	f000 8086 	beq.w	80031c2 <HAL_TIM_ConfigClockSource+0x1c2>
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ba:	d87f      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 80030bc:	2b70      	cmp	r3, #112	@ 0x70
 80030be:	d01a      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0xf6>
 80030c0:	2b70      	cmp	r3, #112	@ 0x70
 80030c2:	d87b      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 80030c4:	2b60      	cmp	r3, #96	@ 0x60
 80030c6:	d050      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x16a>
 80030c8:	2b60      	cmp	r3, #96	@ 0x60
 80030ca:	d877      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 80030cc:	2b50      	cmp	r3, #80	@ 0x50
 80030ce:	d03c      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x14a>
 80030d0:	2b50      	cmp	r3, #80	@ 0x50
 80030d2:	d873      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 80030d4:	2b40      	cmp	r3, #64	@ 0x40
 80030d6:	d058      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x18a>
 80030d8:	2b40      	cmp	r3, #64	@ 0x40
 80030da:	d86f      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 80030dc:	2b30      	cmp	r3, #48	@ 0x30
 80030de:	d064      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x1aa>
 80030e0:	2b30      	cmp	r3, #48	@ 0x30
 80030e2:	d86b      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d060      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x1aa>
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d867      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05c      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x1aa>
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d05a      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x1aa>
 80030f4:	e062      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003106:	f000 fb1d 	bl	8003744 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	609a      	str	r2, [r3, #8]
      break;
 8003122:	e04f      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003134:	f000 fb06 	bl	8003744 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003146:	609a      	str	r2, [r3, #8]
      break;
 8003148:	e03c      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003156:	461a      	mov	r2, r3
 8003158:	f000 f9c0 	bl	80034dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2150      	movs	r1, #80	@ 0x50
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fad0 	bl	8003708 <TIM_ITRx_SetConfig>
      break;
 8003168:	e02c      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003176:	461a      	mov	r2, r3
 8003178:	f000 fa1c 	bl	80035b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2160      	movs	r1, #96	@ 0x60
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fac0 	bl	8003708 <TIM_ITRx_SetConfig>
      break;
 8003188:	e01c      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003196:	461a      	mov	r2, r3
 8003198:	f000 f9a0 	bl	80034dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2140      	movs	r1, #64	@ 0x40
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fab0 	bl	8003708 <TIM_ITRx_SetConfig>
      break;
 80031a8:	e00c      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	f000 faa7 	bl	8003708 <TIM_ITRx_SetConfig>
      break;
 80031ba:	e003      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      break;
 80031c0:	e000      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80031c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	ffceff88 	.word	0xffceff88
 80031e4:	00100040 	.word	0x00100040
 80031e8:	00100030 	.word	0x00100030
 80031ec:	00100020 	.word	0x00100020

080031f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d831      	bhi.n	8003268 <HAL_TIM_ReadCapturedValue+0x78>
 8003204:	a201      	add	r2, pc, #4	@ (adr r2, 800320c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	08003241 	.word	0x08003241
 8003210:	08003269 	.word	0x08003269
 8003214:	08003269 	.word	0x08003269
 8003218:	08003269 	.word	0x08003269
 800321c:	0800324b 	.word	0x0800324b
 8003220:	08003269 	.word	0x08003269
 8003224:	08003269 	.word	0x08003269
 8003228:	08003269 	.word	0x08003269
 800322c:	08003255 	.word	0x08003255
 8003230:	08003269 	.word	0x08003269
 8003234:	08003269 	.word	0x08003269
 8003238:	08003269 	.word	0x08003269
 800323c:	0800325f 	.word	0x0800325f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003246:	60fb      	str	r3, [r7, #12]

      break;
 8003248:	e00f      	b.n	800326a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	60fb      	str	r3, [r7, #12]

      break;
 8003252:	e00a      	b.n	800326a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325a:	60fb      	str	r3, [r7, #12]

      break;
 800325c:	e005      	b.n	800326a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	60fb      	str	r3, [r7, #12]

      break;
 8003266:	e000      	b.n	800326a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003268:	bf00      	nop
  }

  return tmpreg;
 800326a:	68fb      	ldr	r3, [r7, #12]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a43      	ldr	r2, [pc, #268]	@ (80033d4 <TIM_Base_SetConfig+0x120>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d2:	d00f      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a40      	ldr	r2, [pc, #256]	@ (80033d8 <TIM_Base_SetConfig+0x124>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00b      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a3f      	ldr	r2, [pc, #252]	@ (80033dc <TIM_Base_SetConfig+0x128>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a3e      	ldr	r2, [pc, #248]	@ (80033e0 <TIM_Base_SetConfig+0x12c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3d      	ldr	r2, [pc, #244]	@ (80033e4 <TIM_Base_SetConfig+0x130>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d108      	bne.n	8003306 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a32      	ldr	r2, [pc, #200]	@ (80033d4 <TIM_Base_SetConfig+0x120>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01f      	beq.n	800334e <TIM_Base_SetConfig+0x9a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003314:	d01b      	beq.n	800334e <TIM_Base_SetConfig+0x9a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2f      	ldr	r2, [pc, #188]	@ (80033d8 <TIM_Base_SetConfig+0x124>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d017      	beq.n	800334e <TIM_Base_SetConfig+0x9a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2e      	ldr	r2, [pc, #184]	@ (80033dc <TIM_Base_SetConfig+0x128>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <TIM_Base_SetConfig+0x9a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2d      	ldr	r2, [pc, #180]	@ (80033e0 <TIM_Base_SetConfig+0x12c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00f      	beq.n	800334e <TIM_Base_SetConfig+0x9a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2c      	ldr	r2, [pc, #176]	@ (80033e4 <TIM_Base_SetConfig+0x130>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00b      	beq.n	800334e <TIM_Base_SetConfig+0x9a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2b      	ldr	r2, [pc, #172]	@ (80033e8 <TIM_Base_SetConfig+0x134>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <TIM_Base_SetConfig+0x9a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2a      	ldr	r2, [pc, #168]	@ (80033ec <TIM_Base_SetConfig+0x138>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <TIM_Base_SetConfig+0x9a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a29      	ldr	r2, [pc, #164]	@ (80033f0 <TIM_Base_SetConfig+0x13c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d108      	bne.n	8003360 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a14      	ldr	r2, [pc, #80]	@ (80033d4 <TIM_Base_SetConfig+0x120>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00f      	beq.n	80033a6 <TIM_Base_SetConfig+0xf2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a16      	ldr	r2, [pc, #88]	@ (80033e4 <TIM_Base_SetConfig+0x130>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00b      	beq.n	80033a6 <TIM_Base_SetConfig+0xf2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a15      	ldr	r2, [pc, #84]	@ (80033e8 <TIM_Base_SetConfig+0x134>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <TIM_Base_SetConfig+0xf2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a14      	ldr	r2, [pc, #80]	@ (80033ec <TIM_Base_SetConfig+0x138>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_Base_SetConfig+0xf2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <TIM_Base_SetConfig+0x13c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d103      	bne.n	80033ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f043 0204 	orr.w	r2, r3, #4
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	601a      	str	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40000c00 	.word	0x40000c00
 80033e4:	40010400 	.word	0x40010400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800

080033f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f023 0201 	bic.w	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a28      	ldr	r2, [pc, #160]	@ (80034c0 <TIM_TI1_SetConfig+0xcc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01b      	beq.n	800345a <TIM_TI1_SetConfig+0x66>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003428:	d017      	beq.n	800345a <TIM_TI1_SetConfig+0x66>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a25      	ldr	r2, [pc, #148]	@ (80034c4 <TIM_TI1_SetConfig+0xd0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <TIM_TI1_SetConfig+0x66>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a24      	ldr	r2, [pc, #144]	@ (80034c8 <TIM_TI1_SetConfig+0xd4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00f      	beq.n	800345a <TIM_TI1_SetConfig+0x66>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a23      	ldr	r2, [pc, #140]	@ (80034cc <TIM_TI1_SetConfig+0xd8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00b      	beq.n	800345a <TIM_TI1_SetConfig+0x66>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a22      	ldr	r2, [pc, #136]	@ (80034d0 <TIM_TI1_SetConfig+0xdc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <TIM_TI1_SetConfig+0x66>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <TIM_TI1_SetConfig+0xe0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <TIM_TI1_SetConfig+0x66>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a20      	ldr	r2, [pc, #128]	@ (80034d8 <TIM_TI1_SetConfig+0xe4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <TIM_TI1_SetConfig+0x6a>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <TIM_TI1_SetConfig+0x6c>
 800345e:	2300      	movs	r3, #0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e003      	b.n	800347e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	b2db      	uxtb	r3, r3
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f023 030a 	bic.w	r3, r3, #10
 8003498:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f003 030a 	and.w	r3, r3, #10
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40000400 	.word	0x40000400
 80034c8:	40000800 	.word	0x40000800
 80034cc:	40000c00 	.word	0x40000c00
 80034d0:	40010400 	.word	0x40010400
 80034d4:	40001800 	.word	0x40001800
 80034d8:	40014000 	.word	0x40014000

080034dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0201 	bic.w	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f023 030a 	bic.w	r3, r3, #10
 8003518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	621a      	str	r2, [r3, #32]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800353a:	b480      	push	{r7}
 800353c:	b087      	sub	sp, #28
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f023 0210 	bic.w	r2, r3, #16
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	031b      	lsls	r3, r3, #12
 800357e:	b29b      	uxth	r3, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800358c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	621a      	str	r2, [r3, #32]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0210 	bic.w	r2, r3, #16
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	031b      	lsls	r3, r3, #12
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	621a      	str	r2, [r3, #32]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f023 0303 	bic.w	r3, r3, #3
 8003640:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003650:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	b2db      	uxtb	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003664:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	621a      	str	r2, [r3, #32]
}
 8003680:	bf00      	nop
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	031b      	lsls	r3, r3, #12
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80036de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	031b      	lsls	r3, r3, #12
 80036e4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <TIM_ITRx_SetConfig+0x38>)
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	f043 0307 	orr.w	r3, r3, #7
 800372a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	ffcfff8f 	.word	0xffcfff8f

08003744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800375e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	431a      	orrs	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	bf00      	nop
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	2201      	movs	r2, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1a      	ldr	r2, [r3, #32]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	401a      	ands	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e06d      	b.n	80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a30      	ldr	r2, [pc, #192]	@ (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a2f      	ldr	r2, [pc, #188]	@ (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003822:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003834:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a20      	ldr	r2, [pc, #128]	@ (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d022      	beq.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385a:	d01d      	beq.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1d      	ldr	r2, [pc, #116]	@ (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d018      	beq.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d013      	beq.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1a      	ldr	r2, [pc, #104]	@ (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00e      	beq.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a15      	ldr	r2, [pc, #84]	@ (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d009      	beq.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a16      	ldr	r2, [pc, #88]	@ (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a15      	ldr	r2, [pc, #84]	@ (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d10c      	bne.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800389e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40010400 	.word	0x40010400
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00
 80038e4:	40001800 	.word	0x40001800
 80038e8:	40014000 	.word	0x40014000

080038ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <memset>:
 8003928:	4402      	add	r2, r0
 800392a:	4603      	mov	r3, r0
 800392c:	4293      	cmp	r3, r2
 800392e:	d100      	bne.n	8003932 <memset+0xa>
 8003930:	4770      	bx	lr
 8003932:	f803 1b01 	strb.w	r1, [r3], #1
 8003936:	e7f9      	b.n	800392c <memset+0x4>

08003938 <__libc_init_array>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4d0d      	ldr	r5, [pc, #52]	@ (8003970 <__libc_init_array+0x38>)
 800393c:	4c0d      	ldr	r4, [pc, #52]	@ (8003974 <__libc_init_array+0x3c>)
 800393e:	1b64      	subs	r4, r4, r5
 8003940:	10a4      	asrs	r4, r4, #2
 8003942:	2600      	movs	r6, #0
 8003944:	42a6      	cmp	r6, r4
 8003946:	d109      	bne.n	800395c <__libc_init_array+0x24>
 8003948:	4d0b      	ldr	r5, [pc, #44]	@ (8003978 <__libc_init_array+0x40>)
 800394a:	4c0c      	ldr	r4, [pc, #48]	@ (800397c <__libc_init_array+0x44>)
 800394c:	f000 f818 	bl	8003980 <_init>
 8003950:	1b64      	subs	r4, r4, r5
 8003952:	10a4      	asrs	r4, r4, #2
 8003954:	2600      	movs	r6, #0
 8003956:	42a6      	cmp	r6, r4
 8003958:	d105      	bne.n	8003966 <__libc_init_array+0x2e>
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003960:	4798      	blx	r3
 8003962:	3601      	adds	r6, #1
 8003964:	e7ee      	b.n	8003944 <__libc_init_array+0xc>
 8003966:	f855 3b04 	ldr.w	r3, [r5], #4
 800396a:	4798      	blx	r3
 800396c:	3601      	adds	r6, #1
 800396e:	e7f2      	b.n	8003956 <__libc_init_array+0x1e>
 8003970:	080039b0 	.word	0x080039b0
 8003974:	080039b0 	.word	0x080039b0
 8003978:	080039b0 	.word	0x080039b0
 800397c:	080039b8 	.word	0x080039b8

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
