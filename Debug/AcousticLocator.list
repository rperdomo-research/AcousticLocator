
AcousticLocator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e7c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002114  08002114  00003114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800212c  0800212c  0000312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002134  08002134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000006c  24000000  08002138  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000174  2400006c  080021a4  0000406c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001e0  080021a4  000041e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009f7e  00000000  00000000  0000409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b04  00000000  00000000  0000e018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000748  00000000  00000000  0000fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000552  00000000  00000000  00010268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038caa  00000000  00000000  000107ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00008b27  00000000  00000000  00049464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015ab9d  00000000  00000000  00051f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001acb28  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d34  00000000  00000000  001acb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  001ae8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080020fc 	.word	0x080020fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	080020fc 	.word	0x080020fc

080002d8 <_ZN14CircularBufferC1Ev>:
#include "CircularBuffer.h"
//#include <iostream>

	CircularBuffer::CircularBuffer(){}
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	615a      	str	r2, [r3, #20]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4618      	mov	r0, r3
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <_ZN3PIDC1Efff>:
#include "PID.h"
#include "CircularBuffer.h"

	CircularBuffer errors;

    PID::PID(float kp=0.0, float ki=0.0, float kd=0.0)
 80002fa:	b480      	push	{r7}
 80002fc:	b085      	sub	sp, #20
 80002fe:	af00      	add	r7, sp, #0
 8000300:	60f8      	str	r0, [r7, #12]
 8000302:	ed87 0a02 	vstr	s0, [r7, #8]
 8000306:	edc7 0a01 	vstr	s1, [r7, #4]
 800030a:	ed87 1a00 	vstr	s2, [r7]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	f04f 0200 	mov.w	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	f04f 0200 	mov.w	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	f04f 0200 	mov.w	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	f04f 0200 	mov.w	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	f04f 0200 	mov.w	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	f04f 0200 	mov.w	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	f04f 0200 	mov.w	r2, #0
 8000344:	619a      	str	r2, [r3, #24]
    {
        propertionalGain = kp;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	68ba      	ldr	r2, [r7, #8]
 800034a:	601a      	str	r2, [r3, #0]
        integralGain = ki;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	605a      	str	r2, [r3, #4]
        derivativeGain = kd;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	683a      	ldr	r2, [r7, #0]
 8000356:	609a      	str	r2, [r3, #8]
    }
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	4618      	mov	r0, r3
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
	...

08000368 <_Z41__static_initialization_and_destruction_0v>:
        sum += propertionalGain*error;
        sum += integralGain*errors.getSum();
        sum += derivativeGain*(error - previousError);

        return sum;
    }
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	CircularBuffer errors;
 800036c:	4802      	ldr	r0, [pc, #8]	@ (8000378 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800036e:	f7ff ffb3 	bl	80002d8 <_ZN14CircularBufferC1Ev>
    }
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	24000088 	.word	0x24000088

0800037c <_GLOBAL__sub_I_errors>:
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
 8000380:	f7ff fff2 	bl	8000368 <_Z41__static_initialization_and_destruction_0v>
 8000384:	bd80      	pop	{r7, pc}

08000386 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000386:	b580      	push	{r7, lr}
 8000388:	b082      	sub	sp, #8
 800038a:	af00      	add	r7, sp, #0
 800038c:	ed87 0a01 	vstr	s0, [r7, #4]
 8000390:	ed97 0a01 	vldr	s0, [r7, #4]
 8000394:	f001 fe5e 	bl	8002054 <sqrtf>
 8000398:	eef0 7a40 	vmov.f32	s15, s0
 800039c:	eeb0 0a67 	vmov.f32	s0, s15
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b09e      	sub	sp, #120	@ 0x78
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	PID controlMotorA(0.5, 0.1, 0.0);
 80003ae:	f107 031c 	add.w	r3, r7, #28
 80003b2:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 800047c <main+0xd4>
 80003b6:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8000480 <main+0xd8>
 80003ba:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ff9b 	bl	80002fa <_ZN3PIDC1Efff>
	PID controlMotorB(0.5, 0.1, 0.0);
 80003c4:	463b      	mov	r3, r7
 80003c6:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 800047c <main+0xd4>
 80003ca:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8000480 <main+0xd8>
 80003ce:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ff91 	bl	80002fa <_ZN3PIDC1Efff>

	// Signal Processing Variables
	float distance2Source = 0.0;
 80003d8:	f04f 0300 	mov.w	r3, #0
 80003dc:	677b      	str	r3, [r7, #116]	@ 0x74

	// Coordinate Variables
	float xCoord = 0.0;
 80003de:	f04f 0300 	mov.w	r3, #0
 80003e2:	673b      	str	r3, [r7, #112]	@ 0x70
	float yCoord = 0.0;
 80003e4:	f04f 0300 	mov.w	r3, #0
 80003e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float zCoord = 0.0;
 80003ea:	f04f 0300 	mov.w	r3, #0
 80003ee:	66bb      	str	r3, [r7, #104]	@ 0x68

	float rDistance = std::sqrt(xCoord*xCoord + yCoord*yCoord);
 80003f0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80003f4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80003f8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80003fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000404:	eeb0 0a67 	vmov.f32	s0, s15
 8000408:	f7ff ffbd 	bl	8000386 <_ZSt4sqrtf>
 800040c:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
	bool AziDirection = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	bool AltiDirection = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	float AziDeg = 0.0;
 800041c:	f04f 0300 	mov.w	r3, #0
 8000420:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float AltiDeg = 0.0;
 8000422:	f04f 0300 	mov.w	r3, #0
 8000426:	65bb      	str	r3, [r7, #88]	@ 0x58

	// Control Variables
	float errorA = 0.0;
 8000428:	f04f 0300 	mov.w	r3, #0
 800042c:	657b      	str	r3, [r7, #84]	@ 0x54
	float targetDegA = 0.0;
 800042e:	f04f 0300 	mov.w	r3, #0
 8000432:	653b      	str	r3, [r7, #80]	@ 0x50
	float currentDegA = 0.0;
 8000434:	f04f 0300 	mov.w	r3, #0
 8000438:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float newTargetA = 0.0;
 800043a:	f04f 0300 	mov.w	r3, #0
 800043e:	64bb      	str	r3, [r7, #72]	@ 0x48

	float errorB = 0.0;
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	647b      	str	r3, [r7, #68]	@ 0x44
	float targetDegB = 0.0;
 8000446:	f04f 0300 	mov.w	r3, #0
 800044a:	643b      	str	r3, [r7, #64]	@ 0x40
	float currentDegB = 0.0;
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float newTargetB = 0.0;
 8000452:	f04f 0300 	mov.w	r3, #0
 8000456:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 faec 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f812 	bl	8000484 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f000 f89c 	bl	800059c <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000464:	2000      	movs	r0, #0
 8000466:	f000 fa6f 	bl	8000948 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800046a:	2001      	movs	r0, #1
 800046c:	f000 fa6c 	bl	8000948 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000470:	2002      	movs	r0, #2
 8000472:	f000 fa69 	bl	8000948 <BSP_LED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000476:	bf00      	nop
 8000478:	e7fd      	b.n	8000476 <main+0xce>
 800047a:	bf00      	nop
 800047c:	00000000 	.word	0x00000000
 8000480:	3dcccccd 	.word	0x3dcccccd

08000484 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09c      	sub	sp, #112	@ 0x70
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800048e:	224c      	movs	r2, #76	@ 0x4c
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fdff 	bl	8002096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2220      	movs	r2, #32
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 fdf9 	bl	8002096 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004a4:	2002      	movs	r0, #2
 80004a6:	f000 fe11 	bl	80010cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004aa:	2300      	movs	r3, #0
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	4b39      	ldr	r3, [pc, #228]	@ (8000594 <_Z18SystemClock_Configv+0x110>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004b2:	4a38      	ldr	r2, [pc, #224]	@ (8000594 <_Z18SystemClock_Configv+0x110>)
 80004b4:	f023 0301 	bic.w	r3, r3, #1
 80004b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004ba:	4b36      	ldr	r3, [pc, #216]	@ (8000594 <_Z18SystemClock_Configv+0x110>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	4b34      	ldr	r3, [pc, #208]	@ (8000598 <_Z18SystemClock_Configv+0x114>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004cc:	4a32      	ldr	r2, [pc, #200]	@ (8000598 <_Z18SystemClock_Configv+0x114>)
 80004ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b30      	ldr	r3, [pc, #192]	@ (8000598 <_Z18SystemClock_Configv+0x114>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e0:	bf00      	nop
 80004e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000598 <_Z18SystemClock_Configv+0x114>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004ee:	bf14      	ite	ne
 80004f0:	2301      	movne	r3, #1
 80004f2:	2300      	moveq	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f3      	bne.n	80004e2 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fa:	2302      	movs	r3, #2
 80004fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004fe:	2301      	movs	r3, #1
 8000500:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000502:	2340      	movs	r3, #64	@ 0x40
 8000504:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	2302      	movs	r3, #2
 8000508:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050a:	2300      	movs	r3, #0
 800050c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800050e:	2304      	movs	r3, #4
 8000510:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000512:	2328      	movs	r3, #40	@ 0x28
 8000514:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000516:	2304      	movs	r3, #4
 8000518:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800051a:	2304      	movs	r3, #4
 800051c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800051e:	2302      	movs	r3, #2
 8000520:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000522:	230c      	movs	r3, #12
 8000524:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000526:	2300      	movs	r3, #0
 8000528:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fe04 	bl	8001140 <HAL_RCC_OscConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf14      	ite	ne
 800053e:	2301      	movne	r3, #1
 8000540:	2300      	moveq	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000548:	f000 f8ca 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	233f      	movs	r3, #63	@ 0x3f
 800054e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2303      	movs	r3, #3
 8000552:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800055c:	2340      	movs	r3, #64	@ 0x40
 800055e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000560:	2340      	movs	r3, #64	@ 0x40
 8000562:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000564:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000568:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800056a:	2340      	movs	r3, #64	@ 0x40
 800056c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2102      	movs	r1, #2
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fa3e 	bl	80019f4 <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	bf14      	ite	ne
 800057e:	2301      	movne	r3, #1
 8000580:	2300      	moveq	r3, #0
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8000588:	f000 f8aa 	bl	80006e0 <Error_Handler>
  }
}
 800058c:	bf00      	nop
 800058e:	3770      	adds	r7, #112	@ 0x70
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	58000400 	.word	0x58000400
 8000598:	58024800 	.word	0x58024800

0800059c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	4b46      	ldr	r3, [pc, #280]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 80005b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005b8:	4a44      	ldr	r2, [pc, #272]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005c2:	4b42      	ldr	r3, [pc, #264]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d0:	4b3e      	ldr	r3, [pc, #248]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 80005d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005d6:	4a3d      	ldr	r2, [pc, #244]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 80005d8:	f043 0320 	orr.w	r3, r3, #32
 80005dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005e0:	4b3a      	ldr	r3, [pc, #232]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 80005e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ee:	4b37      	ldr	r3, [pc, #220]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f4:	4a35      	ldr	r2, [pc, #212]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 80005f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005fe:	4b33      	ldr	r3, [pc, #204]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 8000600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060c:	4b2f      	ldr	r3, [pc, #188]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	4a2e      	ldr	r2, [pc, #184]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800061c:	4b2b      	ldr	r3, [pc, #172]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 800061e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062a:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000630:	4a26      	ldr	r2, [pc, #152]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800063a:	4b24      	ldr	r3, [pc, #144]	@ (80006cc <_ZL12MX_GPIO_Initv+0x130>)
 800063c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000640:	f003 0310 	and.w	r3, r3, #16
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2102      	movs	r1, #2
 800064c:	4820      	ldr	r0, [pc, #128]	@ (80006d0 <_ZL12MX_GPIO_Initv+0x134>)
 800064e:	f000 fd23 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	481b      	ldr	r0, [pc, #108]	@ (80006d4 <_ZL12MX_GPIO_Initv+0x138>)
 8000668:	f000 fb66 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800066c:	2307      	movs	r3, #7
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000670:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000676:	2302      	movs	r3, #2
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4815      	ldr	r0, [pc, #84]	@ (80006d8 <_ZL12MX_GPIO_Initv+0x13c>)
 8000682:	f000 fb59 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000686:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000698:	2307      	movs	r3, #7
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	480e      	ldr	r0, [pc, #56]	@ (80006dc <_ZL12MX_GPIO_Initv+0x140>)
 80006a4:	f000 fb48 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a8:	2302      	movs	r3, #2
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <_ZL12MX_GPIO_Initv+0x134>)
 80006c0:	f000 fb3a 	bl	8000d38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	@ 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58024400 	.word	0x58024400
 80006d0:	58021000 	.word	0x58021000
 80006d4:	58020800 	.word	0x58020800
 80006d8:	58021400 	.word	0x58021400
 80006dc:	58020c00 	.word	0x58020c00

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <HAL_MspInit+0x30>)
 80006f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006f8:	4a08      	ldr	r2, [pc, #32]	@ (800071c <HAL_MspInit+0x30>)
 80006fa:	f043 0302 	orr.w	r3, r3, #2
 80006fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <HAL_MspInit+0x30>)
 8000704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	58024400 	.word	0x58024400

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <NMI_Handler+0x4>

08000728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <MemManage_Handler+0x4>

08000738 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <UsageFault_Handler+0x4>

08000748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000776:	f000 f9cf 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000784:	4b43      	ldr	r3, [pc, #268]	@ (8000894 <SystemInit+0x114>)
 8000786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800078a:	4a42      	ldr	r2, [pc, #264]	@ (8000894 <SystemInit+0x114>)
 800078c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000790:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000794:	4b40      	ldr	r3, [pc, #256]	@ (8000898 <SystemInit+0x118>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	2b06      	cmp	r3, #6
 800079e:	d807      	bhi.n	80007b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007a0:	4b3d      	ldr	r3, [pc, #244]	@ (8000898 <SystemInit+0x118>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f023 030f 	bic.w	r3, r3, #15
 80007a8:	4a3b      	ldr	r2, [pc, #236]	@ (8000898 <SystemInit+0x118>)
 80007aa:	f043 0307 	orr.w	r3, r3, #7
 80007ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007b0:	4b3a      	ldr	r3, [pc, #232]	@ (800089c <SystemInit+0x11c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a39      	ldr	r2, [pc, #228]	@ (800089c <SystemInit+0x11c>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007bc:	4b37      	ldr	r3, [pc, #220]	@ (800089c <SystemInit+0x11c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007c2:	4b36      	ldr	r3, [pc, #216]	@ (800089c <SystemInit+0x11c>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	4935      	ldr	r1, [pc, #212]	@ (800089c <SystemInit+0x11c>)
 80007c8:	4b35      	ldr	r3, [pc, #212]	@ (80008a0 <SystemInit+0x120>)
 80007ca:	4013      	ands	r3, r2
 80007cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ce:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <SystemInit+0x118>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d007      	beq.n	80007ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007da:	4b2f      	ldr	r3, [pc, #188]	@ (8000898 <SystemInit+0x118>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f023 030f 	bic.w	r3, r3, #15
 80007e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000898 <SystemInit+0x118>)
 80007e4:	f043 0307 	orr.w	r3, r3, #7
 80007e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007ea:	4b2c      	ldr	r3, [pc, #176]	@ (800089c <SystemInit+0x11c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007f0:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <SystemInit+0x11c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007f6:	4b29      	ldr	r3, [pc, #164]	@ (800089c <SystemInit+0x11c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <SystemInit+0x11c>)
 80007fe:	4a29      	ldr	r2, [pc, #164]	@ (80008a4 <SystemInit+0x124>)
 8000800:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000802:	4b26      	ldr	r3, [pc, #152]	@ (800089c <SystemInit+0x11c>)
 8000804:	4a28      	ldr	r2, [pc, #160]	@ (80008a8 <SystemInit+0x128>)
 8000806:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000808:	4b24      	ldr	r3, [pc, #144]	@ (800089c <SystemInit+0x11c>)
 800080a:	4a28      	ldr	r2, [pc, #160]	@ (80008ac <SystemInit+0x12c>)
 800080c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <SystemInit+0x11c>)
 8000810:	2200      	movs	r2, #0
 8000812:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000814:	4b21      	ldr	r3, [pc, #132]	@ (800089c <SystemInit+0x11c>)
 8000816:	4a25      	ldr	r2, [pc, #148]	@ (80008ac <SystemInit+0x12c>)
 8000818:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <SystemInit+0x11c>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <SystemInit+0x11c>)
 8000822:	4a22      	ldr	r2, [pc, #136]	@ (80008ac <SystemInit+0x12c>)
 8000824:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <SystemInit+0x11c>)
 8000828:	2200      	movs	r2, #0
 800082a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <SystemInit+0x11c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1a      	ldr	r2, [pc, #104]	@ (800089c <SystemInit+0x11c>)
 8000832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000836:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <SystemInit+0x11c>)
 800083a:	2200      	movs	r2, #0
 800083c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <SystemInit+0x130>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <SystemInit+0x134>)
 8000844:	4013      	ands	r3, r2
 8000846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800084a:	d202      	bcs.n	8000852 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800084c:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <SystemInit+0x138>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000852:	4b12      	ldr	r3, [pc, #72]	@ (800089c <SystemInit+0x11c>)
 8000854:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000858:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d113      	bne.n	8000888 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <SystemInit+0x11c>)
 8000862:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000866:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <SystemInit+0x11c>)
 8000868:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800086c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <SystemInit+0x13c>)
 8000872:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000876:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000878:	4b08      	ldr	r3, [pc, #32]	@ (800089c <SystemInit+0x11c>)
 800087a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800087e:	4a07      	ldr	r2, [pc, #28]	@ (800089c <SystemInit+0x11c>)
 8000880:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000884:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	52002000 	.word	0x52002000
 800089c:	58024400 	.word	0x58024400
 80008a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008a4:	02020200 	.word	0x02020200
 80008a8:	01ff0000 	.word	0x01ff0000
 80008ac:	01010280 	.word	0x01010280
 80008b0:	5c001000 	.word	0x5c001000
 80008b4:	ffff0000 	.word	0xffff0000
 80008b8:	51008108 	.word	0x51008108
 80008bc:	52004000 	.word	0x52004000

080008c0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <ExitRun0Mode+0x2c>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <ExitRun0Mode+0x2c>)
 80008ca:	f043 0302 	orr.w	r3, r3, #2
 80008ce:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80008d0:	bf00      	nop
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <ExitRun0Mode+0x2c>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0f9      	beq.n	80008d2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	58024800 	.word	0x58024800

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008f0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800092c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80008f4:	f7ff ffe4 	bl	80008c0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f8:	f7ff ff42 	bl	8000780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	@ (8000934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	@ (8000940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f001 fbc7 	bl	80020b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000926:	f7ff fd3f 	bl	80003a8 <main>
  bx  lr
 800092a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800092c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000930:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000934:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000938:	08002138 	.word	0x08002138
  ldr r2, =_sbss
 800093c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000940:	240001e0 	.word	0x240001e0

08000944 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC3_IRQHandler>
	...

08000948 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	@ 0x30
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d009      	beq.n	8000970 <BSP_LED_Init+0x28>
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d006      	beq.n	8000970 <BSP_LED_Init+0x28>
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d003      	beq.n	8000970 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000968:	f06f 0301 	mvn.w	r3, #1
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800096e:	e055      	b.n	8000a1c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10f      	bne.n	8000996 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000976:	4b2c      	ldr	r3, [pc, #176]	@ (8000a28 <BSP_LED_Init+0xe0>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	4a2a      	ldr	r2, [pc, #168]	@ (8000a28 <BSP_LED_Init+0xe0>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000986:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <BSP_LED_Init+0xe0>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	e021      	b.n	80009da <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10f      	bne.n	80009bc <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <BSP_LED_Init+0xe0>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	4a21      	ldr	r2, [pc, #132]	@ (8000a28 <BSP_LED_Init+0xe0>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <BSP_LED_Init+0xe0>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	e00e      	b.n	80009da <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <BSP_LED_Init+0xe0>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c2:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <BSP_LED_Init+0xe0>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <BSP_LED_Init+0xe0>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <BSP_LED_Init+0xe4>)
 80009de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009e2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <BSP_LED_Init+0xe8>)
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	f107 0218 	add.w	r2, r7, #24
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f99a 	bl	8000d38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <BSP_LED_Init+0xe8>)
 8000a08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <BSP_LED_Init+0xe4>)
 8000a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a14:	2200      	movs	r2, #0
 8000a16:	4619      	mov	r1, r3
 8000a18:	f000 fb3e 	bl	8001098 <HAL_GPIO_WritePin>
  }

  return ret;
 8000a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3730      	adds	r7, #48	@ 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	08002124 	.word	0x08002124
 8000a30:	24000008 	.word	0x24000008

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f000 f94a 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a40:	f001 f98e 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8000a44:	4602      	mov	r2, r0
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <HAL_Init+0x68>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	f003 030f 	and.w	r3, r3, #15
 8000a50:	4913      	ldr	r1, [pc, #76]	@ (8000aa0 <HAL_Init+0x6c>)
 8000a52:	5ccb      	ldrb	r3, [r1, r3]
 8000a54:	f003 031f 	and.w	r3, r3, #31
 8000a58:	fa22 f303 	lsr.w	r3, r2, r3
 8000a5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_Init+0x68>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <HAL_Init+0x6c>)
 8000a68:	5cd3      	ldrb	r3, [r2, r3]
 8000a6a:	f003 031f 	and.w	r3, r3, #31
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	fa22 f303 	lsr.w	r3, r2, r3
 8000a74:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <HAL_Init+0x70>)
 8000a76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a78:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa8 <HAL_Init+0x74>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f814 	bl	8000aac <HAL_InitTick>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e002      	b.n	8000a94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8e:	f7ff fe2d 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	58024400 	.word	0x58024400
 8000aa0:	08002114 	.word	0x08002114
 8000aa4:	24000004 	.word	0x24000004
 8000aa8:	24000000 	.word	0x24000000

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ab4:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <HAL_InitTick+0x60>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e021      	b.n	8000b04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <HAL_InitTick+0x64>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <HAL_InitTick+0x60>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f921 	bl	8000d1e <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f8f9 	bl	8000cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <HAL_InitTick+0x68>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24000018 	.word	0x24000018
 8000b10:	24000000 	.word	0x24000000
 8000b14:	24000014 	.word	0x24000014

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	24000018 	.word	0x24000018
 8000b3c:	240000a4 	.word	0x240000a4

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	240000a4 	.word	0x240000a4

08000b58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <HAL_GetREVID+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	0c1b      	lsrs	r3, r3, #16
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	5c001000 	.word	0x5c001000

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00
 8000bb4:	05fa0000 	.word	0x05fa0000

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	@ (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	@ (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	@ 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	@ 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff8e 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff47 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff5e 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff90 	bl	8000c28 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5f 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffb2 	bl	8000c90 <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	@ 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d46:	4b89      	ldr	r3, [pc, #548]	@ (8000f6c <HAL_GPIO_Init+0x234>)
 8000d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d4a:	e194      	b.n	8001076 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8186 	beq.w	8001070 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <HAL_GPIO_Init+0x44>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d130      	bne.n	8000dde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	f003 0201 	and.w	r2, r3, #1
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d017      	beq.n	8000e1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d123      	bne.n	8000e6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	69b9      	ldr	r1, [r7, #24]
 8000e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0203 	and.w	r2, r3, #3
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 80e0 	beq.w	8001070 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <HAL_GPIO_Init+0x238>)
 8000eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8000f70 <HAL_GPIO_Init+0x238>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <HAL_GPIO_Init+0x238>)
 8000ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a29      	ldr	r2, [pc, #164]	@ (8000f74 <HAL_GPIO_Init+0x23c>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a20      	ldr	r2, [pc, #128]	@ (8000f78 <HAL_GPIO_Init+0x240>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d052      	beq.n	8000fa0 <HAL_GPIO_Init+0x268>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a1f      	ldr	r2, [pc, #124]	@ (8000f7c <HAL_GPIO_Init+0x244>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d031      	beq.n	8000f66 <HAL_GPIO_Init+0x22e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a1e      	ldr	r2, [pc, #120]	@ (8000f80 <HAL_GPIO_Init+0x248>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d02b      	beq.n	8000f62 <HAL_GPIO_Init+0x22a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f84 <HAL_GPIO_Init+0x24c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d025      	beq.n	8000f5e <HAL_GPIO_Init+0x226>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a1c      	ldr	r2, [pc, #112]	@ (8000f88 <HAL_GPIO_Init+0x250>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d01f      	beq.n	8000f5a <HAL_GPIO_Init+0x222>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f8c <HAL_GPIO_Init+0x254>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0x21e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a1a      	ldr	r2, [pc, #104]	@ (8000f90 <HAL_GPIO_Init+0x258>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0x21a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	@ (8000f94 <HAL_GPIO_Init+0x25c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00d      	beq.n	8000f4e <HAL_GPIO_Init+0x216>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_GPIO_Init+0x260>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <HAL_GPIO_Init+0x264>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_GPIO_Init+0x20e>
 8000f42:	2309      	movs	r3, #9
 8000f44:	e02d      	b.n	8000fa2 <HAL_GPIO_Init+0x26a>
 8000f46:	230a      	movs	r3, #10
 8000f48:	e02b      	b.n	8000fa2 <HAL_GPIO_Init+0x26a>
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	e029      	b.n	8000fa2 <HAL_GPIO_Init+0x26a>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e027      	b.n	8000fa2 <HAL_GPIO_Init+0x26a>
 8000f52:	2306      	movs	r3, #6
 8000f54:	e025      	b.n	8000fa2 <HAL_GPIO_Init+0x26a>
 8000f56:	2305      	movs	r3, #5
 8000f58:	e023      	b.n	8000fa2 <HAL_GPIO_Init+0x26a>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e021      	b.n	8000fa2 <HAL_GPIO_Init+0x26a>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e01f      	b.n	8000fa2 <HAL_GPIO_Init+0x26a>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e01d      	b.n	8000fa2 <HAL_GPIO_Init+0x26a>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e01b      	b.n	8000fa2 <HAL_GPIO_Init+0x26a>
 8000f6a:	bf00      	nop
 8000f6c:	58000080 	.word	0x58000080
 8000f70:	58024400 	.word	0x58024400
 8000f74:	58000400 	.word	0x58000400
 8000f78:	58020000 	.word	0x58020000
 8000f7c:	58020400 	.word	0x58020400
 8000f80:	58020800 	.word	0x58020800
 8000f84:	58020c00 	.word	0x58020c00
 8000f88:	58021000 	.word	0x58021000
 8000f8c:	58021400 	.word	0x58021400
 8000f90:	58021800 	.word	0x58021800
 8000f94:	58021c00 	.word	0x58021c00
 8000f98:	58022000 	.word	0x58022000
 8000f9c:	58022400 	.word	0x58022400
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	f002 0203 	and.w	r2, r2, #3
 8000fa8:	0092      	lsls	r2, r2, #2
 8000faa:	4093      	lsls	r3, r2
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb2:	4938      	ldr	r1, [pc, #224]	@ (8001094 <HAL_GPIO_Init+0x35c>)
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000fe6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001014:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	3301      	adds	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa22 f303 	lsr.w	r3, r2, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	f47f ae63 	bne.w	8000d4c <HAL_GPIO_Init+0x14>
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3724      	adds	r7, #36	@ 0x24
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	58000400 	.word	0x58000400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	041a      	lsls	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	619a      	str	r2, [r3, #24]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_PWREx_ConfigSupply+0x70>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d00a      	beq.n	80010f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <HAL_PWREx_ConfigSupply+0x70>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d001      	beq.n	80010f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e01f      	b.n	8001132 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e01d      	b.n	8001132 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_PWREx_ConfigSupply+0x70>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f023 0207 	bic.w	r2, r3, #7
 80010fe:	490f      	ldr	r1, [pc, #60]	@ (800113c <HAL_PWREx_ConfigSupply+0x70>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4313      	orrs	r3, r2
 8001104:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001106:	f7ff fd1b 	bl	8000b40 <HAL_GetTick>
 800110a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800110c:	e009      	b.n	8001122 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800110e:	f7ff fd17 	bl	8000b40 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800111c:	d901      	bls.n	8001122 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e007      	b.n	8001132 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_PWREx_ConfigSupply+0x70>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800112a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800112e:	d1ee      	bne.n	800110e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	58024800 	.word	0x58024800

08001140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	@ 0x30
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	f000 bc48 	b.w	80019e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 8088 	beq.w	8001272 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001162:	4b99      	ldr	r3, [pc, #612]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800116c:	4b96      	ldr	r3, [pc, #600]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 800116e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001174:	2b10      	cmp	r3, #16
 8001176:	d007      	beq.n	8001188 <HAL_RCC_OscConfig+0x48>
 8001178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117a:	2b18      	cmp	r3, #24
 800117c:	d111      	bne.n	80011a2 <HAL_RCC_OscConfig+0x62>
 800117e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d10c      	bne.n	80011a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	4b8f      	ldr	r3, [pc, #572]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d06d      	beq.n	8001270 <HAL_RCC_OscConfig+0x130>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d169      	bne.n	8001270 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	f000 bc21 	b.w	80019e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x7a>
 80011ac:	4b86      	ldr	r3, [pc, #536]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a85      	ldr	r2, [pc, #532]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	e02e      	b.n	8001218 <HAL_RCC_OscConfig+0xd8>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x9c>
 80011c2:	4b81      	ldr	r3, [pc, #516]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a80      	ldr	r2, [pc, #512]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4b7e      	ldr	r3, [pc, #504]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a7d      	ldr	r2, [pc, #500]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e01d      	b.n	8001218 <HAL_RCC_OscConfig+0xd8>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0xc0>
 80011e6:	4b78      	ldr	r3, [pc, #480]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a77      	ldr	r2, [pc, #476]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b75      	ldr	r3, [pc, #468]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a74      	ldr	r2, [pc, #464]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0xd8>
 8001200:	4b71      	ldr	r3, [pc, #452]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a70      	ldr	r2, [pc, #448]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b6e      	ldr	r3, [pc, #440]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a6d      	ldr	r2, [pc, #436]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d013      	beq.n	8001248 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fc8e 	bl	8000b40 <HAL_GetTick>
 8001224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fc8a 	bl	8000b40 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	@ 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e3d4      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800123a:	4b63      	ldr	r3, [pc, #396]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0xe8>
 8001246:	e014      	b.n	8001272 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fc7a 	bl	8000b40 <HAL_GetTick>
 800124c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fc76 	bl	8000b40 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	@ 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e3c0      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001262:	4b59      	ldr	r3, [pc, #356]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x110>
 800126e:	e000      	b.n	8001272 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80ca 	beq.w	8001414 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001280:	4b51      	ldr	r3, [pc, #324]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001288:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800128a:	4b4f      	ldr	r3, [pc, #316]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 800128c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d007      	beq.n	80012a6 <HAL_RCC_OscConfig+0x166>
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	2b18      	cmp	r3, #24
 800129a:	d156      	bne.n	800134a <HAL_RCC_OscConfig+0x20a>
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d151      	bne.n	800134a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a6:	4b48      	ldr	r3, [pc, #288]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_RCC_OscConfig+0x17e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e392      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012be:	4b42      	ldr	r3, [pc, #264]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 0219 	bic.w	r2, r3, #25
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	493f      	ldr	r1, [pc, #252]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc36 	bl	8000b40 <HAL_GetTick>
 80012d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc32 	bl	8000b40 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e37c      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ea:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	f7ff fc2f 	bl	8000b58 <HAL_GetREVID>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001300:	4293      	cmp	r3, r2
 8001302:	d817      	bhi.n	8001334 <HAL_RCC_OscConfig+0x1f4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b40      	cmp	r3, #64	@ 0x40
 800130a:	d108      	bne.n	800131e <HAL_RCC_OscConfig+0x1de>
 800130c:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001314:	4a2c      	ldr	r2, [pc, #176]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800131c:	e07a      	b.n	8001414 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	031b      	lsls	r3, r3, #12
 800132c:	4926      	ldr	r1, [pc, #152]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001332:	e06f      	b.n	8001414 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	4921      	ldr	r1, [pc, #132]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001348:	e064      	b.n	8001414 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d047      	beq.n	80013e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001352:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 0219 	bic.w	r2, r3, #25
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	491a      	ldr	r1, [pc, #104]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fbec 	bl	8000b40 <HAL_GetTick>
 8001368:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136c:	f7ff fbe8 	bl	8000b40 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e332      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	f7ff fbe5 	bl	8000b58 <HAL_GetREVID>
 800138e:	4603      	mov	r3, r0
 8001390:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001394:	4293      	cmp	r3, r2
 8001396:	d819      	bhi.n	80013cc <HAL_RCC_OscConfig+0x28c>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	2b40      	cmp	r3, #64	@ 0x40
 800139e:	d108      	bne.n	80013b2 <HAL_RCC_OscConfig+0x272>
 80013a0:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80013a8:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ae:	6053      	str	r3, [r2, #4]
 80013b0:	e030      	b.n	8001414 <HAL_RCC_OscConfig+0x2d4>
 80013b2:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	031b      	lsls	r3, r3, #12
 80013c0:	4901      	ldr	r1, [pc, #4]	@ (80013c8 <HAL_RCC_OscConfig+0x288>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
 80013c6:	e025      	b.n	8001414 <HAL_RCC_OscConfig+0x2d4>
 80013c8:	58024400 	.word	0x58024400
 80013cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	061b      	lsls	r3, r3, #24
 80013da:	4997      	ldr	r1, [pc, #604]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
 80013e0:	e018      	b.n	8001414 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b95      	ldr	r3, [pc, #596]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a94      	ldr	r2, [pc, #592]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff fba7 	bl	8000b40 <HAL_GetTick>
 80013f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f6:	f7ff fba3 	bl	8000b40 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e2ed      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001408:	4b8b      	ldr	r3, [pc, #556]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80a9 	beq.w	8001574 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001422:	4b85      	ldr	r3, [pc, #532]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800142a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800142c:	4b82      	ldr	r3, [pc, #520]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001430:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d007      	beq.n	8001448 <HAL_RCC_OscConfig+0x308>
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b18      	cmp	r3, #24
 800143c:	d13a      	bne.n	80014b4 <HAL_RCC_OscConfig+0x374>
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d135      	bne.n	80014b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001448:	4b7b      	ldr	r3, [pc, #492]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_OscConfig+0x320>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b80      	cmp	r3, #128	@ 0x80
 800145a:	d001      	beq.n	8001460 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e2c1      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001460:	f7ff fb7a 	bl	8000b58 <HAL_GetREVID>
 8001464:	4603      	mov	r3, r0
 8001466:	f241 0203 	movw	r2, #4099	@ 0x1003
 800146a:	4293      	cmp	r3, r2
 800146c:	d817      	bhi.n	800149e <HAL_RCC_OscConfig+0x35e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	2b20      	cmp	r3, #32
 8001474:	d108      	bne.n	8001488 <HAL_RCC_OscConfig+0x348>
 8001476:	4b70      	ldr	r3, [pc, #448]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800147e:	4a6e      	ldr	r2, [pc, #440]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001480:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001484:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001486:	e075      	b.n	8001574 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001488:	4b6b      	ldr	r3, [pc, #428]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	069b      	lsls	r3, r3, #26
 8001496:	4968      	ldr	r1, [pc, #416]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800149c:	e06a      	b.n	8001574 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800149e:	4b66      	ldr	r3, [pc, #408]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	061b      	lsls	r3, r3, #24
 80014ac:	4962      	ldr	r1, [pc, #392]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014b2:	e05f      	b.n	8001574 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d042      	beq.n	8001542 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80014c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb3a 	bl	8000b40 <HAL_GetTick>
 80014cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014d0:	f7ff fb36 	bl	8000b40 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e280      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014e2:	4b55      	ldr	r3, [pc, #340]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014ee:	f7ff fb33 	bl	8000b58 <HAL_GetREVID>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d817      	bhi.n	800152c <HAL_RCC_OscConfig+0x3ec>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	2b20      	cmp	r3, #32
 8001502:	d108      	bne.n	8001516 <HAL_RCC_OscConfig+0x3d6>
 8001504:	4b4c      	ldr	r3, [pc, #304]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800150c:	4a4a      	ldr	r2, [pc, #296]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800150e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001512:	6053      	str	r3, [r2, #4]
 8001514:	e02e      	b.n	8001574 <HAL_RCC_OscConfig+0x434>
 8001516:	4b48      	ldr	r3, [pc, #288]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	069b      	lsls	r3, r3, #26
 8001524:	4944      	ldr	r1, [pc, #272]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
 800152a:	e023      	b.n	8001574 <HAL_RCC_OscConfig+0x434>
 800152c:	4b42      	ldr	r3, [pc, #264]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	493f      	ldr	r1, [pc, #252]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800153c:	4313      	orrs	r3, r2
 800153e:	60cb      	str	r3, [r1, #12]
 8001540:	e018      	b.n	8001574 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001542:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a3c      	ldr	r2, [pc, #240]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800154c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff faf7 	bl	8000b40 <HAL_GetTick>
 8001552:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001556:	f7ff faf3 	bl	8000b40 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e23d      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001568:	4b33      	ldr	r3, [pc, #204]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d036      	beq.n	80015ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d019      	beq.n	80015bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001588:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800158a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800158c:	4a2a      	ldr	r2, [pc, #168]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fad4 	bl	8000b40 <HAL_GetTick>
 8001598:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fad0 	bl	8000b40 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e21a      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x45c>
 80015ba:	e018      	b.n	80015ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80015be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff faba 	bl	8000b40 <HAL_GetTick>
 80015cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fab6 	bl	8000b40 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e200      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d039      	beq.n	800166e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01c      	beq.n	800163c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a0c      	ldr	r2, [pc, #48]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 8001608:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800160c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800160e:	f7ff fa97 	bl	8000b40 <HAL_GetTick>
 8001612:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001616:	f7ff fa93 	bl	8000b40 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1dd      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_RCC_OscConfig+0x4f8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x4d6>
 8001634:	e01b      	b.n	800166e <HAL_RCC_OscConfig+0x52e>
 8001636:	bf00      	nop
 8001638:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800163c:	4b9b      	ldr	r3, [pc, #620]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a9a      	ldr	r2, [pc, #616]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001642:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001646:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001648:	f7ff fa7a 	bl	8000b40 <HAL_GetTick>
 800164c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001650:	f7ff fa76 	bl	8000b40 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e1c0      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001662:	4b92      	ldr	r3, [pc, #584]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8081 	beq.w	800177e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800167c:	4b8c      	ldr	r3, [pc, #560]	@ (80018b0 <HAL_RCC_OscConfig+0x770>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a8b      	ldr	r2, [pc, #556]	@ (80018b0 <HAL_RCC_OscConfig+0x770>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001686:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001688:	f7ff fa5a 	bl	8000b40 <HAL_GetTick>
 800168c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001690:	f7ff fa56 	bl	8000b40 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	@ 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1a0      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016a2:	4b83      	ldr	r3, [pc, #524]	@ (80018b0 <HAL_RCC_OscConfig+0x770>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d106      	bne.n	80016c4 <HAL_RCC_OscConfig+0x584>
 80016b6:	4b7d      	ldr	r3, [pc, #500]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	4a7c      	ldr	r2, [pc, #496]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c2:	e02d      	b.n	8001720 <HAL_RCC_OscConfig+0x5e0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10c      	bne.n	80016e6 <HAL_RCC_OscConfig+0x5a6>
 80016cc:	4b77      	ldr	r3, [pc, #476]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a76      	ldr	r2, [pc, #472]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d8:	4b74      	ldr	r3, [pc, #464]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a73      	ldr	r2, [pc, #460]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80016de:	f023 0304 	bic.w	r3, r3, #4
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x5e0>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x5c8>
 80016ee:	4b6f      	ldr	r3, [pc, #444]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f2:	4a6e      	ldr	r2, [pc, #440]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fa:	4b6c      	ldr	r3, [pc, #432]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fe:	4a6b      	ldr	r2, [pc, #428]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6713      	str	r3, [r2, #112]	@ 0x70
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0x5e0>
 8001708:	4b68      	ldr	r3, [pc, #416]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170c:	4a67      	ldr	r2, [pc, #412]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	@ 0x70
 8001714:	4b65      	ldr	r3, [pc, #404]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001718:	4a64      	ldr	r2, [pc, #400]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d015      	beq.n	8001754 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fa0a 	bl	8000b40 <HAL_GetTick>
 800172c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff fa06 	bl	8000b40 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e14e      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001746:	4b59      	ldr	r3, [pc, #356]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0ee      	beq.n	8001730 <HAL_RCC_OscConfig+0x5f0>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff f9f4 	bl	8000b40 <HAL_GetTick>
 8001758:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff f9f0 	bl	8000b40 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e138      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001772:	4b4e      	ldr	r3, [pc, #312]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ee      	bne.n	800175c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 812d 	beq.w	80019e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001788:	4b48      	ldr	r3, [pc, #288]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001790:	2b18      	cmp	r3, #24
 8001792:	f000 80bd 	beq.w	8001910 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179a:	2b02      	cmp	r3, #2
 800179c:	f040 809e 	bne.w	80018dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a0:	4b42      	ldr	r3, [pc, #264]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a41      	ldr	r2, [pc, #260]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80017a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff f9c8 	bl	8000b40 <HAL_GetTick>
 80017b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff f9c4 	bl	8000b40 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e10e      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017c6:	4b39      	ldr	r3, [pc, #228]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d2:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80017d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017d6:	4b37      	ldr	r3, [pc, #220]	@ (80018b4 <HAL_RCC_OscConfig+0x774>)
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	430a      	orrs	r2, r1
 80017e6:	4931      	ldr	r1, [pc, #196]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	3b01      	subs	r3, #1
 80017f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017fa:	3b01      	subs	r3, #1
 80017fc:	025b      	lsls	r3, r3, #9
 80017fe:	b29b      	uxth	r3, r3
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001806:	3b01      	subs	r3, #1
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001814:	3b01      	subs	r3, #1
 8001816:	061b      	lsls	r3, r3, #24
 8001818:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800181c:	4923      	ldr	r1, [pc, #140]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 800181e:	4313      	orrs	r3, r2
 8001820:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001822:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001826:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800182e:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <HAL_RCC_OscConfig+0x778>)
 8001834:	4013      	ands	r3, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800183a:	00d2      	lsls	r2, r2, #3
 800183c:	491b      	ldr	r1, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001846:	f023 020c 	bic.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	4917      	ldr	r1, [pc, #92]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001850:	4313      	orrs	r3, r2
 8001852:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001858:	f023 0202 	bic.w	r2, r3, #2
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	4912      	ldr	r1, [pc, #72]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001862:	4313      	orrs	r3, r2
 8001864:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186a:	4a10      	ldr	r2, [pc, #64]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001876:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800187e:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001888:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800188a:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 800188c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188e:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001896:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <HAL_RCC_OscConfig+0x76c>)
 800189c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff f94d 	bl	8000b40 <HAL_GetTick>
 80018a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018a8:	e011      	b.n	80018ce <HAL_RCC_OscConfig+0x78e>
 80018aa:	bf00      	nop
 80018ac:	58024400 	.word	0x58024400
 80018b0:	58024800 	.word	0x58024800
 80018b4:	fffffc0c 	.word	0xfffffc0c
 80018b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff f940 	bl	8000b40 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e08a      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ce:	4b47      	ldr	r3, [pc, #284]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x77c>
 80018da:	e082      	b.n	80019e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018dc:	4b43      	ldr	r3, [pc, #268]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a42      	ldr	r2, [pc, #264]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 80018e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff f92a 	bl	8000b40 <HAL_GetTick>
 80018ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f926 	bl	8000b40 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e070      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001902:	4b3a      	ldr	r3, [pc, #232]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x7b0>
 800190e:	e068      	b.n	80019e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001910:	4b36      	ldr	r3, [pc, #216]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 8001912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001914:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001916:	4b35      	ldr	r3, [pc, #212]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	2b01      	cmp	r3, #1
 8001922:	d031      	beq.n	8001988 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f003 0203 	and.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d12a      	bne.n	8001988 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d122      	bne.n	8001988 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d11a      	bne.n	8001988 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	0a5b      	lsrs	r3, r3, #9
 8001956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d111      	bne.n	8001988 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	0c1b      	lsrs	r3, r3, #16
 8001968:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001970:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d108      	bne.n	8001988 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	0e1b      	lsrs	r3, r3, #24
 800197a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001982:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e02b      	b.n	80019e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800198c:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 800198e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001996:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d01f      	beq.n	80019e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019ae:	f7ff f8c7 	bl	8000b40 <HAL_GetTick>
 80019b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80019b4:	bf00      	nop
 80019b6:	f7ff f8c3 	bl	8000b40 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	4293      	cmp	r3, r2
 80019c0:	d0f9      	beq.n	80019b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 80019c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_RCC_OscConfig+0x8b0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019ce:	00d2      	lsls	r2, r2, #3
 80019d0:	4906      	ldr	r1, [pc, #24]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 80019d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019da:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_RCC_OscConfig+0x8ac>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3730      	adds	r7, #48	@ 0x30
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	58024400 	.word	0x58024400
 80019f0:	ffff0007 	.word	0xffff0007

080019f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e19c      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b8a      	ldr	r3, [pc, #552]	@ (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d910      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b87      	ldr	r3, [pc, #540]	@ (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 020f 	bic.w	r2, r3, #15
 8001a1e:	4985      	ldr	r1, [pc, #532]	@ (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b83      	ldr	r3, [pc, #524]	@ (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e184      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d010      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	4b7b      	ldr	r3, [pc, #492]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d908      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a54:	4b78      	ldr	r3, [pc, #480]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	4975      	ldr	r1, [pc, #468]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d010      	beq.n	8001a94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	4b70      	ldr	r3, [pc, #448]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d908      	bls.n	8001a94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a82:	4b6d      	ldr	r3, [pc, #436]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	496a      	ldr	r1, [pc, #424]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d010      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	4b64      	ldr	r3, [pc, #400]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d908      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ab0:	4b61      	ldr	r3, [pc, #388]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	495e      	ldr	r1, [pc, #376]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d010      	beq.n	8001af0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69da      	ldr	r2, [r3, #28]
 8001ad2:	4b59      	ldr	r3, [pc, #356]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d908      	bls.n	8001af0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ade:	4b56      	ldr	r3, [pc, #344]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4953      	ldr	r1, [pc, #332]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d010      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4b4d      	ldr	r3, [pc, #308]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d908      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f023 020f 	bic.w	r2, r3, #15
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4947      	ldr	r1, [pc, #284]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d055      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b2a:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4940      	ldr	r1, [pc, #256]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b44:	4b3c      	ldr	r3, [pc, #240]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d121      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0f6      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b5c:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d115      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0ea      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b74:	4b30      	ldr	r3, [pc, #192]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0de      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b84:	4b2c      	ldr	r3, [pc, #176]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0d6      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b94:	4b28      	ldr	r3, [pc, #160]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f023 0207 	bic.w	r2, r3, #7
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4925      	ldr	r1, [pc, #148]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba6:	f7fe ffcb 	bl	8000b40 <HAL_GetTick>
 8001baa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bae:	f7fe ffc7 	bl	8000b40 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0be      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d1eb      	bne.n	8001bae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d010      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d208      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f023 020f 	bic.w	r2, r3, #15
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	490e      	ldr	r1, [pc, #56]	@ (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d214      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 020f 	bic.w	r2, r3, #15
 8001c1a:	4906      	ldr	r1, [pc, #24]	@ (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e086      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
 8001c34:	52002000 	.word	0x52002000
 8001c38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d010      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d208      	bcs.n	8001c6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c58:	4b3c      	ldr	r3, [pc, #240]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	4939      	ldr	r1, [pc, #228]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d010      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	4b34      	ldr	r3, [pc, #208]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d208      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c86:	4b31      	ldr	r3, [pc, #196]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	492e      	ldr	r1, [pc, #184]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d010      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	4b28      	ldr	r3, [pc, #160]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d208      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cb4:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4922      	ldr	r1, [pc, #136]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d010      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d208      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4917      	ldr	r1, [pc, #92]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cf4:	f000 f834 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	4912      	ldr	r1, [pc, #72]	@ (8001d50 <HAL_RCC_ClockConfig+0x35c>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <HAL_RCC_ClockConfig+0x35c>)
 8001d1c:	5cd3      	ldrb	r3, [r2, r3]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <HAL_RCC_ClockConfig+0x360>)
 8001d2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <HAL_RCC_ClockConfig+0x364>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_RCC_ClockConfig+0x368>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe feb8 	bl	8000aac <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	08002114 	.word	0x08002114
 8001d54:	24000004 	.word	0x24000004
 8001d58:	24000000 	.word	0x24000000
 8001d5c:	24000014 	.word	0x24000014

08001d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	@ 0x24
 8001d64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d66:	4bb3      	ldr	r3, [pc, #716]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d6e:	2b18      	cmp	r3, #24
 8001d70:	f200 8155 	bhi.w	800201e <HAL_RCC_GetSysClockFreq+0x2be>
 8001d74:	a201      	add	r2, pc, #4	@ (adr r2, 8001d7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7a:	bf00      	nop
 8001d7c:	08001de1 	.word	0x08001de1
 8001d80:	0800201f 	.word	0x0800201f
 8001d84:	0800201f 	.word	0x0800201f
 8001d88:	0800201f 	.word	0x0800201f
 8001d8c:	0800201f 	.word	0x0800201f
 8001d90:	0800201f 	.word	0x0800201f
 8001d94:	0800201f 	.word	0x0800201f
 8001d98:	0800201f 	.word	0x0800201f
 8001d9c:	08001e07 	.word	0x08001e07
 8001da0:	0800201f 	.word	0x0800201f
 8001da4:	0800201f 	.word	0x0800201f
 8001da8:	0800201f 	.word	0x0800201f
 8001dac:	0800201f 	.word	0x0800201f
 8001db0:	0800201f 	.word	0x0800201f
 8001db4:	0800201f 	.word	0x0800201f
 8001db8:	0800201f 	.word	0x0800201f
 8001dbc:	08001e0d 	.word	0x08001e0d
 8001dc0:	0800201f 	.word	0x0800201f
 8001dc4:	0800201f 	.word	0x0800201f
 8001dc8:	0800201f 	.word	0x0800201f
 8001dcc:	0800201f 	.word	0x0800201f
 8001dd0:	0800201f 	.word	0x0800201f
 8001dd4:	0800201f 	.word	0x0800201f
 8001dd8:	0800201f 	.word	0x0800201f
 8001ddc:	08001e13 	.word	0x08001e13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001de0:	4b94      	ldr	r3, [pc, #592]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001dec:	4b91      	ldr	r3, [pc, #580]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	4a90      	ldr	r2, [pc, #576]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001dfe:	e111      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e00:	4b8d      	ldr	r3, [pc, #564]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e02:	61bb      	str	r3, [r7, #24]
      break;
 8001e04:	e10e      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e06:	4b8d      	ldr	r3, [pc, #564]	@ (800203c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e08:	61bb      	str	r3, [r7, #24]
      break;
 8001e0a:	e10b      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e0e:	61bb      	str	r3, [r7, #24]
      break;
 8001e10:	e108      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e12:	4b88      	ldr	r3, [pc, #544]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e1c:	4b85      	ldr	r3, [pc, #532]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e28:	4b82      	ldr	r3, [pc, #520]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e32:	4b80      	ldr	r3, [pc, #512]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e36:	08db      	lsrs	r3, r3, #3
 8001e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80e1 	beq.w	8002018 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	f000 8083 	beq.w	8001f64 <HAL_RCC_GetSysClockFreq+0x204>
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	f200 80a1 	bhi.w	8001fa8 <HAL_RCC_GetSysClockFreq+0x248>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x114>
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d056      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e72:	e099      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e74:	4b6f      	ldr	r3, [pc, #444]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d02d      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e80:	4b6c      	ldr	r3, [pc, #432]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	4a6b      	ldr	r2, [pc, #428]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eaa:	4b62      	ldr	r3, [pc, #392]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ebe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001eda:	e087      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eee:	4b51      	ldr	r3, [pc, #324]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f1e:	e065      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800204c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f32:	4b40      	ldr	r3, [pc, #256]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f62:	e043      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002050 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f76:	4b2f      	ldr	r3, [pc, #188]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fa6:	e021      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800204c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fba:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	0a5b      	lsrs	r3, r3, #9
 8001ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002004:	edd7 6a07 	vldr	s13, [r7, #28]
 8002008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002010:	ee17 3a90 	vmov	r3, s15
 8002014:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002016:	e005      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
      break;
 800201c:	e002      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002020:	61bb      	str	r3, [r7, #24]
      break;
 8002022:	bf00      	nop
  }

  return sysclockfreq;
 8002024:	69bb      	ldr	r3, [r7, #24]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	58024400 	.word	0x58024400
 8002038:	03d09000 	.word	0x03d09000
 800203c:	003d0900 	.word	0x003d0900
 8002040:	007a1200 	.word	0x007a1200
 8002044:	46000000 	.word	0x46000000
 8002048:	4c742400 	.word	0x4c742400
 800204c:	4a742400 	.word	0x4a742400
 8002050:	4af42400 	.word	0x4af42400

08002054 <sqrtf>:
 8002054:	b508      	push	{r3, lr}
 8002056:	ed2d 8b02 	vpush	{d8}
 800205a:	eeb0 8a40 	vmov.f32	s16, s0
 800205e:	f000 f817 	bl	8002090 <__ieee754_sqrtf>
 8002062:	eeb4 8a48 	vcmp.f32	s16, s16
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	d60c      	bvs.n	8002086 <sqrtf+0x32>
 800206c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800208c <sqrtf+0x38>
 8002070:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8002074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002078:	d505      	bpl.n	8002086 <sqrtf+0x32>
 800207a:	f000 f815 	bl	80020a8 <__errno>
 800207e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8002082:	2321      	movs	r3, #33	@ 0x21
 8002084:	6003      	str	r3, [r0, #0]
 8002086:	ecbd 8b02 	vpop	{d8}
 800208a:	bd08      	pop	{r3, pc}
 800208c:	00000000 	.word	0x00000000

08002090 <__ieee754_sqrtf>:
 8002090:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8002094:	4770      	bx	lr

08002096 <memset>:
 8002096:	4402      	add	r2, r0
 8002098:	4603      	mov	r3, r0
 800209a:	4293      	cmp	r3, r2
 800209c:	d100      	bne.n	80020a0 <memset+0xa>
 800209e:	4770      	bx	lr
 80020a0:	f803 1b01 	strb.w	r1, [r3], #1
 80020a4:	e7f9      	b.n	800209a <memset+0x4>
	...

080020a8 <__errno>:
 80020a8:	4b01      	ldr	r3, [pc, #4]	@ (80020b0 <__errno+0x8>)
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2400001c 	.word	0x2400001c

080020b4 <__libc_init_array>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	4d0d      	ldr	r5, [pc, #52]	@ (80020ec <__libc_init_array+0x38>)
 80020b8:	4c0d      	ldr	r4, [pc, #52]	@ (80020f0 <__libc_init_array+0x3c>)
 80020ba:	1b64      	subs	r4, r4, r5
 80020bc:	10a4      	asrs	r4, r4, #2
 80020be:	2600      	movs	r6, #0
 80020c0:	42a6      	cmp	r6, r4
 80020c2:	d109      	bne.n	80020d8 <__libc_init_array+0x24>
 80020c4:	4d0b      	ldr	r5, [pc, #44]	@ (80020f4 <__libc_init_array+0x40>)
 80020c6:	4c0c      	ldr	r4, [pc, #48]	@ (80020f8 <__libc_init_array+0x44>)
 80020c8:	f000 f818 	bl	80020fc <_init>
 80020cc:	1b64      	subs	r4, r4, r5
 80020ce:	10a4      	asrs	r4, r4, #2
 80020d0:	2600      	movs	r6, #0
 80020d2:	42a6      	cmp	r6, r4
 80020d4:	d105      	bne.n	80020e2 <__libc_init_array+0x2e>
 80020d6:	bd70      	pop	{r4, r5, r6, pc}
 80020d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020dc:	4798      	blx	r3
 80020de:	3601      	adds	r6, #1
 80020e0:	e7ee      	b.n	80020c0 <__libc_init_array+0xc>
 80020e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020e6:	4798      	blx	r3
 80020e8:	3601      	adds	r6, #1
 80020ea:	e7f2      	b.n	80020d2 <__libc_init_array+0x1e>
 80020ec:	0800212c 	.word	0x0800212c
 80020f0:	0800212c 	.word	0x0800212c
 80020f4:	0800212c 	.word	0x0800212c
 80020f8:	08002134 	.word	0x08002134

080020fc <_init>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr

08002108 <_fini>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr
