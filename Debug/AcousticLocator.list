
AcousticLocator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000233c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080025d4  080025d4  000035d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800260c  0800260c  0000360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002614  08002614  00003614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000006c  24000000  08002618  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000174  2400006c  08002684  0000406c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001e0  08002684  000041e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a08c  00000000  00000000  0000409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b3b  00000000  00000000  0000e126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000768  00000000  00000000  0000fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000056b  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038cb6  00000000  00000000  0001093b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00008bce  00000000  00000000  000495f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015ac4c  00000000  00000000  000521bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ace0b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001eec  00000000  00000000  001ace50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  001aed3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080025bc 	.word	0x080025bc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	080025bc 	.word	0x080025bc

080002d8 <_ZN14CircularBufferC1Ev>:
#include "CircularBuffer.h"
//#include <iostream>

	CircularBuffer::CircularBuffer(){}
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	615a      	str	r2, [r3, #20]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4618      	mov	r0, r3
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <_ZN3PIDC1Efff>:
#include "PID.h"
#include "CircularBuffer.h"

	CircularBuffer errors;

    PID::PID(float kp=0.0, float ki=0.0, float kd=0.0)
 80002fa:	b480      	push	{r7}
 80002fc:	b085      	sub	sp, #20
 80002fe:	af00      	add	r7, sp, #0
 8000300:	60f8      	str	r0, [r7, #12]
 8000302:	ed87 0a02 	vstr	s0, [r7, #8]
 8000306:	edc7 0a01 	vstr	s1, [r7, #4]
 800030a:	ed87 1a00 	vstr	s2, [r7]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	f04f 0200 	mov.w	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	f04f 0200 	mov.w	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	f04f 0200 	mov.w	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	f04f 0200 	mov.w	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	f04f 0200 	mov.w	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	f04f 0200 	mov.w	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
    {
        propertionalGain = kp;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	68ba      	ldr	r2, [r7, #8]
 8000342:	601a      	str	r2, [r3, #0]
        integralGain = ki;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	605a      	str	r2, [r3, #4]
        derivativeGain = kd;
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	609a      	str	r2, [r3, #8]
    }
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	4618      	mov	r0, r3
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
	...

08000360 <_Z41__static_initialization_and_destruction_0v>:
        sum += propertionalGain*error;
        sum += integralGain*errors.getSum();
        sum += derivativeGain*(error - errors.getPrevious());

        return sum;
    }
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	CircularBuffer errors;
 8000364:	4802      	ldr	r0, [pc, #8]	@ (8000370 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8000366:	f7ff ffb7 	bl	80002d8 <_ZN14CircularBufferC1Ev>
    }
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	24000088 	.word	0x24000088

08000374 <_GLOBAL__sub_I_errors>:
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
 8000378:	f7ff fff2 	bl	8000360 <_Z41__static_initialization_and_destruction_0v>
 800037c:	bd80      	pop	{r7, pc}

0800037e <_ZSt4acosf>:
  using ::acos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  acos(float __x)
  { return __builtin_acosf(__x); }
 800037e:	b580      	push	{r7, lr}
 8000380:	b082      	sub	sp, #8
 8000382:	af00      	add	r7, sp, #0
 8000384:	ed87 0a01 	vstr	s0, [r7, #4]
 8000388:	ed97 0a01 	vldr	s0, [r7, #4]
 800038c:	f001 febe 	bl	800210c <acosf>
 8000390:	eef0 7a40 	vmov.f32	s15, s0
 8000394:	eeb0 0a67 	vmov.f32	s0, s15
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}

0800039e <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 800039e:	b580      	push	{r7, lr}
 80003a0:	b082      	sub	sp, #8
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	ed87 0a01 	vstr	s0, [r7, #4]
 80003a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80003ac:	f001 fef8 	bl	80021a0 <atanf>
 80003b0:	eef0 7a40 	vmov.f32	s15, s0
 80003b4:	eeb0 0a67 	vmov.f32	s0, s15
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	ed87 0a01 	vstr	s0, [r7, #4]
 80003c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80003cc:	f001 feca 	bl	8002164 <sqrtf>
 80003d0:	eef0 7a40 	vmov.f32	s15, s0
 80003d4:	eeb0 0a67 	vmov.f32	s0, s15
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b0a0      	sub	sp, #128	@ 0x80
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	PID controlMotorA(0.5, 0.1, 0.0);
 80003e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80003ea:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 80004a4 <main+0xc4>
 80003ee:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80004a8 <main+0xc8>
 80003f2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff7f 	bl	80002fa <_ZN3PIDC1Efff>
	PID controlMotorB(0.5, 0.1, 0.0);
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 80004a4 <main+0xc4>
 8000404:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80004a8 <main+0xc8>
 8000408:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ff74 	bl	80002fa <_ZN3PIDC1Efff>

	// Signal Processing Variables
	float distance2Source = 0.0;
 8000412:	f04f 0300 	mov.w	r3, #0
 8000416:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Coordinate Variables
	float rectangular[3];
	float xCoord = 0.0;
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	67bb      	str	r3, [r7, #120]	@ 0x78
	float yCoord = 0.0;
 800041e:	f04f 0300 	mov.w	r3, #0
 8000422:	677b      	str	r3, [r7, #116]	@ 0x74
	float zCoord = 0.0;
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	673b      	str	r3, [r7, #112]	@ 0x70

	float spherical[2];
	bool AziDirection = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	bool AltiDirection = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	float AziDeg = 0.0;
 8000436:	f04f 0300 	mov.w	r3, #0
 800043a:	66bb      	str	r3, [r7, #104]	@ 0x68
	float AltiDeg = 0.0;
 800043c:	f04f 0300 	mov.w	r3, #0
 8000440:	667b      	str	r3, [r7, #100]	@ 0x64

	// Control Variables
	float errorA = 0.0;
 8000442:	f04f 0300 	mov.w	r3, #0
 8000446:	663b      	str	r3, [r7, #96]	@ 0x60
	float targetDegA = 0.0;
 8000448:	f04f 0300 	mov.w	r3, #0
 800044c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float currentDegA = 0.0;
 800044e:	f04f 0300 	mov.w	r3, #0
 8000452:	65bb      	str	r3, [r7, #88]	@ 0x58
	float newTargetA = 0.0;
 8000454:	f04f 0300 	mov.w	r3, #0
 8000458:	657b      	str	r3, [r7, #84]	@ 0x54

	float errorB = 0.0;
 800045a:	f04f 0300 	mov.w	r3, #0
 800045e:	653b      	str	r3, [r7, #80]	@ 0x50
	float targetDegB = 0.0;
 8000460:	f04f 0300 	mov.w	r3, #0
 8000464:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float currentDegB = 0.0;
 8000466:	f04f 0300 	mov.w	r3, #0
 800046a:	64bb      	str	r3, [r7, #72]	@ 0x48
	float newTargetB = 0.0;
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	647b      	str	r3, [r7, #68]	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000472:	f000 fb3b 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000476:	f000 f819 	bl	80004ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047a:	f000 f8a3 	bl	80005c4 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800047e:	2000      	movs	r0, #0
 8000480:	f000 fabe 	bl	8000a00 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000484:	2001      	movs	r0, #1
 8000486:	f000 fabb 	bl	8000a00 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800048a:	2002      	movs	r0, #2
 800048c:	f000 fab8 	bl	8000a00 <BSP_LED_Init>
	  // processing looking for keyword

	  // locate keyword in x-y-z

	  // coordinates are converted to azimuth-altitude
	  rectangular2Spherical(rectangular, spherical, distance2Source);
 8000490:	463a      	mov	r2, r7
 8000492:	f107 0308 	add.w	r3, r7, #8
 8000496:	ed97 0a1f 	vldr	s0, [r7, #124]	@ 0x7c
 800049a:	4611      	mov	r1, r2
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f933 	bl	8000708 <_Z21rectangular2SphericalPfS_f>
 80004a2:	e7f5      	b.n	8000490 <main+0xb0>
 80004a4:	00000000 	.word	0x00000000
 80004a8:	3dcccccd 	.word	0x3dcccccd

080004ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b09c      	sub	sp, #112	@ 0x70
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004b6:	224c      	movs	r2, #76	@ 0x4c
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 f84c 	bl	8002558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2220      	movs	r2, #32
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 f846 	bl	8002558 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004cc:	2002      	movs	r0, #2
 80004ce:	f000 fe59 	bl	8001184 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004d2:	2300      	movs	r3, #0
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	4b39      	ldr	r3, [pc, #228]	@ (80005bc <_Z18SystemClock_Configv+0x110>)
 80004d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004da:	4a38      	ldr	r2, [pc, #224]	@ (80005bc <_Z18SystemClock_Configv+0x110>)
 80004dc:	f023 0301 	bic.w	r3, r3, #1
 80004e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004e2:	4b36      	ldr	r3, [pc, #216]	@ (80005bc <_Z18SystemClock_Configv+0x110>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	4b34      	ldr	r3, [pc, #208]	@ (80005c0 <_Z18SystemClock_Configv+0x114>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004f4:	4a32      	ldr	r2, [pc, #200]	@ (80005c0 <_Z18SystemClock_Configv+0x114>)
 80004f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b30      	ldr	r3, [pc, #192]	@ (80005c0 <_Z18SystemClock_Configv+0x114>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000508:	bf00      	nop
 800050a:	4b2d      	ldr	r3, [pc, #180]	@ (80005c0 <_Z18SystemClock_Configv+0x114>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000516:	bf14      	ite	ne
 8000518:	2301      	movne	r3, #1
 800051a:	2300      	moveq	r3, #0
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1f3      	bne.n	800050a <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000522:	2302      	movs	r3, #2
 8000524:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000526:	2301      	movs	r3, #1
 8000528:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052a:	2340      	movs	r3, #64	@ 0x40
 800052c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000532:	2300      	movs	r3, #0
 8000534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000536:	2304      	movs	r3, #4
 8000538:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 800053a:	2328      	movs	r3, #40	@ 0x28
 800053c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800053e:	2304      	movs	r3, #4
 8000540:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000542:	2304      	movs	r3, #4
 8000544:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000546:	2302      	movs	r3, #2
 8000548:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800054a:	230c      	movs	r3, #12
 800054c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800054e:	2300      	movs	r3, #0
 8000550:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fe4c 	bl	80011f8 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	bf14      	ite	ne
 8000566:	2301      	movne	r3, #1
 8000568:	2300      	moveq	r3, #0
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000570:	f000 f911 	bl	8000796 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	233f      	movs	r3, #63	@ 0x3f
 8000576:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	2303      	movs	r3, #3
 800057a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000584:	2340      	movs	r3, #64	@ 0x40
 8000586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000588:	2340      	movs	r3, #64	@ 0x40
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800058c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000590:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000592:	2340      	movs	r3, #64	@ 0x40
 8000594:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2102      	movs	r1, #2
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fa86 	bl	8001aac <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	bf14      	ite	ne
 80005a6:	2301      	movne	r3, #1
 80005a8:	2300      	moveq	r3, #0
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 80005b0:	f000 f8f1 	bl	8000796 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3770      	adds	r7, #112	@ 0x70
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	58000400 	.word	0x58000400
 80005c0:	58024800 	.word	0x58024800

080005c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	@ 0x28
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b46      	ldr	r3, [pc, #280]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 80005dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e0:	4a44      	ldr	r2, [pc, #272]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ea:	4b42      	ldr	r3, [pc, #264]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f8:	4b3e      	ldr	r3, [pc, #248]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 80005fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005fe:	4a3d      	ldr	r2, [pc, #244]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 8000600:	f043 0320 	orr.w	r3, r3, #32
 8000604:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000608:	4b3a      	ldr	r3, [pc, #232]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 800060a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800060e:	f003 0320 	and.w	r3, r3, #32
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	4b37      	ldr	r3, [pc, #220]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 8000618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061c:	4a35      	ldr	r2, [pc, #212]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 800061e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000622:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000626:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000634:	4b2f      	ldr	r3, [pc, #188]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 8000636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063a:	4a2e      	ldr	r2, [pc, #184]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 800063c:	f043 0308 	orr.w	r3, r3, #8
 8000640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 8000646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000658:	4a26      	ldr	r2, [pc, #152]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000662:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <_ZL12MX_GPIO_Initv+0x130>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000668:	f003 0310 	and.w	r3, r3, #16
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2102      	movs	r1, #2
 8000674:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <_ZL12MX_GPIO_Initv+0x134>)
 8000676:	f000 fd6b 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	481b      	ldr	r0, [pc, #108]	@ (80006fc <_ZL12MX_GPIO_Initv+0x138>)
 8000690:	f000 fbae 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000694:	2307      	movs	r3, #7
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000698:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	4815      	ldr	r0, [pc, #84]	@ (8000700 <_ZL12MX_GPIO_Initv+0x13c>)
 80006aa:	f000 fba1 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80006ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006c0:	2307      	movs	r3, #7
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	480e      	ldr	r0, [pc, #56]	@ (8000704 <_ZL12MX_GPIO_Initv+0x140>)
 80006cc:	f000 fb90 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006d0:	2302      	movs	r3, #2
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <_ZL12MX_GPIO_Initv+0x134>)
 80006e8:	f000 fb82 	bl	8000df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	@ 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58024400 	.word	0x58024400
 80006f8:	58021000 	.word	0x58021000
 80006fc:	58020800 	.word	0x58020800
 8000700:	58021400 	.word	0x58021400
 8000704:	58020c00 	.word	0x58020c00

08000708 <_Z21rectangular2SphericalPfS_f>:

/* USER CODE BEGIN 4 */
void rectangular2Spherical(float rect[], float sph[], float dist)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	ed87 0a01 	vstr	s0, [r7, #4]
	float r = sqrt(rect[0]*rect[0] + rect[1]*rect[1]);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	ed93 7a00 	vldr	s14, [r3]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	edd3 7a00 	vldr	s15, [r3]
 8000722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3304      	adds	r3, #4
 800072a:	edd3 6a00 	vldr	s13, [r3]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3304      	adds	r3, #4
 8000732:	edd3 7a00 	vldr	s15, [r3]
 8000736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800073a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800073e:	eeb0 0a67 	vmov.f32	s0, s15
 8000742:	f7ff fe3c 	bl	80003be <_ZSt4sqrtf>
 8000746:	ed87 0a05 	vstr	s0, [r7, #20]
	sph[0] = std::atan(rect[1]/rect[0]);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3304      	adds	r3, #4
 800074e:	ed93 7a00 	vldr	s14, [r3]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	edd3 7a00 	vldr	s15, [r3]
 8000758:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800075c:	eeb0 0a66 	vmov.f32	s0, s13
 8000760:	f7ff fe1d 	bl	800039e <_ZSt4atanf>
 8000764:	eef0 7a40 	vmov.f32	s15, s0
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	edc3 7a00 	vstr	s15, [r3]
	sph[1] = std::acos(r/dist);
 800076e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000772:	edd7 7a01 	vldr	s15, [r7, #4]
 8000776:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	1d1c      	adds	r4, r3, #4
 800077e:	eeb0 0a66 	vmov.f32	s0, s13
 8000782:	f7ff fdfc 	bl	800037e <_ZSt4acosf>
 8000786:	eef0 7a40 	vmov.f32	s15, s0
 800078a:	edc4 7a00 	vstr	s15, [r4]
}
 800078e:	bf00      	nop
 8000790:	371c      	adds	r7, #28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd90      	pop	{r4, r7, pc}

08000796 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079a:	b672      	cpsid	i
}
 800079c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079e:	bf00      	nop
 80007a0:	e7fd      	b.n	800079e <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <HAL_MspInit+0x30>)
 80007ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007b0:	4a08      	ldr	r2, [pc, #32]	@ (80007d4 <HAL_MspInit+0x30>)
 80007b2:	f043 0302 	orr.w	r3, r3, #2
 80007b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_MspInit+0x30>)
 80007bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007c0:	f003 0302 	and.w	r3, r3, #2
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	58024400 	.word	0x58024400

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <NMI_Handler+0x4>

080007e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <MemManage_Handler+0x4>

080007f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <UsageFault_Handler+0x4>

08000800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 f9cf 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800083c:	4b43      	ldr	r3, [pc, #268]	@ (800094c <SystemInit+0x114>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000842:	4a42      	ldr	r2, [pc, #264]	@ (800094c <SystemInit+0x114>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800084c:	4b40      	ldr	r3, [pc, #256]	@ (8000950 <SystemInit+0x118>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 030f 	and.w	r3, r3, #15
 8000854:	2b06      	cmp	r3, #6
 8000856:	d807      	bhi.n	8000868 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000858:	4b3d      	ldr	r3, [pc, #244]	@ (8000950 <SystemInit+0x118>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f023 030f 	bic.w	r3, r3, #15
 8000860:	4a3b      	ldr	r2, [pc, #236]	@ (8000950 <SystemInit+0x118>)
 8000862:	f043 0307 	orr.w	r3, r3, #7
 8000866:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000868:	4b3a      	ldr	r3, [pc, #232]	@ (8000954 <SystemInit+0x11c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a39      	ldr	r2, [pc, #228]	@ (8000954 <SystemInit+0x11c>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000874:	4b37      	ldr	r3, [pc, #220]	@ (8000954 <SystemInit+0x11c>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800087a:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <SystemInit+0x11c>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4935      	ldr	r1, [pc, #212]	@ (8000954 <SystemInit+0x11c>)
 8000880:	4b35      	ldr	r3, [pc, #212]	@ (8000958 <SystemInit+0x120>)
 8000882:	4013      	ands	r3, r2
 8000884:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000886:	4b32      	ldr	r3, [pc, #200]	@ (8000950 <SystemInit+0x118>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	2b00      	cmp	r3, #0
 8000890:	d007      	beq.n	80008a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000892:	4b2f      	ldr	r3, [pc, #188]	@ (8000950 <SystemInit+0x118>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f023 030f 	bic.w	r3, r3, #15
 800089a:	4a2d      	ldr	r2, [pc, #180]	@ (8000950 <SystemInit+0x118>)
 800089c:	f043 0307 	orr.w	r3, r3, #7
 80008a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000954 <SystemInit+0x11c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <SystemInit+0x11c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008ae:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <SystemInit+0x11c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008b4:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <SystemInit+0x11c>)
 80008b6:	4a29      	ldr	r2, [pc, #164]	@ (800095c <SystemInit+0x124>)
 80008b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008ba:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <SystemInit+0x11c>)
 80008bc:	4a28      	ldr	r2, [pc, #160]	@ (8000960 <SystemInit+0x128>)
 80008be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008c0:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <SystemInit+0x11c>)
 80008c2:	4a28      	ldr	r2, [pc, #160]	@ (8000964 <SystemInit+0x12c>)
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008c6:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <SystemInit+0x11c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008cc:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <SystemInit+0x11c>)
 80008ce:	4a25      	ldr	r2, [pc, #148]	@ (8000964 <SystemInit+0x12c>)
 80008d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008d2:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <SystemInit+0x11c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <SystemInit+0x11c>)
 80008da:	4a22      	ldr	r2, [pc, #136]	@ (8000964 <SystemInit+0x12c>)
 80008dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008de:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <SystemInit+0x11c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <SystemInit+0x11c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000954 <SystemInit+0x11c>)
 80008ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <SystemInit+0x11c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <SystemInit+0x130>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <SystemInit+0x134>)
 80008fc:	4013      	ands	r3, r2
 80008fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000902:	d202      	bcs.n	800090a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000904:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <SystemInit+0x138>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800090a:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <SystemInit+0x11c>)
 800090c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d113      	bne.n	8000940 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <SystemInit+0x11c>)
 800091a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800091e:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <SystemInit+0x11c>)
 8000920:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000924:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <SystemInit+0x13c>)
 800092a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800092e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <SystemInit+0x11c>)
 8000932:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000936:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <SystemInit+0x11c>)
 8000938:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800093c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00
 8000950:	52002000 	.word	0x52002000
 8000954:	58024400 	.word	0x58024400
 8000958:	eaf6ed7f 	.word	0xeaf6ed7f
 800095c:	02020200 	.word	0x02020200
 8000960:	01ff0000 	.word	0x01ff0000
 8000964:	01010280 	.word	0x01010280
 8000968:	5c001000 	.word	0x5c001000
 800096c:	ffff0000 	.word	0xffff0000
 8000970:	51008108 	.word	0x51008108
 8000974:	52004000 	.word	0x52004000

08000978 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <ExitRun0Mode+0x2c>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <ExitRun0Mode+0x2c>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000988:	bf00      	nop
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <ExitRun0Mode+0x2c>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f9      	beq.n	800098a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000996:	bf00      	nop
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	58024800 	.word	0x58024800

080009a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009a8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80009e4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80009ac:	f7ff ffe4 	bl	8000978 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b0:	f7ff ff42 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	@ (80009ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	@ (80009f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009da:	f001 fdcb 	bl	8002574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009de:	f7ff fcff 	bl	80003e0 <main>
  bx  lr
 80009e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80009e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009ec:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80009f0:	08002618 	.word	0x08002618
  ldr r2, =_sbss
 80009f4:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80009f8:	240001e0 	.word	0x240001e0

080009fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC3_IRQHandler>
	...

08000a00 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	@ 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d009      	beq.n	8000a28 <BSP_LED_Init+0x28>
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d006      	beq.n	8000a28 <BSP_LED_Init+0x28>
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d003      	beq.n	8000a28 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a20:	f06f 0301 	mvn.w	r3, #1
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a26:	e055      	b.n	8000ad4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10f      	bne.n	8000a4e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <BSP_LED_Init+0xe0>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a34:	4a2a      	ldr	r2, [pc, #168]	@ (8000ae0 <BSP_LED_Init+0xe0>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <BSP_LED_Init+0xe0>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	e021      	b.n	8000a92 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10f      	bne.n	8000a74 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000a54:	4b22      	ldr	r3, [pc, #136]	@ (8000ae0 <BSP_LED_Init+0xe0>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <BSP_LED_Init+0xe0>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <BSP_LED_Init+0xe0>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	e00e      	b.n	8000a92 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000a74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <BSP_LED_Init+0xe0>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	4a19      	ldr	r2, [pc, #100]	@ (8000ae0 <BSP_LED_Init+0xe0>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <BSP_LED_Init+0xe0>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4a13      	ldr	r2, [pc, #76]	@ (8000ae4 <BSP_LED_Init+0xe4>)
 8000a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae8 <BSP_LED_Init+0xe8>)
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	f107 0218 	add.w	r2, r7, #24
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f99a 	bl	8000df0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <BSP_LED_Init+0xe8>)
 8000ac0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <BSP_LED_Init+0xe4>)
 8000ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f000 fb3e 	bl	8001150 <HAL_GPIO_WritePin>
  }

  return ret;
 8000ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3730      	adds	r7, #48	@ 0x30
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	58024400 	.word	0x58024400
 8000ae4:	080025e4 	.word	0x080025e4
 8000ae8:	24000008 	.word	0x24000008

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af2:	2003      	movs	r0, #3
 8000af4:	f000 f94a 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000af8:	f001 f98e 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8000afc:	4602      	mov	r2, r0
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_Init+0x68>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	f003 030f 	and.w	r3, r3, #15
 8000b08:	4913      	ldr	r1, [pc, #76]	@ (8000b58 <HAL_Init+0x6c>)
 8000b0a:	5ccb      	ldrb	r3, [r1, r3]
 8000b0c:	f003 031f 	and.w	r3, r3, #31
 8000b10:	fa22 f303 	lsr.w	r3, r2, r3
 8000b14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_Init+0x68>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <HAL_Init+0x6c>)
 8000b20:	5cd3      	ldrb	r3, [r2, r3]
 8000b22:	f003 031f 	and.w	r3, r3, #31
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <HAL_Init+0x70>)
 8000b2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <HAL_Init+0x74>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f814 	bl	8000b64 <HAL_InitTick>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e002      	b.n	8000b4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b46:	f7ff fe2d 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	58024400 	.word	0x58024400
 8000b58:	080025d4 	.word	0x080025d4
 8000b5c:	24000004 	.word	0x24000004
 8000b60:	24000000 	.word	0x24000000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b6c:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_InitTick+0x60>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e021      	b.n	8000bbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <HAL_InitTick+0x64>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_InitTick+0x60>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f921 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f8f9 	bl	8000da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	@ (8000bcc <HAL_InitTick+0x68>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000018 	.word	0x24000018
 8000bc8:	24000000 	.word	0x24000000
 8000bcc:	24000014 	.word	0x24000014

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	24000018 	.word	0x24000018
 8000bf4:	240000a4 	.word	0x240000a4

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	240000a4 	.word	0x240000a4

08000c10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <HAL_GetREVID+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	0c1b      	lsrs	r3, r3, #16
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	5c001000 	.word	0x5c001000

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <__NVIC_SetPriorityGrouping+0x40>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	4313      	orrs	r3, r2
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <__NVIC_SetPriorityGrouping+0x40>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	05fa0000 	.word	0x05fa0000

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	@ 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f7ff ff8e 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff47 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff5e 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff90 	bl	8000ce0 <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5f 	bl	8000c8c <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffb2 	bl	8000d48 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	@ 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000dfe:	4b89      	ldr	r3, [pc, #548]	@ (8001024 <HAL_GPIO_Init+0x234>)
 8000e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e02:	e194      	b.n	800112e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 8186 	beq.w	8001128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d005      	beq.n	8000e34 <HAL_GPIO_Init+0x44>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d130      	bne.n	8000e96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	091b      	lsrs	r3, r3, #4
 8000e80:	f003 0201 	and.w	r2, r3, #1
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d017      	beq.n	8000ed2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d123      	bne.n	8000f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	69b9      	ldr	r1, [r7, #24]
 8000f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0203 	and.w	r2, r3, #3
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 80e0 	beq.w	8001128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f68:	4b2f      	ldr	r3, [pc, #188]	@ (8001028 <HAL_GPIO_Init+0x238>)
 8000f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8001028 <HAL_GPIO_Init+0x238>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f78:	4b2b      	ldr	r3, [pc, #172]	@ (8001028 <HAL_GPIO_Init+0x238>)
 8000f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f86:	4a29      	ldr	r2, [pc, #164]	@ (800102c <HAL_GPIO_Init+0x23c>)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a20      	ldr	r2, [pc, #128]	@ (8001030 <HAL_GPIO_Init+0x240>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d052      	beq.n	8001058 <HAL_GPIO_Init+0x268>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8001034 <HAL_GPIO_Init+0x244>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d031      	beq.n	800101e <HAL_GPIO_Init+0x22e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001038 <HAL_GPIO_Init+0x248>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d02b      	beq.n	800101a <HAL_GPIO_Init+0x22a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800103c <HAL_GPIO_Init+0x24c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d025      	beq.n	8001016 <HAL_GPIO_Init+0x226>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <HAL_GPIO_Init+0x250>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01f      	beq.n	8001012 <HAL_GPIO_Init+0x222>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <HAL_GPIO_Init+0x254>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0x21e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <HAL_GPIO_Init+0x258>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x21a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	@ (800104c <HAL_GPIO_Init+0x25c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x216>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <HAL_GPIO_Init+0x260>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x212>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <HAL_GPIO_Init+0x264>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x20e>
 8000ffa:	2309      	movs	r3, #9
 8000ffc:	e02d      	b.n	800105a <HAL_GPIO_Init+0x26a>
 8000ffe:	230a      	movs	r3, #10
 8001000:	e02b      	b.n	800105a <HAL_GPIO_Init+0x26a>
 8001002:	2308      	movs	r3, #8
 8001004:	e029      	b.n	800105a <HAL_GPIO_Init+0x26a>
 8001006:	2307      	movs	r3, #7
 8001008:	e027      	b.n	800105a <HAL_GPIO_Init+0x26a>
 800100a:	2306      	movs	r3, #6
 800100c:	e025      	b.n	800105a <HAL_GPIO_Init+0x26a>
 800100e:	2305      	movs	r3, #5
 8001010:	e023      	b.n	800105a <HAL_GPIO_Init+0x26a>
 8001012:	2304      	movs	r3, #4
 8001014:	e021      	b.n	800105a <HAL_GPIO_Init+0x26a>
 8001016:	2303      	movs	r3, #3
 8001018:	e01f      	b.n	800105a <HAL_GPIO_Init+0x26a>
 800101a:	2302      	movs	r3, #2
 800101c:	e01d      	b.n	800105a <HAL_GPIO_Init+0x26a>
 800101e:	2301      	movs	r3, #1
 8001020:	e01b      	b.n	800105a <HAL_GPIO_Init+0x26a>
 8001022:	bf00      	nop
 8001024:	58000080 	.word	0x58000080
 8001028:	58024400 	.word	0x58024400
 800102c:	58000400 	.word	0x58000400
 8001030:	58020000 	.word	0x58020000
 8001034:	58020400 	.word	0x58020400
 8001038:	58020800 	.word	0x58020800
 800103c:	58020c00 	.word	0x58020c00
 8001040:	58021000 	.word	0x58021000
 8001044:	58021400 	.word	0x58021400
 8001048:	58021800 	.word	0x58021800
 800104c:	58021c00 	.word	0x58021c00
 8001050:	58022000 	.word	0x58022000
 8001054:	58022400 	.word	0x58022400
 8001058:	2300      	movs	r3, #0
 800105a:	69fa      	ldr	r2, [r7, #28]
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106a:	4938      	ldr	r1, [pc, #224]	@ (800114c <HAL_GPIO_Init+0x35c>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800109e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	3301      	adds	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa22 f303 	lsr.w	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	f47f ae63 	bne.w	8000e04 <HAL_GPIO_Init+0x14>
  }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3724      	adds	r7, #36	@ 0x24
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	58000400 	.word	0x58000400

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800116c:	e003      	b.n	8001176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	619a      	str	r2, [r3, #24]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <HAL_PWREx_ConfigSupply+0x70>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b04      	cmp	r3, #4
 8001196:	d00a      	beq.n	80011ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <HAL_PWREx_ConfigSupply+0x70>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e01f      	b.n	80011ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e01d      	b.n	80011ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_PWREx_ConfigSupply+0x70>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f023 0207 	bic.w	r2, r3, #7
 80011b6:	490f      	ldr	r1, [pc, #60]	@ (80011f4 <HAL_PWREx_ConfigSupply+0x70>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011be:	f7ff fd1b 	bl	8000bf8 <HAL_GetTick>
 80011c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011c4:	e009      	b.n	80011da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011c6:	f7ff fd17 	bl	8000bf8 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011d4:	d901      	bls.n	80011da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e007      	b.n	80011ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_PWREx_ConfigSupply+0x70>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011e6:	d1ee      	bne.n	80011c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	58024800 	.word	0x58024800

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	@ 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	f000 bc48 	b.w	8001a9c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8088 	beq.w	800132a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121a:	4b99      	ldr	r3, [pc, #612]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001224:	4b96      	ldr	r3, [pc, #600]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800122a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800122c:	2b10      	cmp	r3, #16
 800122e:	d007      	beq.n	8001240 <HAL_RCC_OscConfig+0x48>
 8001230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001232:	2b18      	cmp	r3, #24
 8001234:	d111      	bne.n	800125a <HAL_RCC_OscConfig+0x62>
 8001236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d10c      	bne.n	800125a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	4b8f      	ldr	r3, [pc, #572]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d06d      	beq.n	8001328 <HAL_RCC_OscConfig+0x130>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d169      	bne.n	8001328 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	f000 bc21 	b.w	8001a9c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x7a>
 8001264:	4b86      	ldr	r3, [pc, #536]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a85      	ldr	r2, [pc, #532]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 800126a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e02e      	b.n	80012d0 <HAL_RCC_OscConfig+0xd8>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x9c>
 800127a:	4b81      	ldr	r3, [pc, #516]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a80      	ldr	r2, [pc, #512]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b7e      	ldr	r3, [pc, #504]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a7d      	ldr	r2, [pc, #500]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 800128c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e01d      	b.n	80012d0 <HAL_RCC_OscConfig+0xd8>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0xc0>
 800129e:	4b78      	ldr	r3, [pc, #480]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a77      	ldr	r2, [pc, #476]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b75      	ldr	r3, [pc, #468]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a74      	ldr	r2, [pc, #464]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0xd8>
 80012b8:	4b71      	ldr	r3, [pc, #452]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a70      	ldr	r2, [pc, #448]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80012be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a6d      	ldr	r2, [pc, #436]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fc8e 	bl	8000bf8 <HAL_GetTick>
 80012dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fc8a 	bl	8000bf8 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	@ 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e3d4      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012f2:	4b63      	ldr	r3, [pc, #396]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe8>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fc7a 	bl	8000bf8 <HAL_GetTick>
 8001304:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fc76 	bl	8000bf8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	@ 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e3c0      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800131a:	4b59      	ldr	r3, [pc, #356]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x110>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80ca 	beq.w	80014cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001338:	4b51      	ldr	r3, [pc, #324]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001340:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001342:	4b4f      	ldr	r3, [pc, #316]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001346:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <HAL_RCC_OscConfig+0x166>
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	2b18      	cmp	r3, #24
 8001352:	d156      	bne.n	8001402 <HAL_RCC_OscConfig+0x20a>
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d151      	bne.n	8001402 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135e:	4b48      	ldr	r3, [pc, #288]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x17e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e392      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001376:	4b42      	ldr	r3, [pc, #264]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 0219 	bic.w	r2, r3, #25
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	493f      	ldr	r1, [pc, #252]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc36 	bl	8000bf8 <HAL_GetTick>
 800138c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fc32 	bl	8000bf8 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e37c      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a2:	4b37      	ldr	r3, [pc, #220]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	f7ff fc2f 	bl	8000c10 <HAL_GetREVID>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d817      	bhi.n	80013ec <HAL_RCC_OscConfig+0x1f4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	2b40      	cmp	r3, #64	@ 0x40
 80013c2:	d108      	bne.n	80013d6 <HAL_RCC_OscConfig+0x1de>
 80013c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80013cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80013ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d4:	e07a      	b.n	80014cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	031b      	lsls	r3, r3, #12
 80013e4:	4926      	ldr	r1, [pc, #152]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ea:	e06f      	b.n	80014cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	061b      	lsls	r3, r3, #24
 80013fa:	4921      	ldr	r1, [pc, #132]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001400:	e064      	b.n	80014cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d047      	beq.n	800149a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800140a:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 0219 	bic.w	r2, r3, #25
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	491a      	ldr	r1, [pc, #104]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fbec 	bl	8000bf8 <HAL_GetTick>
 8001420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001424:	f7ff fbe8 	bl	8000bf8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e332      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	f7ff fbe5 	bl	8000c10 <HAL_GetREVID>
 8001446:	4603      	mov	r3, r0
 8001448:	f241 0203 	movw	r2, #4099	@ 0x1003
 800144c:	4293      	cmp	r3, r2
 800144e:	d819      	bhi.n	8001484 <HAL_RCC_OscConfig+0x28c>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	2b40      	cmp	r3, #64	@ 0x40
 8001456:	d108      	bne.n	800146a <HAL_RCC_OscConfig+0x272>
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001460:	4a07      	ldr	r2, [pc, #28]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 8001462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001466:	6053      	str	r3, [r2, #4]
 8001468:	e030      	b.n	80014cc <HAL_RCC_OscConfig+0x2d4>
 800146a:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	031b      	lsls	r3, r3, #12
 8001478:	4901      	ldr	r1, [pc, #4]	@ (8001480 <HAL_RCC_OscConfig+0x288>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
 800147e:	e025      	b.n	80014cc <HAL_RCC_OscConfig+0x2d4>
 8001480:	58024400 	.word	0x58024400
 8001484:	4b9a      	ldr	r3, [pc, #616]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	4997      	ldr	r1, [pc, #604]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
 8001498:	e018      	b.n	80014cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149a:	4b95      	ldr	r3, [pc, #596]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a94      	ldr	r2, [pc, #592]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fba7 	bl	8000bf8 <HAL_GetTick>
 80014aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fba3 	bl	8000bf8 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e2ed      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014c0:	4b8b      	ldr	r3, [pc, #556]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80a9 	beq.w	800162c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014da:	4b85      	ldr	r3, [pc, #532]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014e4:	4b82      	ldr	r3, [pc, #520]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d007      	beq.n	8001500 <HAL_RCC_OscConfig+0x308>
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b18      	cmp	r3, #24
 80014f4:	d13a      	bne.n	800156c <HAL_RCC_OscConfig+0x374>
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d135      	bne.n	800156c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001500:	4b7b      	ldr	r3, [pc, #492]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x320>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	2b80      	cmp	r3, #128	@ 0x80
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e2c1      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001518:	f7ff fb7a 	bl	8000c10 <HAL_GetREVID>
 800151c:	4603      	mov	r3, r0
 800151e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001522:	4293      	cmp	r3, r2
 8001524:	d817      	bhi.n	8001556 <HAL_RCC_OscConfig+0x35e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	2b20      	cmp	r3, #32
 800152c:	d108      	bne.n	8001540 <HAL_RCC_OscConfig+0x348>
 800152e:	4b70      	ldr	r3, [pc, #448]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001536:	4a6e      	ldr	r2, [pc, #440]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001538:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800153c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800153e:	e075      	b.n	800162c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001540:	4b6b      	ldr	r3, [pc, #428]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	069b      	lsls	r3, r3, #26
 800154e:	4968      	ldr	r1, [pc, #416]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001554:	e06a      	b.n	800162c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001556:	4b66      	ldr	r3, [pc, #408]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	061b      	lsls	r3, r3, #24
 8001564:	4962      	ldr	r1, [pc, #392]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001566:	4313      	orrs	r3, r2
 8001568:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800156a:	e05f      	b.n	800162c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d042      	beq.n	80015fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001574:	4b5e      	ldr	r3, [pc, #376]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a5d      	ldr	r2, [pc, #372]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 800157a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb3a 	bl	8000bf8 <HAL_GetTick>
 8001584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001588:	f7ff fb36 	bl	8000bf8 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e280      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800159a:	4b55      	ldr	r3, [pc, #340]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015a6:	f7ff fb33 	bl	8000c10 <HAL_GetREVID>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d817      	bhi.n	80015e4 <HAL_RCC_OscConfig+0x3ec>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d108      	bne.n	80015ce <HAL_RCC_OscConfig+0x3d6>
 80015bc:	4b4c      	ldr	r3, [pc, #304]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80015c4:	4a4a      	ldr	r2, [pc, #296]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80015c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015ca:	6053      	str	r3, [r2, #4]
 80015cc:	e02e      	b.n	800162c <HAL_RCC_OscConfig+0x434>
 80015ce:	4b48      	ldr	r3, [pc, #288]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	069b      	lsls	r3, r3, #26
 80015dc:	4944      	ldr	r1, [pc, #272]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
 80015e2:	e023      	b.n	800162c <HAL_RCC_OscConfig+0x434>
 80015e4:	4b42      	ldr	r3, [pc, #264]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	061b      	lsls	r3, r3, #24
 80015f2:	493f      	ldr	r1, [pc, #252]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e018      	b.n	800162c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015fa:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a3c      	ldr	r2, [pc, #240]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001600:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff faf7 	bl	8000bf8 <HAL_GetTick>
 800160a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800160e:	f7ff faf3 	bl	8000bf8 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e23d      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001620:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d036      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d019      	beq.n	8001674 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001640:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001644:	4a2a      	ldr	r2, [pc, #168]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fad4 	bl	8000bf8 <HAL_GetTick>
 8001650:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fad0 	bl	8000bf8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e21a      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001666:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x45c>
 8001672:	e018      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001674:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 8001676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001678:	4a1d      	ldr	r2, [pc, #116]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff faba 	bl	8000bf8 <HAL_GetTick>
 8001684:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fab6 	bl	8000bf8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e200      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 800169c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d039      	beq.n	8001726 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a0c      	ldr	r2, [pc, #48]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80016c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fa97 	bl	8000bf8 <HAL_GetTick>
 80016ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ce:	f7ff fa93 	bl	8000bf8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1dd      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016e0:	4b03      	ldr	r3, [pc, #12]	@ (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x4d6>
 80016ec:	e01b      	b.n	8001726 <HAL_RCC_OscConfig+0x52e>
 80016ee:	bf00      	nop
 80016f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016f4:	4b9b      	ldr	r3, [pc, #620]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a9a      	ldr	r2, [pc, #616]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80016fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001700:	f7ff fa7a 	bl	8000bf8 <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001708:	f7ff fa76 	bl	8000bf8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1c0      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800171a:	4b92      	ldr	r3, [pc, #584]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8081 	beq.w	8001836 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001734:	4b8c      	ldr	r3, [pc, #560]	@ (8001968 <HAL_RCC_OscConfig+0x770>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a8b      	ldr	r2, [pc, #556]	@ (8001968 <HAL_RCC_OscConfig+0x770>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001740:	f7ff fa5a 	bl	8000bf8 <HAL_GetTick>
 8001744:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001748:	f7ff fa56 	bl	8000bf8 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	@ 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1a0      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800175a:	4b83      	ldr	r3, [pc, #524]	@ (8001968 <HAL_RCC_OscConfig+0x770>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x584>
 800176e:	4b7d      	ldr	r3, [pc, #500]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	4a7c      	ldr	r2, [pc, #496]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6713      	str	r3, [r2, #112]	@ 0x70
 800177a:	e02d      	b.n	80017d8 <HAL_RCC_OscConfig+0x5e0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10c      	bne.n	800179e <HAL_RCC_OscConfig+0x5a6>
 8001784:	4b77      	ldr	r3, [pc, #476]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a76      	ldr	r2, [pc, #472]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001790:	4b74      	ldr	r3, [pc, #464]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001794:	4a73      	ldr	r2, [pc, #460]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001796:	f023 0304 	bic.w	r3, r3, #4
 800179a:	6713      	str	r3, [r2, #112]	@ 0x70
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x5e0>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x5c8>
 80017a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b6:	4a6b      	ldr	r2, [pc, #428]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x5e0>
 80017c0:	4b68      	ldr	r3, [pc, #416]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c4:	4a67      	ldr	r2, [pc, #412]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80017cc:	4b65      	ldr	r3, [pc, #404]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d0:	4a64      	ldr	r2, [pc, #400]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff fa0a 	bl	8000bf8 <HAL_GetTick>
 80017e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff fa06 	bl	8000bf8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e14e      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017fe:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0ee      	beq.n	80017e8 <HAL_RCC_OscConfig+0x5f0>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff f9f4 	bl	8000bf8 <HAL_GetTick>
 8001810:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff f9f0 	bl	8000bf8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e138      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800182a:	4b4e      	ldr	r3, [pc, #312]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ee      	bne.n	8001814 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 812d 	beq.w	8001a9a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001840:	4b48      	ldr	r3, [pc, #288]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001848:	2b18      	cmp	r3, #24
 800184a:	f000 80bd 	beq.w	80019c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	2b02      	cmp	r3, #2
 8001854:	f040 809e 	bne.w	8001994 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001858:	4b42      	ldr	r3, [pc, #264]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a41      	ldr	r2, [pc, #260]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 800185e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff f9c8 	bl	8000bf8 <HAL_GetTick>
 8001868:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f9c4 	bl	8000bf8 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e10e      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800187e:	4b39      	ldr	r3, [pc, #228]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800188a:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 800188c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800188e:	4b37      	ldr	r3, [pc, #220]	@ (800196c <HAL_RCC_OscConfig+0x774>)
 8001890:	4013      	ands	r3, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	430a      	orrs	r2, r1
 800189e:	4931      	ldr	r1, [pc, #196]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	3b01      	subs	r3, #1
 80018aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b2:	3b01      	subs	r3, #1
 80018b4:	025b      	lsls	r3, r3, #9
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018be:	3b01      	subs	r3, #1
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018cc:	3b01      	subs	r3, #1
 80018ce:	061b      	lsls	r3, r3, #24
 80018d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80018d4:	4923      	ldr	r1, [pc, #140]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80018da:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80018dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018de:	4a21      	ldr	r2, [pc, #132]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80018e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ea:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <HAL_RCC_OscConfig+0x778>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018f2:	00d2      	lsls	r2, r2, #3
 80018f4:	491b      	ldr	r1, [pc, #108]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 80018fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fe:	f023 020c 	bic.w	r2, r3, #12
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	4917      	ldr	r1, [pc, #92]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001908:	4313      	orrs	r3, r2
 800190a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800190c:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 800190e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001910:	f023 0202 	bic.w	r2, r3, #2
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001918:	4912      	ldr	r1, [pc, #72]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 800191a:	4313      	orrs	r3, r2
 800191c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 800192c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192e:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194e:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <HAL_RCC_OscConfig+0x76c>)
 8001954:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f94d 	bl	8000bf8 <HAL_GetTick>
 800195e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001960:	e011      	b.n	8001986 <HAL_RCC_OscConfig+0x78e>
 8001962:	bf00      	nop
 8001964:	58024400 	.word	0x58024400
 8001968:	58024800 	.word	0x58024800
 800196c:	fffffc0c 	.word	0xfffffc0c
 8001970:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f940 	bl	8000bf8 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e08a      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001986:	4b47      	ldr	r3, [pc, #284]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x77c>
 8001992:	e082      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b43      	ldr	r3, [pc, #268]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a42      	ldr	r2, [pc, #264]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 800199a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff f92a 	bl	8000bf8 <HAL_GetTick>
 80019a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff f926 	bl	8000bf8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e070      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ba:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x7b0>
 80019c6:	e068      	b.n	8001a9a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019c8:	4b36      	ldr	r3, [pc, #216]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019ce:	4b35      	ldr	r3, [pc, #212]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d031      	beq.n	8001a40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f003 0203 	and.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d12a      	bne.n	8001a40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d122      	bne.n	8001a40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a04:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d11a      	bne.n	8001a40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0a5b      	lsrs	r3, r3, #9
 8001a0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d111      	bne.n	8001a40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	0c1b      	lsrs	r3, r3, #16
 8001a20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d108      	bne.n	8001a40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	0e1b      	lsrs	r3, r3, #24
 8001a32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e02b      	b.n	8001a9c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 8001a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a48:	08db      	lsrs	r3, r3, #3
 8001a4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a4e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d01f      	beq.n	8001a9a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 8001a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5e:	4a11      	ldr	r2, [pc, #68]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a66:	f7ff f8c7 	bl	8000bf8 <HAL_GetTick>
 8001a6a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a6c:	bf00      	nop
 8001a6e:	f7ff f8c3 	bl	8000bf8 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d0f9      	beq.n	8001a6e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 8001a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_RCC_OscConfig+0x8b0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a86:	00d2      	lsls	r2, r2, #3
 8001a88:	4906      	ldr	r1, [pc, #24]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 8001a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a92:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <HAL_RCC_OscConfig+0x8ac>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3730      	adds	r7, #48	@ 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	58024400 	.word	0x58024400
 8001aa8:	ffff0007 	.word	0xffff0007

08001aac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e19c      	b.n	8001dfa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b8a      	ldr	r3, [pc, #552]	@ (8001cec <HAL_RCC_ClockConfig+0x240>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d910      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b87      	ldr	r3, [pc, #540]	@ (8001cec <HAL_RCC_ClockConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 020f 	bic.w	r2, r3, #15
 8001ad6:	4985      	ldr	r1, [pc, #532]	@ (8001cec <HAL_RCC_ClockConfig+0x240>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b83      	ldr	r3, [pc, #524]	@ (8001cec <HAL_RCC_ClockConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e184      	b.n	8001dfa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d010      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	4b7b      	ldr	r3, [pc, #492]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d908      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b0c:	4b78      	ldr	r3, [pc, #480]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	4975      	ldr	r1, [pc, #468]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d010      	beq.n	8001b4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	4b70      	ldr	r3, [pc, #448]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d908      	bls.n	8001b4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	496a      	ldr	r1, [pc, #424]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d010      	beq.n	8001b7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699a      	ldr	r2, [r3, #24]
 8001b5c:	4b64      	ldr	r3, [pc, #400]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d908      	bls.n	8001b7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b68:	4b61      	ldr	r3, [pc, #388]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	495e      	ldr	r1, [pc, #376]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d010      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d908      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b96:	4b56      	ldr	r3, [pc, #344]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4953      	ldr	r1, [pc, #332]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d908      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f023 020f 	bic.w	r2, r3, #15
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4947      	ldr	r1, [pc, #284]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d055      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001be2:	4b43      	ldr	r3, [pc, #268]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	4940      	ldr	r1, [pc, #256]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d121      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0f6      	b.n	8001dfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c14:	4b36      	ldr	r3, [pc, #216]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d115      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0ea      	b.n	8001dfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c2c:	4b30      	ldr	r3, [pc, #192]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d109      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0de      	b.n	8001dfa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0d6      	b.n	8001dfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c4c:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	f023 0207 	bic.w	r2, r3, #7
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4925      	ldr	r1, [pc, #148]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c5e:	f7fe ffcb 	bl	8000bf8 <HAL_GetTick>
 8001c62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c66:	f7fe ffc7 	bl	8000bf8 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0be      	b.n	8001dfa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d1eb      	bne.n	8001c66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d010      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d208      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f023 020f 	bic.w	r2, r3, #15
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	490e      	ldr	r1, [pc, #56]	@ (8001cf0 <HAL_RCC_ClockConfig+0x244>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <HAL_RCC_ClockConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d214      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <HAL_RCC_ClockConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 020f 	bic.w	r2, r3, #15
 8001cd2:	4906      	ldr	r1, [pc, #24]	@ (8001cec <HAL_RCC_ClockConfig+0x240>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <HAL_RCC_ClockConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e086      	b.n	8001dfa <HAL_RCC_ClockConfig+0x34e>
 8001cec:	52002000 	.word	0x52002000
 8001cf0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	4b3f      	ldr	r3, [pc, #252]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d208      	bcs.n	8001d22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d10:	4b3c      	ldr	r3, [pc, #240]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	4939      	ldr	r1, [pc, #228]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d010      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	4b34      	ldr	r3, [pc, #208]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d208      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d3e:	4b31      	ldr	r3, [pc, #196]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	492e      	ldr	r1, [pc, #184]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d010      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	4b28      	ldr	r3, [pc, #160]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d208      	bcs.n	8001d7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d6c:	4b25      	ldr	r3, [pc, #148]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4922      	ldr	r1, [pc, #136]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d010      	beq.n	8001dac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d208      	bcs.n	8001dac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4917      	ldr	r1, [pc, #92]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dac:	f000 f834 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	4912      	ldr	r1, [pc, #72]	@ (8001e08 <HAL_RCC_ClockConfig+0x35c>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_RCC_ClockConfig+0x358>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8001e08 <HAL_RCC_ClockConfig+0x35c>)
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <HAL_RCC_ClockConfig+0x360>)
 8001de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001de4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <HAL_RCC_ClockConfig+0x364>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_RCC_ClockConfig+0x368>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe feb8 	bl	8000b64 <HAL_InitTick>
 8001df4:	4603      	mov	r3, r0
 8001df6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	58024400 	.word	0x58024400
 8001e08:	080025d4 	.word	0x080025d4
 8001e0c:	24000004 	.word	0x24000004
 8001e10:	24000000 	.word	0x24000000
 8001e14:	24000014 	.word	0x24000014

08001e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e1e:	4bb3      	ldr	r3, [pc, #716]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e26:	2b18      	cmp	r3, #24
 8001e28:	f200 8155 	bhi.w	80020d6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e32:	bf00      	nop
 8001e34:	08001e99 	.word	0x08001e99
 8001e38:	080020d7 	.word	0x080020d7
 8001e3c:	080020d7 	.word	0x080020d7
 8001e40:	080020d7 	.word	0x080020d7
 8001e44:	080020d7 	.word	0x080020d7
 8001e48:	080020d7 	.word	0x080020d7
 8001e4c:	080020d7 	.word	0x080020d7
 8001e50:	080020d7 	.word	0x080020d7
 8001e54:	08001ebf 	.word	0x08001ebf
 8001e58:	080020d7 	.word	0x080020d7
 8001e5c:	080020d7 	.word	0x080020d7
 8001e60:	080020d7 	.word	0x080020d7
 8001e64:	080020d7 	.word	0x080020d7
 8001e68:	080020d7 	.word	0x080020d7
 8001e6c:	080020d7 	.word	0x080020d7
 8001e70:	080020d7 	.word	0x080020d7
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	080020d7 	.word	0x080020d7
 8001e7c:	080020d7 	.word	0x080020d7
 8001e80:	080020d7 	.word	0x080020d7
 8001e84:	080020d7 	.word	0x080020d7
 8001e88:	080020d7 	.word	0x080020d7
 8001e8c:	080020d7 	.word	0x080020d7
 8001e90:	080020d7 	.word	0x080020d7
 8001e94:	08001ecb 	.word	0x08001ecb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e98:	4b94      	ldr	r3, [pc, #592]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ea4:	4b91      	ldr	r3, [pc, #580]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	4a90      	ldr	r2, [pc, #576]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001eb6:	e111      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001eb8:	4b8d      	ldr	r3, [pc, #564]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eba:	61bb      	str	r3, [r7, #24]
      break;
 8001ebc:	e10e      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ec0:	61bb      	str	r3, [r7, #24]
      break;
 8001ec2:	e10b      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001ec4:	4b8c      	ldr	r3, [pc, #560]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ec6:	61bb      	str	r3, [r7, #24]
      break;
 8001ec8:	e108      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001eca:	4b88      	ldr	r3, [pc, #544]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ed4:	4b85      	ldr	r3, [pc, #532]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ede:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ee0:	4b82      	ldr	r3, [pc, #520]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001eea:	4b80      	ldr	r3, [pc, #512]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eee:	08db      	lsrs	r3, r3, #3
 8001ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80e1 	beq.w	80020d0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	f000 8083 	beq.w	800201c <HAL_RCC_GetSysClockFreq+0x204>
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	f200 80a1 	bhi.w	8002060 <HAL_RCC_GetSysClockFreq+0x248>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x114>
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d056      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f2a:	e099      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d02d      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f38:	4b6c      	ldr	r3, [pc, #432]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	08db      	lsrs	r3, r3, #3
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	4a6b      	ldr	r2, [pc, #428]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f62:	4b62      	ldr	r3, [pc, #392]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f76:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80020fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f92:	e087      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f9e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002100 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fa6:	4b51      	ldr	r3, [pc, #324]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80020fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fd6:	e065      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002104 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fea:	4b40      	ldr	r3, [pc, #256]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ffe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80020fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800200a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800200e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002016:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800201a:	e043      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002026:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2f0>
 800202a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800202e:	4b2f      	ldr	r3, [pc, #188]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800203e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002042:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80020fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800204a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800204e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800205e:	e021      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002104 <HAL_RCC_GetSysClockFreq+0x2ec>
 800206e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002082:	ed97 6a02 	vldr	s12, [r7, #8]
 8002086:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80020fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800208a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800208e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	0a5b      	lsrs	r3, r3, #9
 80020aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020ae:	3301      	adds	r3, #1
 80020b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80020c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c8:	ee17 3a90 	vmov	r3, s15
 80020cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80020ce:	e005      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
      break;
 80020d4:	e002      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020d8:	61bb      	str	r3, [r7, #24]
      break;
 80020da:	bf00      	nop
  }

  return sysclockfreq;
 80020dc:	69bb      	ldr	r3, [r7, #24]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	@ 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	58024400 	.word	0x58024400
 80020f0:	03d09000 	.word	0x03d09000
 80020f4:	003d0900 	.word	0x003d0900
 80020f8:	007a1200 	.word	0x007a1200
 80020fc:	46000000 	.word	0x46000000
 8002100:	4c742400 	.word	0x4c742400
 8002104:	4a742400 	.word	0x4a742400
 8002108:	4af42400 	.word	0x4af42400

0800210c <acosf>:
 800210c:	b508      	push	{r3, lr}
 800210e:	ed2d 8b02 	vpush	{d8}
 8002112:	eeb0 8a40 	vmov.f32	s16, s0
 8002116:	f000 f929 	bl	800236c <__ieee754_acosf>
 800211a:	eeb4 8a48 	vcmp.f32	s16, s16
 800211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002122:	eef0 8a40 	vmov.f32	s17, s0
 8002126:	d615      	bvs.n	8002154 <acosf+0x48>
 8002128:	eeb0 0a48 	vmov.f32	s0, s16
 800212c:	f000 f90c 	bl	8002348 <fabsf>
 8002130:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002134:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	dd0a      	ble.n	8002154 <acosf+0x48>
 800213e:	f000 fa13 	bl	8002568 <__errno>
 8002142:	ecbd 8b02 	vpop	{d8}
 8002146:	2321      	movs	r3, #33	@ 0x21
 8002148:	6003      	str	r3, [r0, #0]
 800214a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800214e:	4804      	ldr	r0, [pc, #16]	@ (8002160 <acosf+0x54>)
 8002150:	f000 b902 	b.w	8002358 <nanf>
 8002154:	eeb0 0a68 	vmov.f32	s0, s17
 8002158:	ecbd 8b02 	vpop	{d8}
 800215c:	bd08      	pop	{r3, pc}
 800215e:	bf00      	nop
 8002160:	080025ea 	.word	0x080025ea

08002164 <sqrtf>:
 8002164:	b508      	push	{r3, lr}
 8002166:	ed2d 8b02 	vpush	{d8}
 800216a:	eeb0 8a40 	vmov.f32	s16, s0
 800216e:	f000 f8f9 	bl	8002364 <__ieee754_sqrtf>
 8002172:	eeb4 8a48 	vcmp.f32	s16, s16
 8002176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217a:	d60c      	bvs.n	8002196 <sqrtf+0x32>
 800217c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800219c <sqrtf+0x38>
 8002180:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	d505      	bpl.n	8002196 <sqrtf+0x32>
 800218a:	f000 f9ed 	bl	8002568 <__errno>
 800218e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8002192:	2321      	movs	r3, #33	@ 0x21
 8002194:	6003      	str	r3, [r0, #0]
 8002196:	ecbd 8b02 	vpop	{d8}
 800219a:	bd08      	pop	{r3, pc}
 800219c:	00000000 	.word	0x00000000

080021a0 <atanf>:
 80021a0:	b538      	push	{r3, r4, r5, lr}
 80021a2:	ee10 5a10 	vmov	r5, s0
 80021a6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80021aa:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80021ae:	eef0 7a40 	vmov.f32	s15, s0
 80021b2:	d30f      	bcc.n	80021d4 <atanf+0x34>
 80021b4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80021b8:	d904      	bls.n	80021c4 <atanf+0x24>
 80021ba:	ee70 7a00 	vadd.f32	s15, s0, s0
 80021be:	eeb0 0a67 	vmov.f32	s0, s15
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
 80021c4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80022fc <atanf+0x15c>
 80021c8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8002300 <atanf+0x160>
 80021cc:	2d00      	cmp	r5, #0
 80021ce:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80021d2:	e7f4      	b.n	80021be <atanf+0x1e>
 80021d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002304 <atanf+0x164>)
 80021d6:	429c      	cmp	r4, r3
 80021d8:	d810      	bhi.n	80021fc <atanf+0x5c>
 80021da:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80021de:	d20a      	bcs.n	80021f6 <atanf+0x56>
 80021e0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8002308 <atanf+0x168>
 80021e4:	ee30 7a07 	vadd.f32	s14, s0, s14
 80021e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021ec:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	dce3      	bgt.n	80021be <atanf+0x1e>
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	e013      	b.n	8002224 <atanf+0x84>
 80021fc:	f000 f8a4 	bl	8002348 <fabsf>
 8002200:	4b42      	ldr	r3, [pc, #264]	@ (800230c <atanf+0x16c>)
 8002202:	429c      	cmp	r4, r3
 8002204:	d84f      	bhi.n	80022a6 <atanf+0x106>
 8002206:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800220a:	429c      	cmp	r4, r3
 800220c:	d841      	bhi.n	8002292 <atanf+0xf2>
 800220e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8002212:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002216:	eea0 7a27 	vfma.f32	s14, s0, s15
 800221a:	2300      	movs	r3, #0
 800221c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002220:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800222a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002310 <atanf+0x170>
 800222e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8002314 <atanf+0x174>
 8002232:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8002318 <atanf+0x178>
 8002236:	ee66 6a06 	vmul.f32	s13, s12, s12
 800223a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800223e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800231c <atanf+0x17c>
 8002242:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8002246:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002320 <atanf+0x180>
 800224a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800224e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002324 <atanf+0x184>
 8002252:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8002256:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002328 <atanf+0x188>
 800225a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800225e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800232c <atanf+0x18c>
 8002262:	eea6 5a87 	vfma.f32	s10, s13, s14
 8002266:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002330 <atanf+0x190>
 800226a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800226e:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8002334 <atanf+0x194>
 8002272:	eea7 5a26 	vfma.f32	s10, s14, s13
 8002276:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002338 <atanf+0x198>
 800227a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800227e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002282:	eea5 7a86 	vfma.f32	s14, s11, s12
 8002286:	ee27 7a87 	vmul.f32	s14, s15, s14
 800228a:	d121      	bne.n	80022d0 <atanf+0x130>
 800228c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002290:	e795      	b.n	80021be <atanf+0x1e>
 8002292:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002296:	ee30 7a67 	vsub.f32	s14, s0, s15
 800229a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800229e:	2301      	movs	r3, #1
 80022a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80022a4:	e7be      	b.n	8002224 <atanf+0x84>
 80022a6:	4b25      	ldr	r3, [pc, #148]	@ (800233c <atanf+0x19c>)
 80022a8:	429c      	cmp	r4, r3
 80022aa:	d80b      	bhi.n	80022c4 <atanf+0x124>
 80022ac:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80022b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80022b8:	2302      	movs	r3, #2
 80022ba:	ee70 6a67 	vsub.f32	s13, s0, s15
 80022be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c2:	e7af      	b.n	8002224 <atanf+0x84>
 80022c4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80022c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80022cc:	2303      	movs	r3, #3
 80022ce:	e7a9      	b.n	8002224 <atanf+0x84>
 80022d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002340 <atanf+0x1a0>)
 80022d2:	491c      	ldr	r1, [pc, #112]	@ (8002344 <atanf+0x1a4>)
 80022d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80022d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80022dc:	edd3 6a00 	vldr	s13, [r3]
 80022e0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80022e4:	2d00      	cmp	r5, #0
 80022e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ea:	edd2 7a00 	vldr	s15, [r2]
 80022ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022f2:	bfb8      	it	lt
 80022f4:	eef1 7a67 	vneglt.f32	s15, s15
 80022f8:	e761      	b.n	80021be <atanf+0x1e>
 80022fa:	bf00      	nop
 80022fc:	bfc90fdb 	.word	0xbfc90fdb
 8002300:	3fc90fdb 	.word	0x3fc90fdb
 8002304:	3edfffff 	.word	0x3edfffff
 8002308:	7149f2ca 	.word	0x7149f2ca
 800230c:	3f97ffff 	.word	0x3f97ffff
 8002310:	3c8569d7 	.word	0x3c8569d7
 8002314:	3d4bda59 	.word	0x3d4bda59
 8002318:	bd6ef16b 	.word	0xbd6ef16b
 800231c:	3d886b35 	.word	0x3d886b35
 8002320:	3dba2e6e 	.word	0x3dba2e6e
 8002324:	3e124925 	.word	0x3e124925
 8002328:	3eaaaaab 	.word	0x3eaaaaab
 800232c:	bd15a221 	.word	0xbd15a221
 8002330:	bd9d8795 	.word	0xbd9d8795
 8002334:	bde38e38 	.word	0xbde38e38
 8002338:	be4ccccd 	.word	0xbe4ccccd
 800233c:	401bffff 	.word	0x401bffff
 8002340:	080025fc 	.word	0x080025fc
 8002344:	080025ec 	.word	0x080025ec

08002348 <fabsf>:
 8002348:	ee10 3a10 	vmov	r3, s0
 800234c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002350:	ee00 3a10 	vmov	s0, r3
 8002354:	4770      	bx	lr
	...

08002358 <nanf>:
 8002358:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002360 <nanf+0x8>
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	7fc00000 	.word	0x7fc00000

08002364 <__ieee754_sqrtf>:
 8002364:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8002368:	4770      	bx	lr
	...

0800236c <__ieee754_acosf>:
 800236c:	b508      	push	{r3, lr}
 800236e:	ee10 3a10 	vmov	r3, s0
 8002372:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002376:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800237a:	ed2d 8b0c 	vpush	{d8-d13}
 800237e:	d109      	bne.n	8002394 <__ieee754_acosf+0x28>
 8002380:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8002514 <__ieee754_acosf+0x1a8>
 8002384:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8002518 <__ieee754_acosf+0x1ac>
 8002388:	2b00      	cmp	r3, #0
 800238a:	fe37 0a80 	vselgt.f32	s0, s15, s0
 800238e:	ecbd 8b0c 	vpop	{d8-d13}
 8002392:	bd08      	pop	{r3, pc}
 8002394:	d904      	bls.n	80023a0 <__ieee754_acosf+0x34>
 8002396:	ee30 8a40 	vsub.f32	s16, s0, s0
 800239a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800239e:	e7f6      	b.n	800238e <__ieee754_acosf+0x22>
 80023a0:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80023a4:	d23c      	bcs.n	8002420 <__ieee754_acosf+0xb4>
 80023a6:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80023aa:	f240 80af 	bls.w	800250c <__ieee754_acosf+0x1a0>
 80023ae:	ee60 7a00 	vmul.f32	s15, s0, s0
 80023b2:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 800251c <__ieee754_acosf+0x1b0>
 80023b6:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002520 <__ieee754_acosf+0x1b4>
 80023ba:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8002524 <__ieee754_acosf+0x1b8>
 80023be:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80023c2:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8002528 <__ieee754_acosf+0x1bc>
 80023c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80023ca:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800252c <__ieee754_acosf+0x1c0>
 80023ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80023d2:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8002530 <__ieee754_acosf+0x1c4>
 80023d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80023da:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002534 <__ieee754_acosf+0x1c8>
 80023de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80023e2:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8002538 <__ieee754_acosf+0x1cc>
 80023e6:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80023ea:	eddf 6a54 	vldr	s13, [pc, #336]	@ 800253c <__ieee754_acosf+0x1d0>
 80023ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80023f2:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8002540 <__ieee754_acosf+0x1d4>
 80023f6:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80023fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8002402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002406:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8002544 <__ieee754_acosf+0x1d8>
 800240a:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800240e:	eee0 7a46 	vfms.f32	s15, s0, s12
 8002412:	ee70 7a67 	vsub.f32	s15, s0, s15
 8002416:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8002548 <__ieee754_acosf+0x1dc>
 800241a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800241e:	e7b6      	b.n	800238e <__ieee754_acosf+0x22>
 8002420:	2b00      	cmp	r3, #0
 8002422:	eddf da3e 	vldr	s27, [pc, #248]	@ 800251c <__ieee754_acosf+0x1b0>
 8002426:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8002520 <__ieee754_acosf+0x1b4>
 800242a:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8002528 <__ieee754_acosf+0x1bc>
 800242e:	eddf ba3f 	vldr	s23, [pc, #252]	@ 800252c <__ieee754_acosf+0x1c0>
 8002432:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8002530 <__ieee754_acosf+0x1c4>
 8002436:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8002534 <__ieee754_acosf+0x1c8>
 800243a:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8002538 <__ieee754_acosf+0x1cc>
 800243e:	eddf aa39 	vldr	s21, [pc, #228]	@ 8002524 <__ieee754_acosf+0x1b8>
 8002442:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 800253c <__ieee754_acosf+0x1d0>
 8002446:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8002540 <__ieee754_acosf+0x1d4>
 800244a:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 800244e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002452:	da28      	bge.n	80024a6 <__ieee754_acosf+0x13a>
 8002454:	ee30 8a09 	vadd.f32	s16, s0, s18
 8002458:	ee28 0a27 	vmul.f32	s0, s16, s15
 800245c:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8002460:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8002464:	eeac ca80 	vfma.f32	s24, s25, s0
 8002468:	eeaa aa80 	vfma.f32	s20, s21, s0
 800246c:	eeec ba00 	vfma.f32	s23, s24, s0
 8002470:	eeea 9a00 	vfma.f32	s19, s20, s0
 8002474:	eeab ba80 	vfma.f32	s22, s23, s0
 8002478:	eea9 9a80 	vfma.f32	s18, s19, s0
 800247c:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8002480:	ee68 8a80 	vmul.f32	s17, s17, s0
 8002484:	f7ff ff6e 	bl	8002364 <__ieee754_sqrtf>
 8002488:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800248c:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800254c <__ieee754_acosf+0x1e0>
 8002490:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002494:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002498:	ee77 7a80 	vadd.f32	s15, s15, s0
 800249c:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8002550 <__ieee754_acosf+0x1e4>
 80024a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80024a4:	e773      	b.n	800238e <__ieee754_acosf+0x22>
 80024a6:	ee39 8a40 	vsub.f32	s16, s18, s0
 80024aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80024ae:	eeb0 0a48 	vmov.f32	s0, s16
 80024b2:	f7ff ff57 	bl	8002364 <__ieee754_sqrtf>
 80024b6:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80024ba:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80024be:	eeac ca88 	vfma.f32	s24, s25, s16
 80024c2:	eeaa aa88 	vfma.f32	s20, s21, s16
 80024c6:	eeec ba08 	vfma.f32	s23, s24, s16
 80024ca:	ee10 3a10 	vmov	r3, s0
 80024ce:	eeab ba88 	vfma.f32	s22, s23, s16
 80024d2:	f36f 030b 	bfc	r3, #0, #12
 80024d6:	eeea 9a08 	vfma.f32	s19, s20, s16
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80024e2:	eeb0 6a48 	vmov.f32	s12, s16
 80024e6:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80024ea:	eea9 9a88 	vfma.f32	s18, s19, s16
 80024ee:	ee70 6a27 	vadd.f32	s13, s0, s15
 80024f2:	ee68 8a88 	vmul.f32	s17, s17, s16
 80024f6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80024fa:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80024fe:	eea0 7a26 	vfma.f32	s14, s0, s13
 8002502:	ee37 0a87 	vadd.f32	s0, s15, s14
 8002506:	ee30 0a00 	vadd.f32	s0, s0, s0
 800250a:	e740      	b.n	800238e <__ieee754_acosf+0x22>
 800250c:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8002554 <__ieee754_acosf+0x1e8>
 8002510:	e73d      	b.n	800238e <__ieee754_acosf+0x22>
 8002512:	bf00      	nop
 8002514:	40490fdb 	.word	0x40490fdb
 8002518:	00000000 	.word	0x00000000
 800251c:	3811ef08 	.word	0x3811ef08
 8002520:	3a4f7f04 	.word	0x3a4f7f04
 8002524:	bf303361 	.word	0xbf303361
 8002528:	bd241146 	.word	0xbd241146
 800252c:	3e4e0aa8 	.word	0x3e4e0aa8
 8002530:	bea6b090 	.word	0xbea6b090
 8002534:	3e2aaaab 	.word	0x3e2aaaab
 8002538:	3d9dc62e 	.word	0x3d9dc62e
 800253c:	4001572d 	.word	0x4001572d
 8002540:	c019d139 	.word	0xc019d139
 8002544:	33a22168 	.word	0x33a22168
 8002548:	3fc90fda 	.word	0x3fc90fda
 800254c:	b3a22168 	.word	0xb3a22168
 8002550:	40490fda 	.word	0x40490fda
 8002554:	3fc90fdb 	.word	0x3fc90fdb

08002558 <memset>:
 8002558:	4402      	add	r2, r0
 800255a:	4603      	mov	r3, r0
 800255c:	4293      	cmp	r3, r2
 800255e:	d100      	bne.n	8002562 <memset+0xa>
 8002560:	4770      	bx	lr
 8002562:	f803 1b01 	strb.w	r1, [r3], #1
 8002566:	e7f9      	b.n	800255c <memset+0x4>

08002568 <__errno>:
 8002568:	4b01      	ldr	r3, [pc, #4]	@ (8002570 <__errno+0x8>)
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	2400001c 	.word	0x2400001c

08002574 <__libc_init_array>:
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	4d0d      	ldr	r5, [pc, #52]	@ (80025ac <__libc_init_array+0x38>)
 8002578:	4c0d      	ldr	r4, [pc, #52]	@ (80025b0 <__libc_init_array+0x3c>)
 800257a:	1b64      	subs	r4, r4, r5
 800257c:	10a4      	asrs	r4, r4, #2
 800257e:	2600      	movs	r6, #0
 8002580:	42a6      	cmp	r6, r4
 8002582:	d109      	bne.n	8002598 <__libc_init_array+0x24>
 8002584:	4d0b      	ldr	r5, [pc, #44]	@ (80025b4 <__libc_init_array+0x40>)
 8002586:	4c0c      	ldr	r4, [pc, #48]	@ (80025b8 <__libc_init_array+0x44>)
 8002588:	f000 f818 	bl	80025bc <_init>
 800258c:	1b64      	subs	r4, r4, r5
 800258e:	10a4      	asrs	r4, r4, #2
 8002590:	2600      	movs	r6, #0
 8002592:	42a6      	cmp	r6, r4
 8002594:	d105      	bne.n	80025a2 <__libc_init_array+0x2e>
 8002596:	bd70      	pop	{r4, r5, r6, pc}
 8002598:	f855 3b04 	ldr.w	r3, [r5], #4
 800259c:	4798      	blx	r3
 800259e:	3601      	adds	r6, #1
 80025a0:	e7ee      	b.n	8002580 <__libc_init_array+0xc>
 80025a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a6:	4798      	blx	r3
 80025a8:	3601      	adds	r6, #1
 80025aa:	e7f2      	b.n	8002592 <__libc_init_array+0x1e>
 80025ac:	0800260c 	.word	0x0800260c
 80025b0:	0800260c 	.word	0x0800260c
 80025b4:	0800260c 	.word	0x0800260c
 80025b8:	08002614 	.word	0x08002614

080025bc <_init>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	bf00      	nop
 80025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c2:	bc08      	pop	{r3}
 80025c4:	469e      	mov	lr, r3
 80025c6:	4770      	bx	lr

080025c8 <_fini>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	bf00      	nop
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr
